{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"bo",
				"border"
			],
			[
				"cl",
				"cl	clear: left"
			],
			[
				"ma",
				"margin-top"
			],
			[
				"sel",
				"selected"
			],
			[
				"p",
				"p	position: relative"
			],
			[
				"ba",
				"base-line-height"
			],
			[
				"to",
				"top"
			],
			[
				"cle",
				"clearfix"
			],
			[
				"b",
				"b	border: all compact"
			],
			[
				"br",
				"br	border-radius"
			],
			[
				"fo",
				"font-weight"
			],
			[
				"bla",
				"black80"
			],
			[
				"in",
				"include"
			],
			[
				"d",
				"d	display: compact"
			],
			[
				"bl",
				"bl	border-left:"
			],
			[
				"ta",
				"ta	text-align: center"
			],
			[
				"fl",
				"fl	float: left"
			],
			[
				"i",
				"inline"
			],
			[
				"s",
				"span"
			],
			[
				"black",
				"black80"
			],
			[
				"or",
				"orange"
			],
			[
				"vis",
				"visibility"
			],
			[
				"cu",
				"cu	cursor: pointer"
			],
			[
				"se",
				"search-box"
			],
			[
				"te",
				"text-align"
			],
			[
				"whi",
				"white10"
			],
			[
				"T",
				"TopicCount"
			],
			[
				"sus",
				"success"
			],
			[
				"ts",
				"ts	text-shadow: color-rgb x y blur"
			],
			[
				"o",
				"op	opacity: [for Safari, FF & IE]"
			],
			[
				"sele",
				"selection"
			],
			[
				"f",
				"fs	font-size: size"
			],
			[
				"fi",
				"figure"
			],
			[
				"td",
				"td	text-decoration: none"
			],
			[
				"l",
				"lh	line-height"
			],
			[
				"ls",
				"ls	list-style:"
			],
			[
				"n",
				"none"
			],
			[
				"white",
				"white10"
			],
			[
				"bor",
				"border-bottom"
			],
			[
				"wi",
				"width"
			],
			[
				"a",
				"auto"
			],
			[
				"bot",
				"border-top"
			],
			[
				"con",
				"content"
			],
			[
				"inl",
				"inline-block"
			],
			[
				"z",
				"z-index"
			],
			[
				"border",
				"border-color"
			],
			[
				"tex",
				"text-decoration"
			],
			[
				"M",
				"margin"
			],
			[
				"li",
				"line-height"
			],
			[
				"mi",
				"middle"
			],
			[
				"tr",
				"transition"
			],
			[
				"r",
				"relative"
			],
			[
				"v",
				"va	vertical-align: middle"
			],
			[
				"he",
				"height"
			],
			[
				"pa",
				"padding"
			],
			[
				"min",
				"min-height"
			],
			[
				"mar",
				"margin"
			],
			[
				"ava",
				"avatar-border"
			],
			[
				"co",
				"color"
			],
			[
				"re",
				"relative"
			],
			[
				"h",
				"height"
			],
			[
				"op",
				"opacity"
			],
			[
				"w",
				"width"
			],
			[
				"tel",
				"text-align"
			],
			[
				"bac",
				"background"
			],
			[
				"back",
				"black60"
			],
			[
				"wh",
				"white"
			],
			[
				"clear",
				"clearfix"
			],
			[
				"clea",
				"clearfix"
			],
			[
				"ab",
				"absolute"
			],
			[
				"di",
				"display"
			]
		]
	},
	"buffers":
	[
		{
			"file": "app.js",
			"settings":
			{
				"buffer_size": 1234,
				"line_ending": "Unix"
			}
		},
		{
			"file": "README.md",
			"settings":
			{
				"buffer_size": 3048,
				"line_ending": "Unix"
			}
		},
		{
			"file": "routes/lists.js",
			"settings":
			{
				"buffer_size": 3310,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 191 files for \"name\"\n\n/Users/pezillionaire/GitHub/simpllist/app.js:\n   14  \n   15  app.configure(function(){\n   16:   app.set('views', __dirname + '/views');\n   17    app.set('view engine', 'jade');\n   18    app.use(express.bodyParser());\n   19    app.use(express.methodOverride());\n   20:   app.use(express.static(__dirname + '/public'));\n   21    app.use(app.router);\n   22  });\n   ..\n   33  \n   34  app.get('/', routes.index);\n   35: app.get('/partials/:name', routes.partials);\n   36  \n   37  // JSON API\n   38  \n   39: app.get('/api/name', api.name);\n   40  \n   41  app.get('/lists', list.findAll);\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/lib/mongodb/admin.js:\n  109   * Authenticate against MongoDB\n  110   *\n  111:  * @param {String} username The user name for the authentication.\n  112   * @param {String} password The password for the authentication.\n  113   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from authenticate or null if an error occured.\n  ...\n  115   * @api public\n  116   */\n  117: Admin.prototype.authenticate = function(username, password, callback) {\n  118:   this.db.authenticate(username, password, {authdb: 'admin'}, function(err, doc) {\n  119      return callback(err, doc);\n  120    })\n  ...\n  142   *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.\n  143   *\n  144:  * @param {String} username The user name for the authentication.\n  145   * @param {String} password The password for the authentication.\n  146   * @param {Object} [options] additional options during update.\n  ...\n  149   * @api public\n  150   */\n  151: Admin.prototype.addUser = function(username, password, options, callback) {\n  152    var args = Array.prototype.slice.call(arguments, 2);\n  153    callback = args.pop();\n  154    options = args.length ? args.shift() : {};\n  155  \n  156:   options.dbName = 'admin';\n  157    // Add user\n  158:   this.db.addUser(username, password, options, function(err, doc) {\n  159      return callback(err, doc);\n  160    })\n  ...\n  167   *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.\n  168   *\n  169:  * @param {String} username The user name for the authentication.\n  170   * @param {Object} [options] additional options during update.\n  171   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from removeUser or null if an error occured.\n  ...\n  173   * @api public\n  174   */\n  175: Admin.prototype.removeUser = function(username, options, callback) {\n  176    var self = this;\n  177    var args = Array.prototype.slice.call(arguments, 1);\n  178    callback = args.pop();\n  179    options = args.length ? args.shift() : {};\n  180:   options.dbName = 'admin';\n  181  \n  182:   this.db.removeUser(username, options, function(err, doc) {\n  183      return callback(err, doc);\n  184    })\n  ...\n  229  Admin.prototype.profilingInfo = function(callback) {\n  230    try {\n  231:     new Cursor(this.db, new Collection(this.db, DbCommand.SYSTEM_PROFILE_COLLECTION), {}, {}, {dbName: 'admin'}).toArray(function(err, items) {\n  232          return callback(err, items);\n  233      });\n  ...\n  262   * Validate an existing collection\n  263   *\n  264:  * @param {String} collectionName The name of the collection to validate.\n  265   * @param {Object} [options] Optional parameters to the command.\n  266   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from validateCollection or null if an error occured.\n  ...\n  268   * @api public\n  269   */\n  270: Admin.prototype.validateCollection = function(collectionName, options, callback) {\n  271    var args = Array.prototype.slice.call(arguments, 1);\n  272    callback = args.pop();\n  ...\n  274  \n  275    var self = this;\n  276:   var command = {validate: collectionName};\n  277    var keys = Object.keys(options);\n  278  \n  ...\n  293        return callback(new Error(\"Error with validation data\"), null);\n  294      if(doc.result != null && doc.result.match(/exception|corrupt/) != null)\n  295:       return callback(new Error(\"Error: invalid collection \" + collectionName), null);\n  296      if(doc.valid != null && !doc.valid)\n  297:       return callback(new Error(\"Error: invalid collection \" + collectionName), null);\n  298  \n  299      return callback(null, doc);\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/lib/mongodb/auth/mongodb_cr.js:\n    2    , utils = require('../utils');\n    3  \n    4: var authenticate = function(db, username, password, authdb, options, callback) {\n    5    var numberOfConnections = 0;\n    6    var errorObject = null;\n    .\n   22        var nonce = result.documents[0].nonce;\n   23        // Execute command\n   24:       db._executeQueryCommand(DbCommand.createAuthenticationCommand(db, username, password, nonce, authdb), {connection:connection}, function(err, result) {\n   25          // Count down\n   26          numberOfConnections = numberOfConnections - 1;\n   ..\n   39            if(errorObject == null && result.documents[0].ok == 1) {\n   40              // We authenticated correctly save the credentials\n   41:             db.serverConfig.auth.add('MONGODB-CR', db.databaseName, username, password, authdb);\n   42              // Return callback\n   43              internalCallback(errorObject, true);\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/lib/mongodb/auth/mongodb_gssapi.js:\n   13  } catch(err) {}\n   14  \n   15: var authenticate = function(db, username, password, authdb, options, callback) {\n   16    var numberOfConnections = 0;\n   17    var errorObject = null;  \n   ..\n   35  \n   36      // Start Auth process for a connection\n   37:     GSSAPIInitialize(db, username, password, authdb, connections[i], function(err, result) {\n   38        // Adjust number of connections left to connect\n   39        numberOfConnections = numberOfConnections - 1;\n   ..\n   45          if(err) return callback(error, false);\n   46          // We authenticated correctly save the credentials\n   47:         db.serverConfig.auth.add('GSSAPI', db.databaseName, username, password, authdb);\n   48          // Return valid callback\n   49          return callback(null, true);\n   ..\n   55  //\n   56  // Initialize step\n   57: var GSSAPIInitialize = function(db, username, password, authdb, connection, callback) {\n   58    // Create authenticator\n   59    var mongo_auth_process = new MongoAuthProcess(connection.socketOptions.host, connection.socketOptions.port);\n   60  \n   61    // Perform initialization\n   62:   mongo_auth_process.init(username, password, function(err, context) {\n   63      if(err) return callback(err, false);\n   64  \n   ..\n   68  \n   69        // Call the next db step\n   70:       MongoDBGSSAPIFirstStep(mongo_auth_process, payload, db, username, password, authdb, connection, callback);\n   71      });\n   72    });\n   ..\n   75  //\n   76  // Perform first step against mongodb\n   77: var MongoDBGSSAPIFirstStep = function(mongo_auth_process, payload, db, username, password, authdb, connection, callback) {\n   78    // Build the sasl start command\n   79    var command = {\n   ..\n   95  \n   96        // MongoDB API Second Step\n   97:       MongoDBGSSAPISecondStep(mongo_auth_process, payload, doc, db, username, password, authdb, connection, callback);\n   98      });\n   99    });\n  ...\n  102  //\n  103  // Perform first step against mongodb\n  104: var MongoDBGSSAPISecondStep = function(mongo_auth_process, payload, doc, db, username, password, authdb, connection, callback) {\n  105    // Build Authentication command to send to MongoDB\n  106    var command = {\n  ...\n  122  \n  123        // Call the last and third step\n  124:       MongoDBGSSAPIThirdStep(mongo_auth_process, payload, doc, db, username, password, authdb, connection, callback);\n  125      });    \n  126    });\n  127  }\n  128  \n  129: var MongoDBGSSAPIThirdStep = function(mongo_auth_process, payload, doc, db, username, password, authdb, connection, callback) {\n  130    // Build final command\n  131    var command = {\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/lib/mongodb/auth/mongodb_sspi.js:\n   13  } catch(err) {}\n   14  \n   15: var authenticate = function(db, username, password, authdb, options, callback) {\n   16    var numberOfConnections = 0;\n   17    var errorObject = null;  \n   ..\n   37    for(var i = 0; i < numberOfConnections; i++) {\n   38      // Start Auth process for a connection\n   39:     SSIPAuthenticate(db, username, password, authdb, connections[i], function(err, result) {\n   40        // Adjust number of connections left to connect\n   41        numberOfConnections = numberOfConnections - 1;\n   ..\n   47          if(err) return callback(err, false);\n   48          // We authenticated correctly save the credentials\n   49:         db.serverConfig.auth.add('GSSAPI', db.databaseName, username, password, authdb);\n   50          // Return valid callback\n   51          return callback(null, true);\n   ..\n   55  }\n   56  \n   57: var SSIPAuthenticate = function(db, username, password, authdb, connection, callback) {\n   58    // --------------------------------------------------------------\n   59    // Async Version\n   ..\n   74      doc = doc.documents[0];\n   75  \n   76:     mongo_auth_process.init(username, password, function(err) {\n   77        if(err) return callback(err);\n   78  \n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/lib/mongodb/collection.js:\n   37   * @class Represents a Collection\n   38   * @param {Object} db db instance.\n   39:  * @param {String} collectionName collection name.\n   40   * @param {Object} [pkFactory] alternative primary key factory.\n   41   * @param {Object} [options] additional options for the collection.\n   42   * @return {Object} a collection instance.\n   43   */\n   44: function Collection (db, collectionName, pkFactory, options) {\n   45:   if(!(this instanceof Collection)) return new Collection(db, collectionName, pkFactory, options);\n   46  \n   47:   checkCollectionName(collectionName);\n   48  \n   49    this.db = db;\n   50:   this.collectionName = collectionName;\n   51    this.internalHint = null;\n   52    this.opts = options != null && ('object' === typeof options) ? options : {};\n   ..\n   69   *\n   70   * Options\n   71: *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write\n   72   *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)\n   73   *  - **fsync**, (Boolean, default:false) write waits for fsync before returning\n   ..\n   97   * @ignore\n   98   */\n   99: var checkCollectionName = function checkCollectionName (collectionName) {\n  100:   if ('string' !== typeof collectionName) {\n  101:     throw Error(\"collection name must be a String\");\n  102    }\n  103  \n  104:   if (!collectionName || collectionName.indexOf('..') != -1) {\n  105:     throw Error(\"collection names cannot be empty\");\n  106    }\n  107  \n  108:   if (collectionName.indexOf('$') != -1 &&\n  109:       collectionName.match(/((^\\$cmd)|(oplog\\.\\$main))/) == null) {\n  110:     throw Error(\"collection names must not contain '$'\");\n  111    }\n  112  \n  113:   if (collectionName.match(/^\\.|\\.$/) != null) {\n  114:     throw Error(\"collection names must not start or end with '.'\");\n  115    }\n  116  };\n  ...\n  120   *\n  121   * Options\n  122: *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write\n  123   *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)\n  124   *  - **fsync**, (Boolean, default:false) write waits for fsync before returning\n  ...\n  152    var flags = 0 | (options.single ? 1 : 0);\n  153  \n  154:   // DbName\n  155:   var dbName = options['dbName'];\n  156:   // If no dbname defined use the db one\n  157:   if(dbName == null) {\n  158:     dbName = this.db.databaseName;\n  159    }\n  160  \n  ...\n  162    var deleteCommand = new DeleteCommand(\n  163        this.db\n  164:     , dbName + \".\" + this.collectionName\n  165      , selector\n  166      , flags);\n  ...\n  213  \n  214  /**\n  215:  * Renames the collection.\n  216   *\n  217   * Options\n  218:  *  - **dropTarget** {Boolean, default:false}, drop the target name collection if it previously exists.\n  219   *\n  220:  * @param {String} newName the new name of the collection.\n  221   * @param {Object} [options] returns option results.\n  222   * @param {Function} callback the callback accepting the result\n  ...\n  224   * @api public\n  225   */\n  226: Collection.prototype.rename = function rename (newName, options, callback) {\n  227    var self = this;\n  228  \n  ...\n  232    }\n  233  \n  234:   // Ensure the new name is valid\n  235:   checkCollectionName(newName);\n  236:   // Execute the command, return the new renamed collection if successful\n  237:   self.db._executeQueryCommand(DbCommand.createRenameCollectionCommand(self.db, self.collectionName, newName, options), function(err, result) {\n  238      if(err == null && result.documents[0].ok == 1) {\n  239        if(callback != null) {\n  240:         // Set current object to point to the new name\n  241:         self.collectionName = newName;\n  242          // Return the current collection\n  243          callback(null, self);\n  ...\n  274    }\n  275  \n  276:   // DbName\n  277:   var dbName = options['dbName'];\n  278:   // If no dbname defined use the db one\n  279:   if(dbName == null) {\n  280:     dbName = self.db.databaseName;\n  281    }\n  282  \n  ...\n  292    var insertCommand = new InsertCommand(\n  293        self.db\n  294:     , dbName + \".\" + self.collectionName, true, insertFlags);\n  295  \n  296    // Add the documents and decorate them with id's if they have none\n  ...\n  361   *\n  362   * Options\n  363: *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write\n  364   *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)\n  365   *  - **fsync**, (Boolean, default:false) write waits for fsync before returning\n  ...\n  405   *\n  406   * Options\n  407: *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write\n  408   *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)\n  409   *  - **fsync**, (Boolean, default:false) write waits for fsync before returning\n  ...\n  428    if(!('function' === typeof callback)) callback = null;\n  429  \n  430:   // DbName\n  431:   var dbName = options['dbName'];\n  432:   // If no dbname defined use the db one\n  433:   if(dbName == null) {\n  434:     dbName = this.db.databaseName;\n  435    }\n  436  \n  ...\n  449    var updateCommand = new UpdateCommand(\n  450        this.db\n  451:     , dbName + \".\" + this.collectionName\n  452      , selector\n  453      , document\n  ...\n  523  \n  524    var mapCommandHash = {\n  525:       'distinct': this.collectionName\n  526      , 'query': query\n  527      , 'key': key\n  ...\n  566    // Final query\n  567    var final_query = {\n  568:       'count': this.collectionName\n  569      , 'query': query\n  570      , 'fields': null\n  ...\n  586    var queryCommand = new QueryCommand(\n  587        this.db\n  588:     , this.db.databaseName + \".$cmd\"\n  589      , queryOptions\n  590      , 0\n  ...\n  616   */\n  617  Collection.prototype.drop = function drop(callback) {\n  618:   this.db.dropCollection(this.collectionName, callback);\n  619  };\n  620  \n  ...\n  623   *\n  624   * Options\n  625: *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write\n  626   *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)\n  627   *  - **fsync**, (Boolean, default:false) write waits for fsync before returning\n  ...\n  651  \n  652    var queryObject = {\n  653:       'findandmodify': this.collectionName\n  654      , 'query': query\n  655      , 'sort': utils.formattedOrderClause(sort)\n  ...\n  738   *\n  739   * Options\n  740: *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write\n  741   *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)\n  742   *  - **fsync**, (Boolean, default:false) write waits for fsync before returning\n  ...\n  767      limit: 1, sort: 1, fields:1, skip: 1, hint: 1, explain: 1, snapshot: 1, timeout: 1, tailable: 1, tailableRetryInterval: 1\n  768    , numberOfRetries: 1, awaitdata: 1, exhaust: 1, batchSize: 1, returnKey: 1, maxScan: 1, min: 1, max: 1, showDiskLoc: 1\n  769:   , comment: 1, raw: 1, readPreference: 1, partial: 1, read: 1, dbName: 1\n  770  };\n  771  \n  ...\n  831  \n  832    if(len === 2 && !Array.isArray(fields)) {\n  833:     var fieldKeys = Object.getOwnPropertyNames(fields);\n  834      var is_option = false;\n  835  \n  ...\n  869      if(object_size != object.length)  {\n  870        var error = new Error(\"query selector raw message size does not match message header size [\" + object.length + \"] != [\" + object_size + \"]\");\n  871:       error.name = 'MongoError';\n  872        throw error;\n  873      }\n  ...\n  880      if(object_size != object.length)  {\n  881        var error = new Error(\"query fields raw message size does not match message header size [\" + object.length + \"] != [\" + object_size + \"]\");\n  882:       error.name = 'MongoError';\n  883        throw error;\n  884      }\n  ...\n  953        case Object:\n  954          finalHint = {};\n  955:         for (var name in hint) {\n  956:           finalHint[name] = hint[name];\n  957          }\n  958          break;\n  ...\n 1024   *\n 1025   * Options\n 1026: *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write\n 1027   *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)\n 1028   *  - **fsync**, (Boolean, default:false) write waits for fsync before returning\n ....\n 1036   *  - **v** {Number}, specify the format version of the indexes.\n 1037   *  - **expireAfterSeconds** {Number}, allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)\n 1038:  *  - **name** {String}, override the autogenerated index name (useful if the resulting name is larger than 128 bytes)\n 1039   * \n 1040   * Deprecated Options \n ....\n 1058    var errorOptions = _getWriteConcern(this, options, callback);\n 1059    // Execute create index\n 1060:   this.db.createIndex(this.collectionName, fieldOrSpec, options, callback);\n 1061  };\n 1062  \n ....\n 1065   *\n 1066   * Options\n 1067: *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write\n 1068   *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)\n 1069   *  - **fsync**, (Boolean, default:false) write waits for fsync before returning\n ....\n 1077   *  - **v** {Number}, specify the format version of the indexes.\n 1078   *  - **expireAfterSeconds** {Number}, allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)\n 1079:  *  - **name** {String}, override the autogenerated index name (useful if the resulting name is larger than 128 bytes)\n 1080   * \n 1081   * Deprecated Options \n ....\n 1100  \n 1101    // Execute create index\n 1102:   this.db.ensureIndex(this.collectionName, fieldOrSpec, options, callback);\n 1103  };\n 1104  \n ....\n 1120    options = args.length ? args.shift() || {} : {};\n 1121    // Call the index information\n 1122:   this.db.indexInformation(this.collectionName, options, callback);\n 1123  };\n 1124  \n ....\n 1126   * Drops an index from this collection.\n 1127   *\n 1128:  * @param {String} name\n 1129   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the dropIndex method or null if an error occured.\n 1130   * @return {null}\n 1131   * @api public\n 1132   */\n 1133: Collection.prototype.dropIndex = function dropIndex (name, callback) {\n 1134:   this.db.dropIndex(this.collectionName, name, callback);\n 1135  };\n 1136  \n ....\n 1143   */\n 1144  Collection.prototype.dropAllIndexes = function dropIndexes (callback) {\n 1145:   this.db.dropIndex(this.collectionName, '*', function (err, result) {\n 1146      if(err != null) {\n 1147        callback(err, false);\n ....\n 1173  **/\n 1174  Collection.prototype.reIndex = function(callback) {\n 1175:   this.db.reIndex(this.collectionName, callback);\n 1176  }\n 1177  \n ....\n 1180   *\n 1181   * Options\n 1182:  *  - **out** {Object}, sets the output target for the map reduce job. *{inline:1} | {replace:'collectionName'} | {merge:'collectionName'} | {reduce:'collectionName'}*\n 1183   *  - **query** {Object}, query filter object.\n 1184   *  - **sort** {Object}, sorts the input objects using this key. Useful for optimization, like sorting by the emit key for fewer reduces.\n ....\n 1218  \n 1219    var mapCommandHash = {\n 1220:       mapreduce: this.collectionName\n 1221      , map: map\n 1222      , reduce: reduce\n ....\n 1224  \n 1225    // Add any other options passed in\n 1226:   for (var name in options) {\n 1227:     if ('scope' == name) {\n 1228:       mapCommandHash[name] = processScope(options[name]);\n 1229      } else {\n 1230:       mapCommandHash[name] = options[name];\n 1231      }\n 1232    }\n ....\n 1397      var selector = {\n 1398        group: {\n 1399:           'ns': this.collectionName\n 1400          , '$reduce': reduceFunction\n 1401          , 'cond': condition\n ....\n 1441        : {};\n 1442  \n 1443:     scope.ns = this.collectionName;\n 1444      scope.keys = keys;\n 1445      scope.condition = condition;\n ....\n 1464   */\n 1465  Collection.prototype.options = function options(callback) {\n 1466:   this.db.collectionsInfo(this.collectionName, function (err, cursor) {\n 1467      if (err) return callback(err);\n 1468      cursor.nextObject(function (err, document) {\n ....\n 1492   * Checks if one or more indexes exist on the collection\n 1493   *\n 1494:  * @param {String|Array} indexNames check if one or more indexes exist on the collection.\n 1495   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the indexExists method or null if an error occured.\n 1496   * @return {null}\n ....\n 1501     // If we have an error return\n 1502     if(err != null) return callback(err, null);\n 1503:    // Let's check for the index names\n 1504     if(Array.isArray(indexes)) {\n 1505       for(var i = 0; i < indexes.length; i++) {\n ....\n 1545    // Build command object\n 1546    var commandObject = {\n 1547:     geoNear:this.collectionName,\n 1548      near: [x, y]\n 1549    }\n ....\n 1586    // Build command object\n 1587    var commandObject = {\n 1588:     geoSearch:this.collectionName,\n 1589      near: [x, y]\n 1590    }\n ....\n 1609  Collection.prototype.indexes = function indexes(callback) {\n 1610    // Return all the index information\n 1611:   this.db.indexInformation(this.collectionName, {full:true}, callback);\n 1612  }\n 1613  \n ....\n 1642  \n 1643    // Build the command\n 1644:   var command = { aggregate : this.collectionName, pipeline : pipeline};\n 1645    // Add all options\n 1646    var keys = Object.keys(options);\n ....\n 1684    // Build command object\n 1685    var commandObject = {\n 1686:     collStats:this.collectionName,\n 1687    }\n 1688  \n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/lib/mongodb/commands/db_command.js:\n    8    Db Command\n    9  **/\n   10: var DbCommand = exports.DbCommand = function(dbInstance, collectionName, queryOptions, numberToSkip, numberToReturn, query, returnFieldSelector, options) {\n   11    QueryCommand.call(this);\n   12:   this.collectionName = collectionName;\n   13    this.queryOptions = queryOptions;\n   14    this.numberToSkip = numberToSkip;\n   ..\n   29  \n   30  // Constants\n   31: DbCommand.SYSTEM_NAMESPACE_COLLECTION = \"system.namespaces\";\n   32  DbCommand.SYSTEM_INDEX_COLLECTION = \"system.indexes\";\n   33  DbCommand.SYSTEM_PROFILE_COLLECTION = \"system.profile\";\n   ..\n   37  \n   38  // New commands\n   39: DbCommand.NcreateIsMasterCommand = function(db, databaseName) {\n   40:   return new DbCommand(db, databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'ismaster':1}, null);\n   41  };\n   42  \n   43  // Provide constructors for different db commands\n   44  DbCommand.createIsMasterCommand = function(db) {\n   45:   return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'ismaster':1}, null);\n   46  };\n   47  \n   48  DbCommand.createCollectionInfoCommand = function(db, selector) {\n   49:   return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_NAMESPACE_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, 0, selector, null);\n   50  };\n   51  \n   52  DbCommand.createGetNonceCommand = function(db, options) {\n   53:   return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'getnonce':1}, null);\n   54  };\n   55  \n   56: DbCommand.createAuthenticationCommand = function(db, username, password, nonce, authdb) {\n   57    // Use node md5 generator\n   58    var md5 = crypto.createHash('md5');\n   59    // Generate keys used for authentication\n   60:   md5.update(username + \":mongo:\" + password);\n   61    var hash_password = md5.digest('hex');\n   62    // Final key\n   63    md5 = crypto.createHash('md5');\n   64:   md5.update(nonce + username + hash_password);\n   65    var key = md5.digest('hex');\n   66    // Creat selector\n   67:   var selector = {'authenticate':1, 'user':username, 'nonce':nonce, 'key':key};\n   68    // Create db command\n   69    return new DbCommand(db, authdb + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NONE, 0, -1, selector, null);\n   ..\n   71  \n   72  DbCommand.createLogoutCommand = function(db) {\n   73:   return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'logout':1}, null);\n   74  };\n   75  \n   76: DbCommand.createCreateCollectionCommand = function(db, collectionName, options) {\n   77:   var selector = {'create':collectionName};\n   78    // Modify the options to ensure correct behaviour\n   79:   for(var name in options) {\n   80:     if(options[name] != null && options[name].constructor != Function) selector[name] = options[name];\n   81    }\n   82    // Execute the command\n   83:   return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, selector, null);\n   84  };\n   85  \n   86: DbCommand.createDropCollectionCommand = function(db, collectionName) {\n   87:   return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'drop':collectionName}, null);\n   88  };\n   89  \n   90: DbCommand.createRenameCollectionCommand = function(db, fromCollectionName, toCollectionName, options) {\n   91:   var renameCollection = db.databaseName + \".\" + fromCollectionName;\n   92:   var toCollection = db.databaseName + \".\" + toCollectionName;\n   93    var dropTarget = options && options.dropTarget ? options.dropTarget : false;\n   94:   return new DbCommand(db, \"admin.\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'renameCollection':renameCollection, 'to':toCollection, 'dropTarget':dropTarget}, null);\n   95  };\n   96  \n   ..\n  105    // If we have an options Object let's merge in the fields (fsync/wtimeout/w)\n  106    if('object' === typeof options) {\n  107:     for(var name in options) {\n  108:       command[name] = options[name]\n  109      }\n  110    }\n  ...\n  116  \n  117    // Execute command\n  118:   return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, command, null);\n  119  };\n  120  \n  ...\n  122  \n  123  DbCommand.createGetPreviousErrorsCommand = function(db) {\n  124:   return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'getpreverror':1}, null);\n  125  };\n  126  \n  127  DbCommand.createResetErrorHistoryCommand = function(db) {\n  128:   return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'reseterror':1}, null);\n  129  };\n  130  \n  131: DbCommand.createCreateIndexCommand = function(db, collectionName, fieldOrSpec, options) {\n  132    var fieldHash = {};\n  133    var indexes = [];\n  ...\n  172    }\n  173  \n  174:   // Generate the index name\n  175:   var indexName = typeof options.name == 'string'\n  176:     ? options.name\n  177      : indexes.join(\"_\");\n  178  \n  179    var selector = {\n  180:     'ns': db.databaseName + \".\" + collectionName,\n  181      'key': fieldHash,\n  182:     'name': indexName\n  183    }\n  184  \n  ...\n  202      selector['unique'] = finalUnique;\n  203  \n  204:   var name = db.databaseName + \".\" + DbCommand.SYSTEM_INDEX_COLLECTION;\n  205:   var cmd = new InsertCommand(db, name, false);\n  206    return cmd.add(selector);\n  207  };\n  208  \n  209  DbCommand.logoutCommand = function(db, command_hash, options) {\n  210:   var dbName = options != null && options['authdb'] != null ? options['authdb'] : db.databaseName;\n  211:   return new DbCommand(db, dbName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, command_hash, null);\n  212  }\n  213  \n  214: DbCommand.createDropIndexCommand = function(db, collectionName, indexName) {\n  215:   return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'deleteIndexes':collectionName, 'index':indexName}, null);\n  216  };\n  217  \n  218: DbCommand.createReIndexCommand = function(db, collectionName) {\n  219:   return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'reIndex':collectionName}, null);\n  220  };\n  221  \n  222  DbCommand.createDropDatabaseCommand = function(db) {\n  223:   return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'dropDatabase':1}, null);\n  224  };\n  225  \n  226  DbCommand.createDbCommand = function(db, command_hash, options, auth_db) {\n  227:   var db_name = (auth_db ? auth_db : db.databaseName) + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION;\n  228:   return new DbCommand(db, db_name, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, command_hash, null, options);\n  229  };\n  230  \n  ...\n  238  \n  239  DbCommand.createDbSlaveOkCommand = function(db, command_hash, options) {\n  240:   return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT | QueryCommand.OPTS_SLAVE, 0, -1, command_hash, null, options);\n  241  };\n  242  \n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/lib/mongodb/commands/delete_command.js:\n    5    Insert Document Command\n    6  **/\n    7: var DeleteCommand = exports.DeleteCommand = function(db, collectionName, selector, flags) {\n    8    BaseCommand.call(this);\n    9  \n   ..\n   14      if(object_size != object.length)  {\n   15        var error = new Error(\"delete raw message size does not match message header size [\" + object.length + \"] != [\" + object_size + \"]\");\n   16:       error.name = 'MongoError';\n   17        throw error;\n   18      }\n   ..\n   20    \n   21    this.flags = flags;\n   22:   this.collectionName = collectionName;\n   23    this.selector = selector;\n   24    this.db = db;\n   ..\n   33      MsgHeader header;                 // standard message header\n   34      int32     ZERO;                   // 0 - reserved for future use\n   35:     cstring   fullCollectionName;     // \"dbname.collectionname\"\n   36      int32     ZERO;                   // 0 - reserved for future use\n   37      mongo.BSON      selector;               // query object.  See below for details.\n   ..\n   40  DeleteCommand.prototype.toBinary = function() {\n   41    // Calculate total length of the document\n   42:   var totalLengthOfCommand = 4 + Buffer.byteLength(this.collectionName) + 1 + 4 + this.db.bson.calculateObjectSize(this.selector, false, true) + (4 * 4);\n   43    // Let's build the single pass buffer command\n   44    var _index = 0;\n   ..\n   77    _command[_index++] = 0;\n   78  \n   79:   // Write the collection name to the command\n   80:   _index = _index + _command.write(this.collectionName, _index, 'utf8') + 1;\n   81    _command[_index - 1] = 0;    \n   82  \n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/lib/mongodb/commands/get_more_command.js:\n    6    Get More Document Command\n    7  **/\n    8: var GetMoreCommand = exports.GetMoreCommand = function(db, collectionName, numberToReturn, cursorId) {\n    9    BaseCommand.call(this);\n   10  \n   11:   this.collectionName = collectionName;\n   12    this.numberToReturn = numberToReturn;\n   13    this.cursorId = cursorId;\n   ..\n   21  GetMoreCommand.prototype.toBinary = function() {\n   22    // Calculate total length of the document\n   23:   var totalLengthOfCommand = 4 + Buffer.byteLength(this.collectionName) + 1 + 4 + 8 + (4 * 4);\n   24    // Let's build the single pass buffer command\n   25    var _index = 0;\n   ..\n   55    _command[_index++] = 0;\n   56  \n   57:   // Write the collection name to the command\n   58:   _index = _index + _command.write(this.collectionName, _index, 'utf8') + 1;\n   59    _command[_index - 1] = 0;    \n   60  \n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/lib/mongodb/commands/insert_command.js:\n    5    Insert Document Command\n    6  **/\n    7: var InsertCommand = exports.InsertCommand = function(db, collectionName, checkKeys, options) {\n    8    BaseCommand.call(this);\n    9  \n   10:   this.collectionName = collectionName;\n   11    this.documents = [];\n   12    this.checkKeys = checkKeys == null ? true : checkKeys;\n   ..\n   46      if(object_size != document.length)  {\n   47        var error = new Error(\"insert raw message size does not match message header size [\" + document.length + \"] != [\" + object_size + \"]\");\n   48:       error.name = 'MongoError';\n   49        throw error;\n   50      }\n   ..\n   59      MsgHeader header;             // standard message header\n   60      int32     ZERO;               // 0 - reserved for future use\n   61:     cstring   fullCollectionName; // \"dbname.collectionname\"\n   62      BSON[]    documents;          // one or more documents to insert into the collection\n   63  }\n   ..\n   65  InsertCommand.prototype.toBinary = function() {\n   66    // Calculate total length of the document\n   67:   var totalLengthOfCommand = 4 + Buffer.byteLength(this.collectionName) + 1 + (4 * 4);\n   68    // var docLength = 0\n   69    for(var i = 0; i < this.documents.length; i++) {\n   ..\n  112    // Adjust index\n  113    _index = _index + 4;\n  114:   // Write the collection name to the command\n  115:   _index = _index + _command.write(this.collectionName, _index, 'utf8') + 1;\n  116    _command[_index - 1] = 0;\n  117  \n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/lib/mongodb/commands/query_command.js:\n    5    Insert Document Command\n    6  **/\n    7: var QueryCommand = exports.QueryCommand = function(db, collectionName, queryOptions, numberToSkip, numberToReturn, query, returnFieldSelector, options) {\n    8    BaseCommand.call(this);\n    9  \n   ..\n   15      if(object_size != object.length) {\n   16        var error = new Error(\"query selector raw message size does not match message header size [\" + object.length + \"] != [\" + object_size + \"]\");\n   17:       error.name = 'MongoError';\n   18        throw error;\n   19      }\n   ..\n   25      if(object_size != object.length) {\n   26        var error = new Error(\"query fields raw message size does not match message header size [\" + object.length + \"] != [\" + object_size + \"]\");\n   27:       error.name = 'MongoError';\n   28        throw error;\n   29      }\n   ..\n   33    options = options == null ? {} : options;\n   34    // Set up options\n   35:   this.collectionName = collectionName;\n   36    this.queryOptions = queryOptions;\n   37    this.numberToSkip = numberToSkip;\n   ..\n  104      MsgHeader header;                 // standard message header\n  105      int32     opts;                   // query options.  See below for details.\n  106:     cstring   fullCollectionName;     // \"dbname.collectionname\"\n  107      int32     numberToSkip;           // number of documents to skip when returning results\n  108      int32     numberToReturn;         // number of documents to return in the first OP_REPLY\n  ...\n  116    // Calculate total length of the document\n  117    if(Buffer.isBuffer(this.query)) {\n  118:     totalLengthOfCommand = 4 + Buffer.byteLength(this.collectionName) + 1 + 4 + 4 + this.query.length + (4 * 4);\n  119    } else {\n  120:     totalLengthOfCommand = 4 + Buffer.byteLength(this.collectionName) + 1 + 4 + 4 + this.db.bson.calculateObjectSize(this.query, this.serializeFunctions, true) + (4 * 4);\n  121    }\n  122  \n  ...\n  168    _index = _index + 4;\n  169  \n  170:   // Write the collection name to the command\n  171:   _index = _index + _command.write(this.collectionName, _index, 'utf8') + 1;\n  172    _command[_index - 1] = 0;\n  173  \n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/lib/mongodb/commands/update_command.js:\n    5    Update Document Command\n    6  **/\n    7: var UpdateCommand = exports.UpdateCommand = function(db, collectionName, spec, document, options) {\n    8    BaseCommand.call(this);\n    9  \n   ..\n   13      if(object_size != object.length)  {\n   14        var error = new Error(\"update spec raw message size does not match message header size [\" + object.length + \"] != [\" + object_size + \"]\");\n   15:       error.name = 'MongoError';\n   16        throw error;\n   17      }\n   ..\n   23      if(object_size != object.length)  {\n   24        var error = new Error(\"update document raw message size does not match message header size [\" + object.length + \"] != [\" + object_size + \"]\");\n   25:       error.name = 'MongoError';\n   26        throw error;\n   27      }\n   28    }\n   29  \n   30:   this.collectionName = collectionName;\n   31    this.spec = spec;\n   32    this.document = document;\n   ..\n   56      MsgHeader header;             // standard message header\n   57      int32     ZERO;               // 0 - reserved for future use\n   58:     cstring   fullCollectionName; // \"dbname.collectionname\"\n   59      int32     flags;              // bit vector. see below\n   60      BSON      spec;               // the query to select the document\n   ..\n   64  UpdateCommand.prototype.toBinary = function() {\n   65    // Calculate total length of the document\n   66:   var totalLengthOfCommand = 4 + Buffer.byteLength(this.collectionName) + 1 + 4 + this.db.bson.calculateObjectSize(this.spec, false, true) +\n   67        this.db.bson.calculateObjectSize(this.document, this.serializeFunctions, true) + (4 * 4);\n   68  \n   ..\n  103    _command[_index++] = 0;\n  104  \n  105:   // Write the collection name to the command\n  106:   _index = _index + _command.write(this.collectionName, _index, 'utf8') + 1;\n  107    _command[_index - 1] = 0;    \n  108  \n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/lib/mongodb/connection/base.js:\n  104  }\n  105  \n  106: AuthStore.prototype.add = function(authMechanism, dbName, username, password, authdbName) {\n  107    // Check for duplicates\n  108:   if(!this.contains(dbName)) {\n  109      // Base config\n  110      var config = {\n  111:         'username':username\n  112        , 'password':password\n  113:       , 'db': dbName\n  114        , 'authMechanism': authMechanism\n  115      };\n  116  \n  117      // Add auth source if passed in\n  118:     if(typeof authdbName == 'string') {\n  119:       config['authdb'] = authdbName;\n  120      }\n  121  \n  ...\n  125  }\n  126  \n  127: AuthStore.prototype.contains = function(dbName) {\n  128    for(var i = 0; i < this._auths.length; i++) {\n  129:     if(this._auths[i].db == dbName) return true;\n  130    }\n  131  \n  ...\n  133  }\n  134  \n  135: AuthStore.prototype.remove = function(dbName) {\n  136    var newAuths = [];\n  137  \n  138    // Filter out all the login details\n  139    for(var i = 0; i < this._auths.length; i++) {\n  140:     if(this._auths[i].db != dbName) newAuths.push(this._auths[i]);\n  141    }\n  142  \n  ...\n  238        // We have the kerberos library, execute auth process\n  239        if(process.platform == 'win32') {\n  240:         mongodb_sspi_authenticate(db, auth.username, auth.password, auth.authdb, options, callback);\n  241        } else {\n  242:         mongodb_gssapi_authenticate(db, auth.username, auth.password, auth.authdb, options, callback);\n  243        }\n  244      } else if(auth.authMechanism == 'MONGODB-CR') {\n  245:       mongodb_cr_authenticate(db, auth.username, auth.password, auth.authdb, options, callback);\n  246      }\n  247    }\n  ...\n  446          dbInstance.openCalled = false;\n  447        // Check if it's our current db instance and skip if it is\n  448:       if(filterDb == null || filterDb.databaseName !== dbInstance.databaseName || filterDb.tag !== dbInstance.tag) {\n  449          \n  450          // Only emit if there is a listener\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/lib/mongodb/connection/mongos.js:\n  260                var _auth = _auth.get(j);\n  261                // Unpack the parameter\n  262:               var username = _auth.username;\n  263                var password = _auth.password;\n  264                var options = { \n  ...\n  271                var _error = null;\n  272                // Authenticate against the credentials\n  273:               self.db.authenticate(username, password, options, function(err, result) {\n  274                  _error = err != null ? err : _error;\n  275                  // Adjust the pending authentication\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/lib/mongodb/connection/repl_set/ha.js:\n   71    newServer.once(\"close\", _handle(this, newServer));\n   72    newServer.once(\"timeout\", _handle(this, newServer));\n   73:   newServer.name = format(\"%s:%s\", server.host, server.port);\n   74  \n   75    // Let's attempt a connection over here\n   ..\n  115      if(self.state == HighAvailabilityProcess.STOPPED) {\n  116        // Stop all server instances\n  117:       for(var name in self.replset._state.addresses) {\n  118:         self.replset._state.addresses[name].close();\n  119        }\n  120  \n  ...\n  160  \n  161              if((master.primary && state.master == null)\n  162:               || (master.primary && state.master.name != master.primary)) {\n  163  \n  164                // Locate the primary and set it\n  ...\n  247  \n  248    // Set shared state\n  249:   newServer.name = host;\n  250    newServer._callBackStore = self.replset._callBackStore;\n  251    newServer.replicasetInstance = self.replset;\n  ...\n  294  \n  295          // Set any tags on the instance server\n  296:         _server.name = doc.me;\n  297          _server.tags = doc.tags;\n  298          // Process the next server\n  ...\n  328          var _auth = _auth.get(j);\n  329          // Unpack the parameter\n  330:         var username = _auth.username;\n  331          var password = _auth.password;\n  332          var options = { \n  ...\n  340          \n  341          // Authenticate against the credentials\n  342:         _db.authenticate(username, password, options, function(err, result) {\n  343            _error = err != null ? err : _error;\n  344            // Adjust the pending authentication\n  ...\n  387        self._state.master == null;\n  388        self._serverState = ReplSet.REPLSET_READ_ONLY;\n  389:       delete self._state.addresses[server.name];\n  390      } else if(self._state.isSecondary(server)) {\n  391:       delete self._state.secondaries[server.name];\n  392:       delete self._state.addresses[server.name];\n  393      }\n  394  \n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/lib/mongodb/connection/repl_set/options.js:\n   10    this.reconnectWait = options.reconnectWait || 1000;\n   11    this.retries = options.retries || 30;\n   12:   this.rs_name = options.rs_name;\n   13    this.socketOptions = options.socketOptions || {};\n   14    this.readPreference = options.readPreference;\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/lib/mongodb/connection/repl_set/repl_set.js:\n   35   *  - **reconnectWait** {Number, default:1000}, time to wait in miliseconds before attempting reconnect.\n   36   *  - **retries** {Number, default:30}, number of times to attempt a replicaset reconnect.\n   37:  *  - **rs_name** {String}, the name of the replicaset to connect to.\n   38   *  - **socketOptions** {Object, default:null}, an object containing socket options to use (noDelay:(boolean), keepAlive:(number), connectTimeoutMS:(number), socketTimeoutMS:(number))\n   39   *  - **readPreference** {String}, the prefered read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n   ..\n  101    for(var i = 0; i < this.servers.length; i++) {\n  102      this.servers[i]._callBackStore = this._callBackStore;\n  103:     this.servers[i].name = format(\"%s:%s\", this.servers[i].host, this.servers[i].port)\n  104      this.servers[i].replicasetInstance = this;\n  105      this.servers[i].options.auto_reconnect = false;\n  ...\n  172    // Pop the first server\n  173    var server = candidateServers.pop();\n  174:   server.name = format(\"%s:%s\", server.host, server.port);\n  175    // Set up the options\n  176    var opts = {\n  ...\n  227  \n  228    // Kill all servers available\n  229:   for(var name in this._state.addresses) {\n  230:     this._state.addresses[name].close();\n  231    }\n  232    \n  ...\n  303        self._state.master = null;\n  304        self._serverState = ReplSet.REPLSET_READ_ONLY;\n  305:       delete self._state.addresses[server.name];\n  306      \n  307        if(current_master != null) {\n  ...\n  314        }\n  315      } else if(self._state.isSecondary(server)) {\n  316:       delete self._state.secondaries[server.name];\n  317:       delete self._state.addresses[server.name];\n  318      }\n  319  \n  ...\n  341    var hosts = ismaster.hosts;\n  342    // In candidate servers\n  343:   var inCandidateServers = function(name, candidateServers) {\n  344      for(var i = 0; i < candidateServers.length; i++) {\n  345:       if(candidateServers[i].name == name) return true;\n  346      }\n  347  \n  ...\n  368    return function(err, doc) {\n  369      // If we have an error add to the list\n  370:     if(err) self._state.errors[instanceServer.name] = instanceServer;\n  371  \n  372      // No error let's analyse the ismaster command\n  373      if(!err) {\n  374        var ismaster = doc.documents[0]\n  375:       // If no replicaset name exists set the current one\n  376:       if(self.options.rs_name == null) {\n  377:         self.options.rs_name = ismaster.setName;\n  378        }\n  379  \n  380        // If we have a member that is not part of the set let's finish up\n  381:       if(typeof ismaster.setName == 'string' && ismaster.setName != self.options.rs_name) {\n  382:         return self.emit(\"connectionError\", new Error(\"Replicaset name \" + ismaster.setName + \" does not match specified name \" + self.options.rs_name));\n  383        }\n  384  \n  ...\n  388        instanceServer.on(\"timeout\", _handler(\"timeout\", self, instanceServer));\n  389        // Set any tags on the instance server\n  390:       instanceServer.name = ismaster.me;\n  391        instanceServer.tags = ismaster.tags;\n  392  \n  ...\n  463    var connections = [];\n  464  \n  465:   for(var name in this._state.addresses) {\n  466:     connections = connections.concat(this._state.addresses[name].allRawConnections());\n  467    }\n  468  \n  ...\n  604          // If no connection return an error\n  605          if(connection == null || connection instanceof Error) {\n  606:           var preferenceName = finalReadPreference == ReadPreference.SECONDARY ? 'secondary' : finalReadPreference;\n  607:           return new Error(\"No replica set member available for query with ReadPreference \" + preferenceName + \" and tags \" + JSON.stringify(tags));\n  608          }\n  609        }\n  ...\n  617          // If no connection return an error\n  618          if(connection == null || connection instanceof Error) {\n  619:           var preferenceName = finalReadPreference == ReadPreference.SECONDARY ? 'secondary' : finalReadPreference;\n  620:           return new Error(\"No replica set member available for query with ReadPreference \" + preferenceName + \" and tags \" + JSON.stringify(tags));\n  621          }\n  622        }\n  ...\n  628    } else if(finalReadPreference == ReadPreference.SECONDARY && Object.keys(this._state.secondaries).length == 0) {\n  629      if(tags != null && typeof tags == 'object') {\n  630:       var preferenceName = finalReadPreference == ReadPreference.SECONDARY ? 'secondary' : finalReadPreference;\n  631:       return new Error(\"No replica set member available for query with ReadPreference \" + preferenceName + \" and tags \" + JSON.stringify(tags));\n  632      } else {\n  633        return new Error(\"No replica set secondary available for query with ReadPreference SECONDARY\");\n  ...\n  729    }\n  730  \n  731:   var preferenceName = self._readPreference == ReadPreference.SECONDARY_PREFERRED\n  732      ? 'secondary'\n  733      : self._readPreference;\n  734  \n  735    return new Error(\"No replica set member available for query with ReadPreference \"\n  736:                   + preferenceName + \" and tags \" + JSON.stringify(tags));\n  737  }\n  738  \n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/lib/mongodb/connection/repl_set/repl_set_state.js:\n   12    this.members = [];\n   13    this.errors = {};\n   14:   this.setName = null;\n   15    this.master = null;\n   16  }\n   ..\n   36      candidate_servers.push(this.master);\n   37  \n   38:   for(var name in this.secondaries) {\n   39:     if(this.secondaries[name].isConnected())\n   40:       candidate_servers.push(this.secondaries[name]);    \n   41    }\n   42    // Return all possible read candidates\n   ..\n   45  \n   46  ReplSetState.prototype.addServer = function(server, master) {\n   47:   server.name = master.me;\n   48  \n   49    if(master.ismaster) {\n   50      this.master = server;\n   51:     this.addresses[server.name] = server;\n   52    } else if(master.secondary) {\n   53:     this.secondaries[server.name] = server;\n   54:     this.addresses[server.name] = server;\n   55    } else if(master.arbiters) {\n   56:     this.arbiters[server.name] = server;\n   57:     this.addresses[server.name] = server;\n   58    }\n   59  }\n   ..\n   64  \n   65  ReplSetState.prototype.isPrimary = function(server) {\n   66:   return this.master && this.master.name == server.name;\n   67  }\n   68  \n   69  ReplSetState.prototype.isSecondary = function(server) {\n   70:   return this.secondaries[server.name] != null;\n   71  }\n   72  \n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/lib/mongodb/connection/server.js:\n  384    connectionPool.on(\"poolReady\", function() {\n  385      // Create db command and Add the callback to the list of callbacks by the request id (mapping outgoing messages to correct callbacks)\n  386:     var db_command = DbCommand.NcreateIsMasterCommand(dbInstance, dbInstance.databaseName);\n  387      // Check out a reader from the pool\n  388      var connection = connectionPool.checkoutConnection();\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/lib/mongodb/connection/url_parser.js:\n    9    var auth_part = '';\n   10    var query_string_part = '';\n   11:   var dbName = 'admin';\n   12  \n   13    // Must start with mongodb\n   14    if(url.indexOf(\"mongodb://\") != 0)\n   15:     throw Error(\"URL must be in the format mongodb://user:pass@host:port/dbname\");\n   16    // If we have a ? mark cut the query elements off\n   17    if(url.indexOf(\"?\") != -1) {\n   ..\n   31    if(connection_part.indexOf(\".sock\") != -1) {\n   32      if(connection_part.indexOf(\".sock/\") != -1) {\n   33:       dbName = connection_part.split(\".sock/\")[1];\n   34        connection_part = connection_part.split(\"/\", connection_part.indexOf(\".sock\") + \".sock\".length);\n   35      } \n   36    } else if(connection_part.indexOf(\"/\") != -1) {\n   37:     dbName = connection_part.split(\"/\")[1];\n   38      connection_part = connection_part.split(\"/\")[0];\n   39    }\n   ..\n   93    }\n   94  \n   95:   // Get the db name\n   96:   object.dbName = dbName || 'admin';\n   97    // Split up all the options\n   98    urlOptions = (query_string_part || '').split(/[&;]/);    \n   ..\n  100    urlOptions.forEach(function(opt) {\n  101      if(!opt) return;\n  102:     var splitOpt = opt.split('='), name = splitOpt[0], value = splitOpt[1];\n  103      // Options implementations\n  104:     switch(name) {\n  105        case 'slaveOk':\n  106        case 'slave_ok':\n  ...\n  136          break;\n  137        case 'replicaSet':\n  138:       case 'rs_name':\n  139:         replSetServersOptions.rs_name = value;\n  140          break;\n  141        case 'reconnectWait':\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/lib/mongodb/cursor.js:\n   36   *  - **comment** {String}, comment you can put a $comment field on a query to make looking in the profiler logs simpler.\n   37   *  - **numberOfRetries** {Number}, numberOfRetries if using awaidata specifies the number of times to retry on timeout.\n   38:  *  - **dbName** {String}, dbName override the default dbName.\n   39   *  - **tailableRetryInterval** {Number}, tailableRetryInterval specify the miliseconds between getMores on tailable cursor.\n   40   *  - **exhaust** {Boolean}, exhaust have the server send all the documents at once as getMore packets.\n   ..\n   84    this.cursorId = Long.fromInt(0);\n   85  \n   86:   // This name\n   87:   this.dbName = options.dbName;\n   88  \n   89    // State variables for the cursor\n   ..\n   94  \n   95    // If we are using a specific db execute against it\n   96:   if(this.dbName != null) {\n   97:     this.collectionName = this.dbName + \".\" + this.collection.collectionName;\n   98    } else {\n   99:     this.collectionName = (this.db.databaseName ? this.db.databaseName + \".\" : '') + this.collection.collectionName;\n  100    }\n  101  };\n  ...\n  565  \n  566      // Return the query\n  567:     return new QueryCommand(self.db, self.collectionName, queryOptions, self.skipValue, numberToReturn, specialSelector, self.fields);\n  568    } else {\n  569:     return new QueryCommand(self.db, self.collectionName, queryOptions, self.skipValue, numberToReturn, self.selector, self.fields);\n  570    }\n  571  };\n  ...\n  708      var getMoreCommand = new GetMoreCommand(\n  709          self.db\n  710:       , self.collectionName\n  711        , limitRequest(self)\n  712        , self.cursorId\n  ...\n  825      , awaitdata: this.awaitdata\n  826      , numberOfRetries: this.numberOfRetries\n  827:     , dbName: this.dbName\n  828    });\n  829    \n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/lib/mongodb/db.js:\n   36   *\n   37   * Options\n   38:  *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write\n   39   *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)\n   40   *  - **fsync**, (Boolean, default:false) write waits for fsync before returning\n   ..\n   56   *\n   57   * @class Represents a Db\n   58:  * @param {String} databaseName name of the database.\n   59   * @param {Object} serverConfig server config object.\n   60   * @param {Object} [options] additional options for the collection.\n   61   */\n   62: function Db(databaseName, serverConfig, options) {\n   63:   if(!(this instanceof Db)) return new Db(databaseName, serverConfig, options);\n   64    EventEmitter.call(this);\n   65  \n   66    var self = this;\n   67:   this.databaseName = databaseName;\n   68    this.serverConfig = serverConfig;\n   69    this.options = options == null ? {} : options;\n   ..\n   85    this.slaveOk = this.options[\"slaveOk\"] == null ? this.slaveOk : this.options[\"slaveOk\"];\n   86  \n   87:   // Ensure we have a valid db name\n   88:   validateDatabaseName(databaseName);\n   89  \n   90    // Contains all the connections for the db\n   ..\n  192   * @ignore\n  193   */\n  194: function validateDatabaseName(databaseName) {\n  195:   if(typeof databaseName !== 'string') throw new Error(\"database name must be a string\");\n  196:   if(databaseName.length === 0) throw new Error(\"database name cannot be the empty string\");\n  197  \n  198    var invalidChars = [\" \", \".\", \"$\", \"/\", \"\\\\\"];\n  199    for(var i = 0; i < invalidChars.length; i++) {\n  200:     if(databaseName.indexOf(invalidChars[i]) != -1) throw new Error(\"database names cannot contain the character '\" + invalidChars[i] + \"'\");\n  201    }\n  202  }\n  ...\n  238      // Ensure we have the original options passed in for the server config\n  239      var connect_options = {};\n  240:     for(var name in self.serverConfig.options) {\n  241:       connect_options[name] = self.serverConfig.options[name]\n  242      }\n  243      connect_options.firstCall = true;\n  ...\n  266   * Create a new Db instance sharing the current socket connections.\n  267   *\n  268:  * @param {String} dbName the name of the database we want to use.\n  269   * @return {Db} a db instance using the new database.\n  270   * @api public\n  271   */\n  272: Db.prototype.db = function(dbName) {\n  273    // Copy the options and add out internal override of the not shared flag\n  274    var options = {};\n  ...\n  280    options['override_used_flag'] = true;\n  281    // Create a new db instance\n  282:   var newDbInstance = new Db(dbName, this.serverConfig, options);\n  283    // Add the instance to the list of approved db instances\n  284    var allServerInstances = this.serverConfig.allServerInstances();\n  ...\n  334   * Returns a cursor to all the collection information.\n  335   *\n  336:  * @param {String} [collectionName] the collection name we wish to retrieve the information from.\n  337   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the options or null if an error occured.\n  338   * @return {null}\n  339   * @api public\n  340   */\n  341: Db.prototype.collectionsInfo = function(collectionName, callback) {\n  342:   if(callback == null && typeof collectionName == 'function') { callback = collectionName; collectionName = null; }\n  343    // Create selector\n  344    var selector = {};\n  345:   // If we are limiting the access to a specific collection name\n  346:   if(collectionName != null) selector.name = this.databaseName + \".\" + collectionName;\n  347  \n  348    // Return Cursor\n  349    // callback for backward compatibility\n  350    if(callback) {\n  351:     callback(null, new Cursor(this, new Collection(this, DbCommand.SYSTEM_NAMESPACE_COLLECTION), selector));\n  352    } else {\n  353:     return new Cursor(this, new Collection(this, DbCommand.SYSTEM_NAMESPACE_COLLECTION), selector);\n  354    }\n  355  };\n  356  \n  357  /**\n  358:  * Get the list of all collection names for the specified db\n  359   *\n  360   * Options\n  361:  *  - **namesOnly** {String, default:false}, Return only the full collection namespace.\n  362   *\n  363:  * @param {String} [collectionName] the collection name we wish to filter by.\n  364   * @param {Object} [options] additional options during update.\n  365:  * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the collection names or null if an error occured.\n  366   * @return {null}\n  367   * @api public\n  368   */\n  369: Db.prototype.collectionNames = function(collectionName, options, callback) {\n  370    var self = this;\n  371    var args = Array.prototype.slice.call(arguments, 0);\n  372    callback = args.pop();\n  373:   collectionName = args.length ? args.shift() : null;\n  374    options = args.length ? args.shift() || {} : {};\n  375  \n  376    // Ensure no breaking behavior\n  377:   if(collectionName != null && typeof collectionName == 'object') {\n  378:     options = collectionName;\n  379:     collectionName = null;\n  380    }\n  381  \n  382    // Let's make our own callback to reuse the existing collections info method\n  383:   self.collectionsInfo(collectionName, function(err, cursor) {\n  384      if(err != null) return callback(err, null);\n  385  \n  ...\n  389        // List of result documents that have been filtered\n  390        var filtered_documents = documents.filter(function(document) {\n  391:         return !(document.name.indexOf(self.databaseName) == -1 || document.name.indexOf('$') != -1);\n  392        });\n  393  \n  394:       // If we are returning only the names\n  395:       if(options.namesOnly) {\n  396:         filtered_documents = filtered_documents.map(function(document) { return document.name });\n  397        }\n  398  \n  ...\n  408   *\n  409   * Options\n  410: *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write\n  411   *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)\n  412   *  - **fsync**, (Boolean, default:false) write waits for fsync before returning\n  ...\n  421   *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.\n  422   *\n  423:  * @param {String} collectionName the collection name we wish to access.\n  424   * @param {Object} [options] returns option results.\n  425   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the collection or null if an error occured.\n  ...\n  427   * @api public\n  428   */\n  429: Db.prototype.collection = function(collectionName, options, callback) {\n  430    var self = this;\n  431    if(typeof options === \"function\") { callback = options; options = {}; }\n  ...\n  433  \n  434    if(options && (options.strict)) {\n  435:     self.collectionNames(collectionName, function(err, collections) {\n  436        if(err != null) return callback(err, null);\n  437  \n  438        if(collections.length == 0) {\n  439:         return callback(new Error(\"Collection \" + collectionName + \" does not exist. Currently in safe mode.\"), null);\n  440        } else {\n  441          try {\n  442:           var collection = new Collection(self, collectionName, self.pkFactory, options);\n  443          } catch(err) {\n  444            return callback(err, null);\n  ...\n  449    } else {\n  450      try {\n  451:       var collection = new Collection(self, collectionName, self.pkFactory, options);\n  452      } catch(err) {\n  453        if(callback == null) {\n  ...\n  472  Db.prototype.collections = function(callback) {\n  473    var self = this;\n  474:   // Let's get the collection names\n  475:   self.collectionNames(function(err, documents) {\n  476      if(err != null) return callback(err, null);\n  477      var collections = [];\n  478      documents.forEach(function(document) {\n  479:       collections.push(new Collection(self, document.name.replace(self.databaseName + \".\", ''), self.pkFactory));\n  480      });\n  481      // Return the collection objects\n  ...\n  555    if(dbRef.db != null) db = this.db(dbRef.db);\n  556    // Fetch the collection and find the reference\n  557:   var collection = db.collection(dbRef.namespace);\n  558    collection.findOne({'_id':dbRef.oid}, function(err, result) {\n  559      callback(err, result);\n  ...\n  589  \n  590        // Remove the db from auths\n  591:       self.serverConfig.auth.remove(self.databaseName);\n  592  \n  593        // Handle any errors\n  ...\n  606   * Options\n  607   *  - **authSource** {String}, The database that the credentials are for,\n  608:  *    different from the name of the current DB, for example admin\n  609   *  - **authMechanism** {String, default:MONGODB-CR}, The authentication mechanism to use, GSSAPI or MONGODB-CR\n  610   *\n  611:  * @param {String} username username.\n  612   * @param {String} password password.\n  613   * @param {Object} [options] the options\n  ...\n  616   * @api public\n  617   */\n  618: Db.prototype.authenticate = function(username, password, options, callback) {\n  619    var self = this;\n  620  \n  ...\n  633    // the default db to authenticate against is 'this'\n  634    // if authententicate is called from a retry context, it may be another one, like admin\n  635:   var authdb = options.authdb ? options.authdb : self.databaseName;\n  636    authdb = options.authSource ? options.authSource : authdb;\n  637  \n  638    // If classic auth delegate to auth command\n  639    if(options.authMechanism == 'MONGODB-CR') {\n  640:     mongodb_cr_authenticate(self, username, password, authdb, options, callback);\n  641    } else if(options.authMechanism == 'GSSAPI') {\n  642      //\n  ...\n  655  \n  656      if(process.platform == 'win32') {\n  657:       mongodb_sspi_authenticate(self, username, password, authdb, options, callback);\n  658      } else {\n  659        // We have the kerberos library, execute auth process\n  660:       mongodb_gssapi_authenticate(self, username, password, authdb, options, callback);      \n  661      }\n  662    }\n  ...\n  667   *\n  668   * Options\n  669:  *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write\n  670   *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)\n  671   *  - **fsync**, (Boolean, default:false) write waits for fsync before returning\n  ...\n  675   *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.\n  676   *\n  677:  * @param {String} username username.\n  678   * @param {String} password password.\n  679   * @param {Object} [options] additional options during update.\n  ...\n  682   * @api public\n  683   */\n  684: Db.prototype.addUser = function(username, password, options, callback) {\n  685    var self = this;\n  686    var args = Array.prototype.slice.call(arguments, 2);\n  ...\n  694    var md5 = crypto.createHash('md5');\n  695    // Generate keys used for authentication\n  696:   md5.update(username + \":mongo:\" + password);\n  697    var userPassword = md5.digest('hex');\n  698    // Fetch a user collection\n  ...\n  703      if(err != null) return callback(err, null);\n  704      // Check if the user exists and update i\n  705:     collection.find({user: username}, {dbName: options['dbName']}).toArray(function(err, documents) {\n  706        // We got an error (f.ex not authorized)\n  707        if(err != null) return callback(err, null);\n  708        // Add command keys\n  709        var commandOptions = errorOptions;\n  710:       commandOptions.dbName = options['dbName'];\n  711        commandOptions.upsert = true;\n  712  \n  713        // We have a user, let's update the password or upsert if not\n  714:       collection.update({user: username},{$set: {user: username, pwd: userPassword}}, commandOptions, function(err, results) {\n  715          if(count == 0 && err) {\n  716:           callback(null, [{user:username, pwd:userPassword}]);\n  717          } else if(err) {\n  718            callback(err, null)\n  719          } else {\n  720:           callback(null, [{user:username, pwd:userPassword}]);\n  721          }\n  722        });\n  ...\n  729   *\n  730   * Options\n  731: *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write\n  732   *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)\n  733   *  - **fsync**, (Boolean, default:false) write waits for fsync before returning\n  ...\n  737   *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.\n  738   *\n  739:  * @param {String} username username.\n  740   * @param {Object} [options] additional options during update.\n  741   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from removeUser or null if an error occured.\n  ...\n  743   * @api public\n  744   */\n  745: Db.prototype.removeUser = function(username, options, callback) {\n  746    var self = this;\n  747    var args = Array.prototype.slice.call(arguments, 1);\n  ...\n  758    // Fetch a user collection\n  759    var collection = this.collection(DbCommand.SYSTEM_USER_COLLECTION);\n  760:   collection.findOne({user: username}, {dbName: options['dbName']}, function(err, user) {\n  761      if(user != null) {\n  762        // Add command keys\n  763        var commandOptions = safe;\n  764:       commandOptions.dbName = options['dbName'];\n  765  \n  766:       collection.remove({user: username}, commandOptions, function(err, result) {\n  767          callback(err, true);\n  768        });\n  ...\n  777   *\n  778   * Options\n  779: *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write\n  780   *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)\n  781   *  - **fsync**, (Boolean, default:false) write waits for fsync before returning\n  ...\n  794   *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.\n  795   *\n  796:  * @param {String} collectionName the collection name we wish to access.\n  797   * @param {Object} [options] returns option results.\n  798   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from createCollection or null if an error occured.\n  ...\n  800   * @api public\n  801   */\n  802: Db.prototype.createCollection = function(collectionName, options, callback) {\n  803    var args = Array.prototype.slice.call(arguments, 1);\n  804    callback = args.pop();\n  ...\n  813    safe = safe == null ? {w: 1} : safe;\n  814  \n  815:   // Check if we have the name\n  816:   this.collectionNames(collectionName, function(err, collections) {\n  817      if(err != null) return callback(err, null);\n  818  \n  819      var found = false;\n  820      collections.forEach(function(collection) {\n  821:       if(collection.name == self.databaseName + \".\" + collectionName) found = true;\n  822      });\n  823  \n  824      // If the collection exists either throw an exception (if db in safe mode) or return the existing collection\n  825      if(found && options && options.strict) {\n  826:       return callback(new Error(\"Collection \" + collectionName + \" already exists. Currently in safe mode.\"), null);\n  827      } else if(found){\n  828        try {\n  829:         var collection = new Collection(self, collectionName, self.pkFactory, options);\n  830        } catch(err) {\n  831          return callback(err, null);\n  ...\n  835  \n  836      // Create a new collection and return it\n  837:     self._executeQueryCommand(DbCommand.createCreateCollectionCommand(self, collectionName, options), {read:false, safe:safe}, function(err, result) {\n  838        var document = result.documents[0];\n  839        // If we have no error let's return the collection\n  840        if(err == null && document.ok == 1) {\n  841          try {\n  842:           var collection = new Collection(self, collectionName, self.pkFactory, options);\n  843          } catch(err) {\n  844            return callback(err, null);\n  ...\n  869    var cursor = new Cursor(this\n  870      , new Collection(this, DbCommand.SYSTEM_COMMAND_COLLECTION), selector, {}, {\n  871:       limit: -1, timeout: QueryCommand.OPTS_NO_CURSOR_TIMEOUT, dbName: options['dbName']\n  872      });\n  873  \n  ...\n  894   * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n  895   *\n  896:  * @param {String} collectionName the name of the collection we wish to drop.\n  897   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from dropCollection or null if an error occured.\n  898   * @return {null}\n  899   * @api public\n  900   */\n  901: Db.prototype.dropCollection = function(collectionName, callback) {\n  902    var self = this;\n  903    callback || (callback = function(){});\n  904  \n  905    // Drop the collection\n  906:   this._executeQueryCommand(DbCommand.createDropCollectionCommand(this, collectionName), function(err, result) {\n  907      if(err == null && result.documents[0].ok == 1) {\n  908        return callback(null, true);\n  ...\n  915  \n  916  /**\n  917:  * Rename a collection.\n  918   * \n  919   * Options\n  920:  *  - **dropTarget** {Boolean, default:false}, drop the target name collection if it previously exists.\n  921   *\n  922:  * @param {String} fromCollection the name of the current collection we wish to rename.\n  923:  * @param {String} toCollection the new name of the collection.\n  924   * @param {Object} [options] returns option results.\n  925:  * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from renameCollection or null if an error occured.\n  926   * @return {null}\n  927   * @api public\n  928   */\n  929: Db.prototype.renameCollection = function(fromCollection, toCollection, options, callback) {\n  930    var self = this;\n  931  \n  ...\n  936  \n  937    callback || (callback = function(){});\n  938:   // Execute the command, return the new renamed collection if successful\n  939:   this._executeQueryCommand(DbCommand.createRenameCollectionCommand(this, fromCollection, toCollection, options), function(err, result) {\n  940      if(err == null && result.documents[0].ok == 1) {\n  941        return callback(null, new Collection(self, toCollection, self.pkFactory));\n  ...\n 1054   *\n 1055   * Options\n 1056: *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write\n 1057   *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)\n 1058   *  - **fsync**, (Boolean, default:false) write waits for fsync before returning\n ....\n 1066   *  - **v** {Number}, specify the format version of the indexes.\n 1067   *  - **expireAfterSeconds** {Number}, allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)\n 1068:  *  - **name** {String}, override the autogenerated index name (useful if the resulting name is larger than 128 bytes)\n 1069   * \n 1070   * Deprecated Options \n ....\n 1072   *\n 1073   *\n 1074:  * @param {String} collectionName name of the collection to create the index on.\n 1075   * @param {Object} fieldOrSpec fieldOrSpec that defines the index.\n 1076   * @param {Object} [options] additional options during update.\n ....\n 1079   * @api public\n 1080   */\n 1081: Db.prototype.createIndex = function(collectionName, fieldOrSpec, options, callback) {\n 1082    var self = this;\n 1083    var args = Array.prototype.slice.call(arguments, 2);\n ....\n 1090    var errorOptions = _getWriteConcern(this, options, callback);\n 1091    // Create command\n 1092:   var command = DbCommand.createCreateIndexCommand(this, collectionName, fieldOrSpec, options);\n 1093    // Default command options\n 1094    var commandOptions = {};\n ....\n 1119          callback(utils.toError(result[0]));\n 1120        } else {\n 1121:         callback(null, command.documents[0].name);\n 1122        }\n 1123      });\n ....\n 1142   *\n 1143   * Options\n 1144:  *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write\n 1145   *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)\n 1146   *  - **fsync**, (Boolean, default:false) write waits for fsync before returning\n ....\n 1154   *  - **v** {Number}, specify the format version of the indexes.\n 1155   *  - **expireAfterSeconds** {Number}, allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)\n 1156:  *  - **name** {String}, override the autogenerated index name (useful if the resulting name is larger than 128 bytes)\n 1157   * \n 1158   * Deprecated Options \n 1159   *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.\n 1160   *\n 1161:  * @param {String} collectionName name of the collection to create the index on.\n 1162   * @param {Object} fieldOrSpec fieldOrSpec that defines the index.\n 1163   * @param {Object} [options] additional options during update.\n ....\n 1166   * @api public\n 1167   */\n 1168: Db.prototype.ensureIndex = function(collectionName, fieldOrSpec, options, callback) {\n 1169    var self = this;\n 1170  \n ....\n 1184      throw new Error(\"Cannot use a writeConcern without a provided callback\");\n 1185    // Create command\n 1186:   var command = DbCommand.createCreateIndexCommand(this, collectionName, fieldOrSpec, options);\n 1187:   var index_name = command.documents[0].name;\n 1188  \n 1189    // Default command options\n 1190    var commandOptions = {};\n 1191    // Check if the index allready exists\n 1192:   this.indexInformation(collectionName, function(err, collectionInfo) {\n 1193      if(err != null) return callback(err, null);\n 1194  \n 1195:     if(!collectionInfo[index_name])  {\n 1196        // If we have error conditions set handle them\n 1197        if(_hasWriteConcern(errorOptions) && typeof callback == 'function') {\n ....\n 1223                callback(utils.toError(result[0]));\n 1224              } else {\n 1225:               callback(null, command.documents[0].name);\n 1226              }\n 1227            }\n ....\n 1237          }\n 1238          // Otherwise just return\n 1239:         return callback(null, index_name);\n 1240        }\n 1241      } else {\n 1242:       if(typeof callback === 'function') return callback(null, index_name);\n 1243      }\n 1244    });\n ....\n 1269   * Drop an index on a collection.\n 1270   *\n 1271:  * @param {String} collectionName the name of the collection where the command will drop an index.\n 1272:  * @param {String} indexName name of the index to drop.\n 1273   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from dropIndex or null if an error occured.\n 1274   * @return {null}\n 1275   * @api public\n 1276   */\n 1277: Db.prototype.dropIndex = function(collectionName, indexName, callback) {  \n 1278:   this._executeQueryCommand(DbCommand.createDropIndexCommand(this, collectionName, indexName), callback);\n 1279  };\n 1280  \n ....\n 1283   * Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n 1284   *\n 1285:  * @param {String} collectionName the name of the collection.\n 1286   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from reIndex or null if an error occured.\n 1287   * @api public\n 1288  **/\n 1289: Db.prototype.reIndex = function(collectionName, callback) {\n 1290:   this._executeQueryCommand(DbCommand.createReIndexCommand(this, collectionName), function(err, result) {\n 1291      if(err != null) {\n 1292        callback(err, false);\n ....\n 1306   *  - **readPreference** {String}, the preferred read preference ((Server.PRIMARY, Server.PRIMARY_PREFERRED, Server.SECONDARY, Server.SECONDARY_PREFERRED, Server.NEAREST).\n 1307   *\n 1308:  * @param {String} collectionName the name of the collection.\n 1309   * @param {Object} [options] additional options during update.\n 1310   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from indexInformation or null if an error occured.\n ....\n 1312   * @api public\n 1313   */\n 1314: Db.prototype.indexInformation = function(collectionName, options, callback) {\n 1315    if(typeof callback === 'undefined') {\n 1316      if(typeof options === 'undefined') {\n 1317:       callback = collectionName;\n 1318:       collectionName = null;\n 1319      } else {\n 1320        callback = options;\n ....\n 1326    var full = options['full'] == null ? false : options['full'];\n 1327    // Build selector for the indexes\n 1328:   var selector = collectionName != null ? {ns: (this.databaseName + \".\" + collectionName)} : {};\n 1329  \n 1330    // Set read preference if we set one\n ....\n 1346          var index = indexes[i];\n 1347          // Let's unpack the object\n 1348:         info[index.name] = [];\n 1349:         for(var name in index.key) {\n 1350:           info[index.name].push([name, index.key[name]]);\n 1351          }\n 1352        }\n ....\n 1401    // Build command object\n 1402    var commandObject = {\n 1403:     dbStats:this.collectionName,\n 1404    }\n 1405  \n ....\n 1787   *\n 1788   * Options\n 1789:  *  - **uri_decode_auth** {Boolean, default:false} uri decode the user name and password for authentication\n 1790   *  - **db** {Object, default: null} a hash off options to set on the db object, see **Db constructor**\n 1791   *  - **server** {Object, default: null} a hash off options to set on the server objects, see **Server** constructor**\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/lib/mongodb/gridfs/chunk.js:\n  194  /**\n  195   * The position of the read/write head\n  196:  * @name position\n  197   * @lends Chunk#\n  198   * @field\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/lib/mongodb/gridfs/grid.js:\n    7   * @class Represents the Grid.\n    8   * @param {Db} db A database instance to interact with.\n    9:  * @param {String} [fsName] optional different root collection for GridFS.\n   10   * @return {Grid}\n   11   */\n   12: function Grid(db, fsName) {\n   13  \n   14:   if(!(this instanceof Grid)) return new Grid(db, fsName);\n   15  \n   16    this.db = db;\n   17:   this.fsName = fsName == null ? GridStore.DEFAULT_ROOT_COLLECTION : fsName;\n   18  }\n   19  \n   ..\n   40    options = args.length ? args.shift() : {};\n   41    // If root is not defined add our default one\n   42:   options['root'] = options['root'] == null ? this.fsName : options['root'];\n   43  \n   44    // Return if we don't have a buffer object as data\n   45    if(!(Buffer.isBuffer(data))) return callback(new Error(\"Data object must be a buffer object\"), null);\n   46:   // Get filename if we are using it\n   47:   var filename = options['filename'] || null;\n   48    // Get id if we are using it\n   49    var id = options['_id'] || null;\n   50    // Create gridstore\n   51:   var gridStore = new GridStore(this.db, id, filename, \"w\", options);\n   52    gridStore.open(function(err, gridStore) {\n   53      if(err) return callback(err, null);\n   ..\n   74  Grid.prototype.get = function(id, callback) {\n   75    // Create gridstore\n   76:   var gridStore = new GridStore(this.db, id, null, \"r\", {root:this.fsName});\n   77    gridStore.open(function(err, gridStore) {\n   78      if(err) return callback(err, null);\n   ..\n   95  Grid.prototype.delete = function(id, callback) {\n   96    // Create gridstore\n   97:   GridStore.unlink(this.db, id, {root:this.fsName}, function(err, result) {\n   98      if(err) return callback(err, false);\n   99      return callback(null, true);\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/lib/mongodb/gridfs/gridstore.js:\n   22  processor = process.nextTick\n   23  \n   24: var REFERENCE_BY_FILENAME = 0,\n   25    REFERENCE_BY_ID = 1;\n   26  \n   ..\n   42   * @param {Db} db A database instance to interact with.\n   43   * @param {Any} [id] optional unique id for this file\n   44:  * @param {String} [filename] optional filename for this file, no unique constrain on the field\n   45   * @param {String} mode set the mode for this file.\n   46   * @param {Object} options optional properties to specify.\n   47   * @return {GridStore}\n   48   */\n   49: var GridStore = function GridStore(db, id, filename, mode, options) {\n   50:   if(!(this instanceof GridStore)) return new GridStore(db, id, filename, mode, options);\n   51  \n   52    var self = this;\n   ..\n   65    // Handle mode\n   66    if(typeof mode === 'undefined') {\n   67:     mode = filename;\n   68:     filename = undefined;\n   69    } else if(typeof mode == 'object') {\n   70      options = mode;\n   71:     mode = filename;\n   72:     filename = undefined;\n   73    }\n   74  \n   ..\n   76      this.referenceBy = REFERENCE_BY_ID;\n   77      this.fileId = id;\n   78:     this.filename = filename;\n   79:   } else if(typeof filename == 'undefined') {\n   80:     this.referenceBy = REFERENCE_BY_FILENAME;\n   81:     this.filename = id;\n   82      if (mode.indexOf('w') != null) {\n   83        this.fileId = new ObjectID();\n   ..\n   86      this.referenceBy = REFERENCE_BY_ID;\n   87      this.fileId = id;\n   88:     this.filename = filename;\n   89    }\n   90  \n   ..\n  135        if(err) return callback(err);\n  136  \n  137:       // Put index on filename\n  138:       collection.ensureIndex([['filename', 1]], function(err, index) {\n  139          if(err) return callback(err);\n  140  \n  ...\n  170  \n  171      // Create the query\n  172:     var query = self.referenceBy == REFERENCE_BY_ID ? {_id:self.fileId} : {filename:self.filename};\n  173:     query = null == self.fileId && this.filename == null ? null : query;\n  174  \n  175      // Fetch the chunks\n  ...\n  185            if(doc != null) {\n  186              self.fileId = doc._id;\n  187:             self.filename = doc.filename;\n  188              self.contentType = doc.contentType;\n  189              self.internalChunkSize = doc.chunkSize;\n  ...\n  201              self.length = 0;\n  202              var txtId = self.fileId instanceof ObjectID ? self.fileId.toHexString() : self.fileId;\n  203:             return error(new Error((self.referenceBy == REFERENCE_BY_ID ? txtId : self.filename) + \" does not exist\", self));\n  204            }\n  205  \n  ...\n  367  \n  368    if(self.mode[0] != \"w\") {\n  369:     callback(new Error((self.referenceBy == REFERENCE_BY_ID ? self.toHexString() : self.filename) + \" not opened for writing\"), null);\n  370    } else {\n  371      if(self.currentChunk.position + buffer.length >= self.chunkSize) {\n  ...\n  434   *        {\n  435   *          '_id' : , // {number} id for this file\n  436:  *          'filename' : , // {string} name for this file\n  437   *          'contentType' : , // {string} mime type for this file\n  438   *          'length' : , // {number} size of this file?\n  ...\n  463    var mongoObject = {\n  464      '_id': self.fileId,\n  465:     'filename': self.filename,\n  466      'contentType': self.contentType,\n  467      'length': self.position ? self.position : 0,\n  ...\n  968   *\n  969   * @param {Db} db the database to query.\n  970:  * @param {String} name the name of the file to look for.\n  971   * @param {String} [rootCollection] the root collection that holds the files and chunks collection. Defaults to **{GridStore.DEFAULT_ROOT_COLLECTION}**.\n  972   * @param {Function} callback this will be called after this method executes. Passes null to the first and passes true to the second if the file exists and false otherwise.\n  ...\n  986      // Build query\n  987      var query = (typeof fileIdObject == 'string' || Object.prototype.toString.call(fileIdObject) == '[object RegExp]' )\n  988:       ? {'filename':fileIdObject}\n  989        : {'_id':fileIdObject};    // Attempt to locate file\n  990  \n  ...\n 1005   * @param {Db} db the database to query.\n 1006   * @param {String} [rootCollection] the root collection that holds the files and chunks collection. Defaults to **{GridStore.DEFAULT_ROOT_COLLECTION}**.\n 1007:  * @param {Function} callback this will be called after this method executes. Passes null to the first and passes an array of strings containing the names of the files.\n 1008   * @return {null}\n 1009   * @api public\n ....\n 1021    }\n 1022  \n 1023:   // Check if we are returning by id not filename\n 1024    var byId = options['id'] != null ? options['id'] : false;\n 1025    // Fetch item\n ....\n 1034        cursor.each(function(err, item) {\n 1035          if(item != null) {\n 1036:           items.push(byId ? item._id : item.filename);\n 1037          } else {\n 1038            callback(err, items);\n ....\n 1048   * This method has the following signatures\n 1049   *\n 1050:  * (db, name, callback)\n 1051:  * (db, name, length, callback)\n 1052:  * (db, name, length, offset, callback)\n 1053:  * (db, name, length, offset, options, callback)\n 1054   *\n 1055   * @param {Db} db the database to query.\n 1056:  * @param {String} name the name of the file.\n 1057   * @param {Number} [length] the size of data to read.\n 1058   * @param {Number} [offset] the offset from the head of the file of which to start reading from.\n ....\n 1062   * @api public\n 1063   */\n 1064: GridStore.read = function(db, name, length, offset, options, callback) {\n 1065    var args = Array.prototype.slice.call(arguments, 2);\n 1066    callback = args.pop();\n ....\n 1069    options = args.length ? args.shift() : null;\n 1070  \n 1071:   new GridStore(db, name, \"r\", options).open(function(err, gridStore) {\n 1072      if(err) return callback(err);\n 1073      // Make sure we are not reading out of bounds\n ....\n 1091   *\n 1092   * @param {Db} db the database to query.\n 1093:  * @param {String} name the name of the file.\n 1094   * @param {String} [separator] the character to be recognized as the newline separator.\n 1095   * @param {Object} [options] file options.\n ....\n 1098   * @api public\n 1099   */\n 1100: GridStore.readlines = function(db, name, separator, options, callback) {\n 1101    var args = Array.prototype.slice.call(arguments, 2);\n 1102    callback = args.pop();\n ....\n 1105  \n 1106    var finalSeperator = separator == null ? \"\\n\" : separator;\n 1107:   new GridStore(db, name, \"r\", options).open(function(err, gridStore) {\n 1108      if(err) return callback(err);\n 1109      gridStore.readlines(finalSeperator, callback);\n ....\n 1115   *\n 1116   * @param {Db} db the database to interact with.\n 1117:  * @param {String|Array} names the name/names of the files to delete.\n 1118   * @param {Object} [options] the options for the files.\n 1119   * @callback {Function} this will be called after this method is executed. The first parameter will contain an Error object if an error occured or null otherwise. The second parameter will contain a reference to this object.\n ....\n 1121   * @api public\n 1122   */\n 1123: GridStore.unlink = function(db, names, options, callback) {\n 1124    var self = this;\n 1125    var args = Array.prototype.slice.call(arguments, 2);\n ....\n 1127    options = args.length ? args.shift() : null;\n 1128  \n 1129:   if(names.constructor == Array) {\n 1130      var tc = 0;\n 1131:     for(var i = 0; i < names.length; i++) {\n 1132        ++tc;\n 1133:       self.unlink(db, names[i], function(result) {\n 1134          if(--tc == 0) {\n 1135              callback(null, self);\n ....\n 1138      }\n 1139    } else {\n 1140:     new GridStore(db, names, \"w\", options).open(function(err, gridStore) {\n 1141        if(err) return callback(err);\n 1142        deleteChunks(gridStore, function(err, result) {\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/lib/mongodb/index.js:\n   49  var obj = connect;\n   50  // Map all values to the exports value\n   51: for(var name in exports) {\n   52:   obj[name] = exports[name];\n   53  }\n   54  \n   ..\n   59  \n   60  // Map all values to the exports value\n   61: for(var name in exports) {\n   62:   connect[name] = exports[name];\n   63  }\n   64  \n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/lib/mongodb/mongo_client.js:\n   10   *\n   11   * Options\n   12:  *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write\n   13   *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)\n   14   *  - **fsync**, (Boolean, default:false) write waits for fsync before returning\n   ..\n   73   * Create a new Db instance sharing the current socket connections.\n   74   *\n   75:  * @param {String} dbName the name of the database we want to use.\n   76   * @return {Db} a db instance using the new database.\n   77   * @api public\n   78   */\n   79: MongoClient.prototype.db = function(dbName) {\n   80:   return this._db.db(dbName);\n   81  }\n   82  \n   ..\n   87   *\n   88   * Options\n   89:  *  - **uri_decode_auth** {Boolean, default:false} uri decode the user name and password for authentication\n   90   *  - **db** {Object, default: null} a hash off options to set on the db object, see **Db constructor**\n   91   *  - **server** {Object, default: null} a hash off options to set on the server objects, see **Server** constructor**\n   ..\n  138    // Merge in any options for db in options object\n  139    if(dbOptions) {\n  140:     for(var name in dbOptions) object.db_options[name] = dbOptions[name];\n  141    }\n  142  \n  ...\n  146    // Merge in any options for server in options object\n  147    if(serverOptions) {\n  148:     for(var name in serverOptions) object.server_options[name] = serverOptions[name];\n  149    }\n  150  \n  151    // Merge in any replicaset server options\n  152    if(replSetServersOptions) {\n  153:     for(var name in replSetServersOptions) object.rs_options[name] = replSetServersOptions[name];    \n  154    }\n  155  \n  156    // Merge in any replicaset server options\n  157    if(mongosOptions) {\n  158:     for(var name in mongosOptions) object.mongos_options[name] = mongosOptions[name];    \n  159    }\n  160  \n  ...\n  208      var connectFunction = function(__server) { \n  209        // Attempt connect\n  210:       new Db(object.dbName, __server, {safe:false, native_parser:false}).open(function(err, db) {\n  211          // Update number of servers\n  212          totalNumberOfServers = totalNumberOfServers - 1;          \n  ...\n  217            var isMasterDoc = db.serverConfig.isMasterDoc;\n  218            // Check what type of server we have\n  219:           if(isMasterDoc.setName) totalNumberOfMongodServers++;\n  220            if(isMasterDoc.msg && isMasterDoc.msg == \"isdbgrid\") totalNumberOfMongosServers++;\n  221          } else {\n  ...\n  300  \n  301    // Set up the db options\n  302:   var db = new Db(object.dbName, serverConfig, object.db_options);\n  303    // Open the db\n  304    db.open(function(err, db){\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/lib/mongodb/utils.js:\n  107    var msg = error.err || error.errmsg || error;\n  108    var e = new Error(msg);\n  109:   e.name = 'MongoError';\n  110  \n  111    // Get all object keys\n  ...\n  129    var list = [];\n  130  \n  131:   for(var name in object) {\n  132:     list.push(object[name])\n  133    }\n  134  \n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/Makefile:\n    3  NODEUNIT = node_modules/nodeunit/bin/nodeunit\n    4  DOX = node_modules/dox/bin/dox\n    5: name = all\n    6  \n    7  total: build_native\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/bson/binding.gyp:\n    2    'targets': [\n    3      {\n    4:       'target_name': 'bson',\n    5        'sources': [ 'ext/bson.cc' ],\n    6        'cflags!': [ '-fno-exceptions' ],\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/bson/browser_build/bson.js:\n   48  };\n   49  \n   50: function dirname(path) {\n   51    return path && path.substr(0, path.lastIndexOf(\"/\")) || \".\";\n   52  };\n   53  \n   54  function findModule(workingModule, uri){\n   55:   var moduleId      = join(dirname(workingModule.id), uri).replace(/\\.js$/, ''),\n   56        moduleIndexId = join(moduleId, 'index'),\n   57        pkg           = workingModule.pkg,\n   ..\n   94  \n   95        if(!pkg){\n   96:         throw new Error('Cannot find module \"'+uri+'\" @[module: '+callingModule.id+' package: '+callingModule.pkg.name+']');\n   97        }\n   98  \n   ..\n  101  \n  102      if(!module){\n  103:       throw new Error('Cannot find module \"'+uri+'\" @[module: '+callingModule.id+' package: '+callingModule.pkg.name+']');\n  104      }\n  105  \n  ...\n  147  \n  148  \n  149:   pkgmap[ctx.name] = ctx;\n  150  \n  151    arguments.length == 1 && ( pkgmap.main = ctx );\n  ...\n  165  \n  166    return {\n  167:     'name'         : 'bson',\n  168      'mainModuleId' : 'bson',\n  169      'modules'      : [],\n  ...\n 1134   * @api private\n 1135   */\n 1136: function calculateElement(name, value, serializeFunctions) {\n 1137    var isBuffer = typeof Buffer !== 'undefined';\n 1138    \n 1139    switch(typeof value) {\n 1140      case 'string':       \n 1141:       return 1 + (!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1 + 4 + (!isBuffer ? numberOfBytes(value) : Buffer.byteLength(value, 'utf8')) + 1;\n 1142      case 'number':\n 1143        if(Math.floor(value) === value && value >= BSON.JS_INT_MIN && value <= BSON.JS_INT_MAX) {\n 1144          if(value >= BSON.BSON_INT32_MIN && value <= BSON.BSON_INT32_MAX) { // 32 bit\n 1145:           return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (4 + 1);\n 1146          } else {\n 1147:           return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (8 + 1);\n 1148          }\n 1149        } else {  // 64 bit\n 1150:         return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (8 + 1);\n 1151        }\n 1152      case 'undefined':\n 1153:       return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (1);\n 1154      case 'boolean':\n 1155:       return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (1 + 1);\n 1156      case 'object':   \n 1157        if(value == null || value instanceof MinKey || value instanceof MaxKey || value['_bsontype'] == 'MinKey' || value['_bsontype'] == 'MaxKey') {\n 1158:         return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (1);\n 1159        } else if(value instanceof ObjectID || value['_bsontype'] == 'ObjectID') {\n 1160:         return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (12 + 1);\n 1161        } else if(value instanceof Date || isDate(value)) {\n 1162:         return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (8 + 1);\n 1163        } else if(typeof Buffer !== 'undefined' && Buffer.isBuffer(value)) {\n 1164:         return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (1 + 4 + 1) + value.length;\n 1165        } else if(value instanceof Long || value instanceof Double || value instanceof Timestamp \n 1166            || value['_bsontype'] == 'Long' || value['_bsontype'] == 'Double' || value['_bsontype'] == 'Timestamp') {\n 1167:         return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (8 + 1);        \n 1168        } else if(value instanceof Code || value['_bsontype'] == 'Code') {\n 1169          // Calculate size depending on the availability of a scope\n 1170          if(value.scope != null && Object.keys(value.scope).length > 0) {\n 1171:           return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + 4 + 4 + (!isBuffer ? numberOfBytes(value.code.toString()) : Buffer.byteLength(value.code.toString(), 'utf8')) + 1 + BSON.calculateObjectSize(value.scope, serializeFunctions);\n 1172          } else {\n 1173:           return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + 4 + (!isBuffer ? numberOfBytes(value.code.toString()) : Buffer.byteLength(value.code.toString(), 'utf8')) + 1;\n 1174          }                      \n 1175        } else if(value instanceof Binary || value['_bsontype'] == 'Binary') {\n 1176          // Check what kind of subtype we have\n 1177          if(value.sub_type == Binary.SUBTYPE_BYTE_ARRAY) {\n 1178:           return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (value.position + 1 + 4 + 1 + 4);\n 1179          } else {\n 1180:           return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (value.position + 1 + 4 + 1);          \n 1181          }\n 1182        } else if(value instanceof Symbol || value['_bsontype'] == 'Symbol') {\n 1183:         return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + ((!isBuffer ? numberOfBytes(value.value) : Buffer.byteLength(value.value, 'utf8')) + 4 + 1 + 1);\n 1184        } else if(value instanceof DBRef || value['_bsontype'] == 'DBRef') {\n 1185          // Set up correct object for serialization\n 1186          var ordered_values = {\n 1187:             '$ref': value.namespace\n 1188            , '$id' : value.oid\n 1189          };\n ....\n 1194          }\n 1195          \n 1196:         return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + BSON.calculateObjectSize(ordered_values, serializeFunctions);\n 1197        } else if(value instanceof RegExp || Object.prototype.toString.call(value) === '[object RegExp]') {\n 1198:           return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + (!isBuffer ? numberOfBytes(value.source) : Buffer.byteLength(value.source, 'utf8')) + 1\n 1199              + (value.global ? 1 : 0) + (value.ignoreCase ? 1 : 0) + (value.multiline ? 1 : 0) + 1        \n 1200        } else {	\n 1201:         return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + BSON.calculateObjectSize(value, serializeFunctions) + 1;        					\n 1202        }\n 1203      case 'function':\n 1204        // WTF for 0.4.X where typeof /someregexp/ === 'function'\n 1205        if(value instanceof RegExp || Object.prototype.toString.call(value) === '[object RegExp]' || String.call(value) == '[object RegExp]') {\n 1206:         return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + (!isBuffer ? numberOfBytes(value.source) : Buffer.byteLength(value.source, 'utf8')) + 1\n 1207            + (value.global ? 1 : 0) + (value.ignoreCase ? 1 : 0) + (value.multiline ? 1 : 0) + 1\n 1208        } else {\n 1209          if(serializeFunctions && value.scope != null && Object.keys(value.scope).length > 0) {\n 1210:           return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + 4 + 4 + (!isBuffer ? numberOfBytes(value.toString()) : Buffer.byteLength(value.toString(), 'utf8')) + 1 + BSON.calculateObjectSize(value.scope, serializeFunctions);\n 1211          } else if(serializeFunctions) {\n 1212:           return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + 4 + (!isBuffer ? numberOfBytes(value.toString()) : Buffer.byteLength(value.toString(), 'utf8')) + 1;\n 1213          }      \n 1214        }\n ....\n 1333   * @api private\n 1334   */\n 1335: var packElement = function(name, value, checkKeys, buffer, index, serializeFunctions) {\n 1336    var startIndex = index;\n 1337      \n ....\n 1341        buffer[index++] = BSON.BSON_DATA_STRING;\n 1342        // Number of written bytes\n 1343:       var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n 1344:       // Encode the name\n 1345        index = index + numberOfWrittenBytes + 1;\n 1346        buffer[index - 1] = 0;          \n ....\n 1372            buffer[index++] = BSON.BSON_DATA_INT;          \n 1373            // Number of written bytes\n 1374:           var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n 1375:           // Encode the name\n 1376            index = index + numberOfWrittenBytes + 1;\n 1377            buffer[index - 1] = 0;          \n ....\n 1385            buffer[index++] = BSON.BSON_DATA_NUMBER;\n 1386            // Number of written bytes\n 1387:           var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n 1388:           // Encode the name\n 1389            index = index + numberOfWrittenBytes + 1;\n 1390            buffer[index - 1] = 0;          \n ....\n 1397            buffer[index++] = BSON.BSON_DATA_LONG;          \n 1398            // Number of written bytes\n 1399:           var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n 1400:           // Encode the name\n 1401            index = index + numberOfWrittenBytes + 1;\n 1402            buffer[index - 1] = 0;          \n ....\n 1419          buffer[index++] = BSON.BSON_DATA_NUMBER;\n 1420          // Number of written bytes\n 1421:         var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n 1422:         // Encode the name\n 1423          index = index + numberOfWrittenBytes + 1;\n 1424          buffer[index - 1] = 0;          \n ....\n 1434        buffer[index++] = BSON.BSON_DATA_NULL;\n 1435        // Number of written bytes\n 1436:       var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n 1437:       // Encode the name\n 1438        index = index + numberOfWrittenBytes + 1;\n 1439        buffer[index - 1] = 0;\n ....\n 1443        buffer[index++] = BSON.BSON_DATA_BOOLEAN;\n 1444        // Number of written bytes\n 1445:       var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n 1446:       // Encode the name\n 1447        index = index + numberOfWrittenBytes + 1;\n 1448        buffer[index - 1] = 0;\n ....\n 1463        \n 1464          // Number of written bytes\n 1465:         var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n 1466:         // Encode the name\n 1467          index = index + numberOfWrittenBytes + 1;\n 1468          buffer[index - 1] = 0;\n ....\n 1472          buffer[index++] = BSON.BSON_DATA_OID;\n 1473          // Number of written bytes\n 1474:         var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n 1475:         // Encode the name\n 1476          index = index + numberOfWrittenBytes + 1;\n 1477          buffer[index - 1] = 0;\n ....\n 1486          buffer[index++] = BSON.BSON_DATA_DATE;\n 1487          // Number of written bytes\n 1488:         var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n 1489:         // Encode the name\n 1490          index = index + numberOfWrittenBytes + 1;\n 1491          buffer[index - 1] = 0;\n ....\n 1510          buffer[index++] = BSON.BSON_DATA_BINARY;\n 1511          // Number of written bytes\n 1512:         var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n 1513:         // Encode the name\n 1514          index = index + numberOfWrittenBytes + 1;\n 1515          buffer[index - 1] = 0;\n ....\n 1532          buffer[index++] = value instanceof Long ? BSON.BSON_DATA_LONG : BSON.BSON_DATA_TIMESTAMP;\n 1533          // Number of written bytes\n 1534:         var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n 1535:         // Encode the name\n 1536          index = index + numberOfWrittenBytes + 1;\n 1537          buffer[index - 1] = 0;\n ....\n 1554          buffer[index++] = BSON.BSON_DATA_NUMBER;\n 1555          // Number of written bytes\n 1556:         var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n 1557:         // Encode the name\n 1558          index = index + numberOfWrittenBytes + 1;\n 1559          buffer[index - 1] = 0;          \n ....\n 1568            buffer[index++] = BSON.BSON_DATA_CODE_W_SCOPE;\n 1569            // Number of written bytes\n 1570:           var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n 1571:           // Encode the name\n 1572            index = index + numberOfWrittenBytes + 1;\n 1573            buffer[index - 1] = 0;\n ....\n 1623            buffer[index++] = BSON.BSON_DATA_CODE;\n 1624            // Number of written bytes\n 1625:           var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n 1626:           // Encode the name\n 1627            index = index + numberOfWrittenBytes + 1;\n 1628            buffer[index - 1] = 0;\n ....\n 1648          buffer[index++] = BSON.BSON_DATA_BINARY;\n 1649          // Number of written bytes\n 1650:         var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n 1651:         // Encode the name\n 1652          index = index + numberOfWrittenBytes + 1;\n 1653          buffer[index - 1] = 0;\n ....\n 1681          buffer[index++] = BSON.BSON_DATA_SYMBOL;\n 1682          // Number of written bytes\n 1683:         var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n 1684:         // Encode the name\n 1685          index = index + numberOfWrittenBytes + 1;\n 1686          buffer[index - 1] = 0;\n ....\n 1703          buffer[index++] = BSON.BSON_DATA_OBJECT;\n 1704          // Number of written bytes\n 1705:         var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n 1706:         // Encode the name\n 1707          index = index + numberOfWrittenBytes + 1;\n 1708          buffer[index - 1] = 0;\n 1709          // Set up correct object for serialization\n 1710          var ordered_values = {\n 1711:             '$ref': value.namespace\n 1712            , '$id' : value.oid\n 1713          };\n ....\n 1735          buffer[index++] = BSON.BSON_DATA_REGEXP;\n 1736          // Number of written bytes\n 1737:         var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n 1738:         // Encode the name\n 1739          index = index + numberOfWrittenBytes + 1;\n 1740          buffer[index - 1] = 0;\n ....\n 1757          buffer[index++] = Array.isArray(value) ? BSON.BSON_DATA_ARRAY : BSON.BSON_DATA_OBJECT;        \n 1758          // Number of written bytes\n 1759:         var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n 1760          // Adjust the index\n 1761          index = index + numberOfWrittenBytes + 1;\n ....\n 1777          buffer[index++] = BSON.BSON_DATA_REGEXP;\n 1778          // Number of written bytes\n 1779:         var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n 1780:         // Encode the name\n 1781          index = index + numberOfWrittenBytes + 1;\n 1782          buffer[index - 1] = 0;\n ....\n 1800            buffer[index++] = BSON.BSON_DATA_CODE_W_SCOPE;\n 1801            // Number of written bytes\n 1802:           var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n 1803:           // Encode the name\n 1804            index = index + numberOfWrittenBytes + 1;\n 1805            buffer[index - 1] = 0;\n ....\n 1856            buffer[index++] = BSON.BSON_DATA_CODE;\n 1857            // Number of written bytes\n 1858:           var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n 1859:           // Encode the name\n 1860            index = index + numberOfWrittenBytes + 1;\n 1861            buffer[index - 1] = 0;\n ....\n 2094      // If we get a zero it's the last byte, exit\n 2095      if(elementType == 0) break;\n 2096:     // Read the name of the field\n 2097:     var name = readCStyleString();\n 2098      // Switch on the type\n 2099      switch(elementType) {\n ....\n 2101          var string = supportsBuffer && Buffer.isBuffer(buffer) ? buffer.toString('binary', index, index + 12) : convertArraytoUtf8BinaryString(buffer, index, index + 12);\n 2102          // Decode the oid\n 2103:         object[name] = new ObjectID(string);\n 2104          // Update index\n 2105          index = index + 12;\n ....\n 2109          var stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n 2110          // Add string to object\n 2111:         object[name] = supportsBuffer && Buffer.isBuffer(buffer) ? buffer.toString('utf8', index, index + stringSize - 1) : convertUint8ArrayToUtf8String(buffer, index, index + stringSize - 1);\n 2112          // Update parse index position\n 2113          index = index + stringSize;\n ....\n 2115        case BSON.BSON_DATA_INT:\n 2116          // Decode the 32bit value\n 2117:         object[name] = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n 2118          break;\n 2119        case BSON.BSON_DATA_NUMBER:\n 2120          // Decode the double value\n 2121:         object[name] = readIEEE754(buffer, index, 'little', 52, 8);\n 2122          // Update the index\n 2123          index = index + 8;\n ....\n 2128          var highBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n 2129          // Set date object\n 2130:         object[name] = new Date(new Long(lowBits, highBits).toNumber());\n 2131          break;\n 2132        case BSON.BSON_DATA_BOOLEAN:\n 2133          // Parse the boolean value\n 2134:         object[name] = buffer[index++] == 1;\n 2135          break;\n 2136        case BSON.BSON_DATA_NULL:\n 2137          // Parse the boolean value\n 2138:         object[name] = null;\n 2139          break;\n 2140        case BSON.BSON_DATA_BINARY:\n ....\n 2150            }\n 2151            // Slice the data\n 2152:           object[name] = new Binary(buffer.slice(index, index + binarySize), subType);          \n 2153          } else {\n 2154            var _buffer = typeof Uint8Array != 'undefined' ? new Uint8Array(new ArrayBuffer(binarySize)) : new Array(binarySize);\n ....\n 2162            }\n 2163            // Create the binary object\n 2164:           object[name] = new Binary(_buffer, subType);\n 2165          }\n 2166          // Update the index\n ....\n 2172          var objectSize = buffer[index] | buffer[index + 1] << 8 | buffer[index + 2] << 16 | buffer[index + 3] << 24;\n 2173          // Set the array to the object\n 2174:         object[name] = BSON.deserialize(buffer, options, true);\n 2175          // Adjust the index\n 2176          index = index + objectSize;\n ....\n 2181          var objectSize = buffer[index] | buffer[index + 1] << 8 | buffer[index + 2] << 16 | buffer[index + 3] << 24;\n 2182          // Set the array to the object\n 2183:         object[name] = BSON.deserialize(buffer, options, false);\n 2184          // Adjust the index\n 2185          index = index + objectSize;\n ....\n 2207          }\n 2208          \n 2209:         object[name] = new RegExp(source, optionsArray.join(''));\n 2210          break;        \n 2211        case BSON.BSON_DATA_LONG:\n ....\n 2216          var long = new Long(lowBits, highBits);\n 2217          // Set the object\n 2218:         object[name] = long.lessThanOrEqual(JS_INT_MAX_LONG) && long.greaterThanOrEqual(JS_INT_MIN_LONG) ? long.toNumber() : long;\n 2219          break;\n 2220        case BSON.BSON_DATA_SYMBOL:\n ....\n 2222          var stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n 2223          // Add string to object\n 2224:         object[name] = new Symbol(buffer.toString('utf8', index, index + stringSize - 1));\n 2225          // Update parse index position\n 2226          index = index + stringSize;\n ....\n 2231          var highBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n 2232          // Set the object\n 2233:         object[name] = new Timestamp(lowBits, highBits);\n 2234          break;\n 2235        case BSON.BSON_DATA_MIN_KEY:\n 2236          // Parse the object\n 2237:         object[name] = new MinKey();\n 2238          break;\n 2239        case BSON.BSON_DATA_MAX_KEY:\n 2240          // Parse the object\n 2241:         object[name] = new MaxKey();\n 2242          break;\n 2243        case BSON.BSON_DATA_CODE:\n ....\n 2255              var hash = cacheFunctionsCrc32 ? crc32(functionString) : functionString;\n 2256              // Got to do this to avoid V8 deoptimizing the call due to finding eval\n 2257:             object[name] = isolateEvalWithHash(functionCache, hash, functionString, object);\n 2258            } else {\n 2259              // Set directly\n 2260:             object[name] = isolateEval(functionString);\n 2261            }\n 2262          } else {\n 2263:           object[name]  = new Code(functionString, {});\n 2264          }\n 2265  \n ....\n 2292              var hash = cacheFunctionsCrc32 ? crc32(functionString) : functionString;\n 2293              // Got to do this to avoid V8 deoptimizing the call due to finding eval\n 2294:             object[name] = isolateEvalWithHash(functionCache, hash, functionString, object);\n 2295            } else {\n 2296              // Set directly\n 2297:             object[name] = isolateEval(functionString);\n 2298            }\n 2299              \n 2300            // Set the scope on the object\n 2301:           object[name].scope = scopeObject;\n 2302          } else {\n 2303:           object[name]  = new Code(functionString, scopeObject);\n 2304          }\n 2305              \n ....\n 2317   \n 2318  /**\n 2319:  * Check if key name is valid.\n 2320   *\n 2321   * @ignore\n ....\n 2466   *\n 2467   * @class Represents the BSON DBRef type.\n 2468:  * @param {String} namespace the collection name.\n 2469   * @param {ObjectID} oid the reference ObjectID.\n 2470:  * @param {String} [db] optional db name, if omitted the reference is local to the current db.\n 2471   * @return {DBRef}\n 2472   */\n 2473: function DBRef(namespace, oid, db) {\n 2474:   if(!(this instanceof DBRef)) return new DBRef(namespace, oid, db);\n 2475    \n 2476    this._bsontype = 'DBRef';\n 2477:   this.namespace = namespace;\n 2478    this.oid = oid;\n 2479    this.db = db;\n ....\n 2486  DBRef.prototype.toJSON = function() {\n 2487    return {\n 2488:     '$ref':this.namespace,\n 2489      '$id':this.oid,\n 2490      '$db':this.db == null ? '' : this.db\n ....\n 2549  //    and/or other materials provided with the distribution.\n 2550  // \n 2551: //  * Neither the name of Fair Oaks Labs, Inc. nor the names of its contributors\n 2552  //    may be used to endorse or promote products derived from this software\n 2553  //    without specific prior written permission.\n ....\n 3647   * Create a random 3-byte value (i.e. unique for this\n 3648   * process). Other drivers use a md5 of the machine id here, but\n 3649:  * that would mean an asyc call to gethostname, so we don't bother.\n 3650   */\n 3651  var MACHINE_ID = parseInt(Math.random() * 0xFFFFFF, 10);\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/bson/browser_build/package.json:\n    1: { \"name\" :            \"bson\"\n    2  , \"description\" :     \"A bson parser for node.js and the browser\"\n    3  , \"main\":             \"../lib/bson/bson\"\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/bson/build/binding.Makefile:\n    1  # This file is generated by gyp; do not edit.\n    2  \n    3: export builddir_name ?= build/./.\n    4  .PHONY: all\n    5  all:\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/bson/build/bson.target.mk:\n  115  	-arch x86_64 \\\n  116  	-L$(builddir) \\\n  117: 	-install_name @rpath/bson.node\n  118  \n  119  LIBTOOLFLAGS_Debug := \\\n  ...\n  125  	-arch x86_64 \\\n  126  	-L$(builddir) \\\n  127: 	-install_name @rpath/bson.node\n  128  \n  129  LIBTOOLFLAGS_Release := \\\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/bson/build/config.gypi:\n   75      \"global\": \"\",\n   76      \"optional\": \"true\",\n   77:     \"username\": \"\",\n   78      \"bin_links\": \"true\",\n   79      \"force\": \"\",\n   ..\n   81      \"depth\": \"null\",\n   82      \"rebuild_bundle\": \"true\",\n   83:     \"searchsort\": \"name\",\n   84      \"unicode\": \"true\",\n   85      \"yes\": \"\",\n   ..\n  103      \"umask\": \"18\",\n  104      \"git\": \"git\",\n  105:     \"init_author_name\": \"\",\n  106      \"onload_script\": \"\",\n  107      \"tmp\": \"/var/folders/2m/0dk3bcjj74zfhxy8167mpzcc0000gn/T/\",\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/bson/build/gyp-mac-tool:\n   36        raise Exception(\"Not enough arguments\")\n   37  \n   38:     method = \"Exec%s\" % self._CommandifyName(args[0])\n   39      return getattr(self, method)(*args[1:])\n   40  \n   41:   def _CommandifyName(self, name_string):\n   42:     \"\"\"Transforms a tool name like copy-info-plist to CopyInfoPlist\"\"\"\n   43:     return name_string.title().replace('-', '')\n   44  \n   45    def ExecCopyBundleResource(self, source, dest):\n   ..\n   88      fp.close()\n   89  \n   90:   def _DetectInputEncoding(self, file_name):\n   91:     \"\"\"Reads the first few bytes from file_name and tries to guess the text\n   92      encoding. Returns None as a guess if it can't detect it.\"\"\"\n   93:     fp = open(file_name, 'rb')\n   94      try:\n   95        header = fp.read(3)\n   ..\n  149        signature_code = '?' * 4\n  150  \n  151:     dest = os.path.join(os.path.dirname(info_plist), 'PkgInfo')\n  152      fp = open(dest, 'w')\n  153      fp.write('%s%s' % (package_type, signature_code))\n  ...\n  174      \"\"\"Takes a path to Something.framework and the Current version of that and\n  175      sets up all the symlinks.\"\"\"\n  176:     # Find the name of the binary based on the part before the \".framework\".\n  177:     binary = os.path.basename(framework).split('.')[0]\n  178  \n  179      CURRENT = 'Current'\n  ...\n  201  \n  202    def _Relink(self, dest, link):\n  203:     \"\"\"Creates a symlink to |dest| named |link|. If |link| already exists,\n  204      it is overwritten.\"\"\"\n  205      if os.path.lexists(link):\n  ...\n  208  \n  209  \n  210: if __name__ == '__main__':\n  211    sys.exit(main(sys.argv[1:]))\n  212  \n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/bson/build/Makefile:\n   11  abs_srcdir := $(abspath $(srcdir))\n   12  \n   13: # The name of the builddir.\n   14: builddir_name ?= .\n   15  \n   16  # The V=1 flag on command line makes us verbosely print command lines.\n   ..\n   27  # Note that this must be two directories beneath src/ for unit tests to pass,\n   28  # as they reach into the src/ directory for data with relative paths.\n   29: builddir ?= $(builddir_name)/$(BUILDTYPE)\n   30  abs_builddir := $(abspath $(builddir))\n   31  depsdir := $(builddir)/.deps\n   ..\n   84  # Flags to make gcc output dependency info.  Note that you need to be\n   85  # careful here to use the flags that ccache and distcc can understand.\n   86: # We write to a dep file on the side first and then rename at the end\n   87  # so we can't end up with a broken dep file.\n   88  depfile = $(depsdir)/$(call replace_spaces,$@).d\n   ..\n  108  # and dollar signs past make, the shell, and sed at the same time.\n  109  # Doesn't work with spaces, but that's fine: .d files have spaces in\n  110: # their names replaced with other characters.\n  111  define fixup_dep\n  112  # The depfile may not exist if the input file didn't have any #includes.\n  ...\n  240  endef\n  241  \n  242: # do_cmd: run a command via the above cmd_foo names, if necessary.\n  243  # Should always run for a given target to handle command-line changes.\n  244  # Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/bson/build/Release/.deps/Release/bson.node.d:\n    1: cmd_Release/bson.node := ./gyp-mac-tool flock ./Release/linker.lock c++ -shared -Wl,-search_paths_first -mmacosx-version-min=10.5 -arch x86_64 -L./Release -install_name @rpath/bson.node  -o Release/bson.node Release/obj.target/bson/ext/bson.o -undefined dynamic_lookup\n    2  \n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/bson/ext/bson.cc:\n   35  #include \"bson.h\"\n   36  \n   37: using namespace v8;\n   38: using namespace node;\n   39  \n   40  //===========================================================================\n   ..\n   61  }\n   62  \n   63: void DataStream::CheckKey(const Local<String>& keyName)\n   64  {\n   65: 	size_t keyLength = keyName->Utf8Length();\n   66  	if(keyLength == 0) return;\n   67  \n   68  	char* keyStringBuffer = (char*) alloca(keyLength+1);\n   69: 	keyName->WriteUtf8(keyStringBuffer);\n   70  \n   71  	if(keyStringBuffer[0] == '$')\n   ..\n   80  }\n   81  \n   82: template<typename T> void BSONSerializer<T>::SerializeDocument(const Handle<Value>& value)\n   83  {\n   84  	void* documentSize = this->BeginWriteSize();\n   85  	Local<Object> object = bson->GetSerializeObject(value);\n   86  \n   87: 	// Get the object property names\n   88  	#if NODE_MAJOR_VERSION == 0 && NODE_MINOR_VERSION < 6\n   89:     Local<Array> propertyNames = object->GetPropertyNames();\n   90    #else\n   91:     Local<Array> propertyNames = object->GetOwnPropertyNames();\n   92    #endif\n   93  \n   94  	// Length of the property\n   95: 	int propertyLength = propertyNames->Length();\n   96  	for(int i = 0;  i < propertyLength; ++i)\n   97  	{\n   98: 		const Local<String>& propertyName = propertyNames->Get(i)->ToString();\n   99: 		if(checkKeys) this->CheckKey(propertyName);\n  100  \n  101: 		const Local<Value>& propertyValue = object->Get(propertyName);\n  102  \n  103  		if(serializeFunctions || !propertyValue->IsFunction())\n  104  		{\n  105  			void* typeLocation = this->BeginWriteType();\n  106: 			this->WriteString(propertyName);\n  107  			SerializeValue(typeLocation, propertyValue);\n  108  		}\n  ...\n  113  }\n  114  \n  115: template<typename T> void BSONSerializer<T>::SerializeArray(const Handle<Value>& value)\n  116  {\n  117  	void* documentSize = this->BeginWriteSize();\n  ...\n  134  // The template approach eliminates almost all of the inspection of values unless they're required (eg. string lengths)\n  135  // and ensures that there is always consistency between bytes counted and bytes written by design.\n  136: template<typename T> void BSONSerializer<T>::SerializeValue(void* typeLocation, const Handle<Value>& value)\n  137  {\n  138  	if(value->IsNumber())\n  ...\n  194  		if(object->Has(bson->_bsontypeString))\n  195  		{\n  196: 			const Local<String>& constructorString = object->GetConstructorName();\n  197  			if(bson->longString->StrictEquals(constructorString))\n  198  			{\n  ...\n  243  				const Local<Object>& scope = object->Get(bson->_codeScopeString)->ToObject();\n  244  \n  245: 				// For Node < 0.6.X use the GetPropertyNames\n  246  	      #if NODE_MAJOR_VERSION == 0 && NODE_MINOR_VERSION < 6\n  247: 	        uint32_t propertyNameLength = scope->GetPropertyNames()->Length();\n  248  	      #else\n  249: 	        uint32_t propertyNameLength = scope->GetOwnPropertyNames()->Length();\n  250  	      #endif\n  251  \n  252: 				if(propertyNameLength > 0)\n  253  				{\n  254  					this->CommitType(typeLocation, BSON_TYPE_CODE_W_SCOPE);\n  ...\n  272  				void* refType = this->BeginWriteType();\n  273  				this->WriteData(\"$ref\", 5);\n  274: 				SerializeValue(refType, object->Get(bson->_dbRefNamespaceString));\n  275  \n  276  				void* idType = this->BeginWriteType();\n  ...\n  414  	{\n  415  		BsonType type = (BsonType) ReadByte();\n  416: 		const Local<String>& name = ReadCString();\n  417  		const Handle<Value>& value = DeserializeValue(type);\n  418: 		returnObject->ForceSet(name, value);\n  419  	}\n  420  	if(p != pEnd) ThrowAllocatedStringException(64, \"Bad BSON Document: Serialize consumed unexpected number of bytes\");\n  ...\n  605  	_dbRefIdRefString = Persistent<String>::New(String::New(\"$id\"));\n  606  	_dbRefDbRefString = Persistent<String>::New(String::New(\"$db\"));\n  607: 	_dbRefNamespaceString = Persistent<String>::New(String::New(\"namespace\"));\n  608  	_dbRefDbString = Persistent<String>::New(String::New(\"db\"));\n  609  	_dbRefOidString = Persistent<String>::New(String::New(\"oid\"));\n  ...\n  632  	constructor_template = Persistent<FunctionTemplate>::New(t);\n  633  	constructor_template->InstanceTemplate()->SetInternalFieldCount(1);\n  634: 	constructor_template->SetClassName(String::NewSymbol(\"BSON\"));\n  635  \n  636  	// Instance methods\n  ...\n  666  				// Let's get a reference to the function\n  667  				Local<Function> func = Local<Function>::Cast(array->Get(i));\n  668: 				Local<String> functionName = func->GetName()->ToString();\n  669  \n  670  				// Save the functions making them persistant handles (they don't get collected)\n  671: 				if(functionName->StrictEquals(bson->longString)) {\n  672  					bson->longConstructor = Persistent<Function>::New(func);\n  673  					foundClassesMask |= 1;\n  674: 				} else if(functionName->StrictEquals(bson->objectIDString)) {\n  675  					bson->objectIDConstructor = Persistent<Function>::New(func);\n  676  					foundClassesMask |= 2;\n  677: 				} else if(functionName->StrictEquals(bson->binaryString)) {\n  678  					bson->binaryConstructor = Persistent<Function>::New(func);\n  679  					foundClassesMask |= 4;\n  680: 				} else if(functionName->StrictEquals(bson->codeString)) {\n  681  					bson->codeConstructor = Persistent<Function>::New(func);\n  682  					foundClassesMask |= 8;\n  683: 				} else if(functionName->StrictEquals(bson->dbrefString)) {\n  684  					bson->dbrefConstructor = Persistent<Function>::New(func);\n  685  					foundClassesMask |= 0x10;\n  686: 				} else if(functionName->StrictEquals(bson->symbolString)) {\n  687  					bson->symbolConstructor = Persistent<Function>::New(func);\n  688  					foundClassesMask |= 0x20;\n  689: 				} else if(functionName->StrictEquals(bson->doubleString)) {\n  690  					bson->doubleConstructor = Persistent<Function>::New(func);\n  691  					foundClassesMask |= 0x40;\n  692: 				} else if(functionName->StrictEquals(bson->timestampString)) {\n  693  					bson->timestampConstructor = Persistent<Function>::New(func);\n  694  					foundClassesMask |= 0x80;\n  695: 				} else if(functionName->StrictEquals(bson->minKeyString)) {\n  696  					bson->minKeyConstructor = Persistent<Function>::New(func);\n  697  					foundClassesMask |= 0x100;\n  698: 				} else if(functionName->StrictEquals(bson->maxKeyString)) {\n  699  					bson->maxKeyConstructor = Persistent<Function>::New(func);\n  700  					foundClassesMask |= 0x200;\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/bson/ext/bson.h:\n   12  #include <v8.h>\n   13  \n   14: using namespace v8;\n   15: using namespace node;\n   16  \n   17  //===========================================================================\n   ..\n   42  //===========================================================================\n   43  \n   44: template<typename T> class BSONSerializer;\n   45  \n   46  class BSON : public ObjectWrap {\n   ..\n  105  	Persistent<String> _dbRefIdRefString;\n  106  	Persistent<String> _dbRefDbRefString;\n  107: 	Persistent<String> _dbRefNamespaceString;\n  108  	Persistent<String> _dbRefDbString;\n  109  	Persistent<String> _dbRefOidString;\n  ...\n  115  	Local<Object> GetSerializeObject(const Handle<Value>& object);\n  116  \n  117: 	template<typename T> friend class BSONSerializer;\n  118  	friend class BSONDeserializer;\n  119  };\n  ...\n  137  	void	WriteDouble(const Handle<Value>& value)					{ count += 8; }\n  138  	void	WriteDouble(const Handle<Object>&, const Handle<String>&) { count += 8; }\n  139: 	void	WriteUInt32String(uint32_t name)						{ char buffer[32]; count += sprintf(buffer, \"%u\", name) + 1; }\n  140  	void	WriteLengthPrefixedString(const Local<String>& value)	{ count += value->Utf8Length()+5; }\n  141  	void	WriteObjectId(const Handle<Object>& object, const Handle<String>& key)				{ count += 12; }\n  ...\n  179  	void	WriteDouble(const Handle<Value>& value)					{ WriteDouble(value->NumberValue());		}\n  180  	void	WriteDouble(const Handle<Object>& object, const Handle<String>& key) { WriteDouble(object->Get(key)); }\n  181: 	void	WriteUInt32String(uint32_t name)						{ p += sprintf(p, \"%u\", name) + 1;			}\n  182  	void	WriteLengthPrefixedString(const Local<String>& value)	{ WriteInt32(value->Utf8Length()+1); WriteString(value); }\n  183  	void	WriteObjectId(const Handle<Object>& object, const Handle<String>& key);\n  ...\n  197  	size_t GetSerializeSize() const									{ return p - destinationBuffer; }\n  198  \n  199: 	void	CheckKey(const Local<String>& keyName);\n  200  \n  201  protected:\n  ...\n  204  };\n  205  \n  206: template<typename T> class BSONSerializer : public T\n  207  {\n  208  private:\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/bson/ext/Makefile:\n    1  NODE = node\n    2: name = all\n    3  JOBS = 1\n    4  \n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/bson/lib/bson/bson.js:\n  225   * @api private\n  226   */\n  227: function calculateElement(name, value, serializeFunctions) {\n  228    var isBuffer = typeof Buffer !== 'undefined';\n  229    \n  230    switch(typeof value) {\n  231      case 'string':       \n  232:       return 1 + (!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1 + 4 + (!isBuffer ? numberOfBytes(value) : Buffer.byteLength(value, 'utf8')) + 1;\n  233      case 'number':\n  234        if(Math.floor(value) === value && value >= BSON.JS_INT_MIN && value <= BSON.JS_INT_MAX) {\n  235          if(value >= BSON.BSON_INT32_MIN && value <= BSON.BSON_INT32_MAX) { // 32 bit\n  236:           return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (4 + 1);\n  237          } else {\n  238:           return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (8 + 1);\n  239          }\n  240        } else {  // 64 bit\n  241:         return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (8 + 1);\n  242        }\n  243      case 'undefined':\n  244:       return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (1);\n  245      case 'boolean':\n  246:       return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (1 + 1);\n  247      case 'object':   \n  248        if(value == null || value instanceof MinKey || value instanceof MaxKey || value['_bsontype'] == 'MinKey' || value['_bsontype'] == 'MaxKey') {\n  249:         return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (1);\n  250        } else if(value instanceof ObjectID || value['_bsontype'] == 'ObjectID') {\n  251:         return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (12 + 1);\n  252        } else if(value instanceof Date || isDate(value)) {\n  253:         return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (8 + 1);\n  254        } else if(typeof Buffer !== 'undefined' && Buffer.isBuffer(value)) {\n  255:         return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (1 + 4 + 1) + value.length;\n  256        } else if(value instanceof Long || value instanceof Double || value instanceof Timestamp \n  257            || value['_bsontype'] == 'Long' || value['_bsontype'] == 'Double' || value['_bsontype'] == 'Timestamp') {\n  258:         return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (8 + 1);        \n  259        } else if(value instanceof Code || value['_bsontype'] == 'Code') {\n  260          // Calculate size depending on the availability of a scope\n  261          if(value.scope != null && Object.keys(value.scope).length > 0) {\n  262:           return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + 4 + 4 + (!isBuffer ? numberOfBytes(value.code.toString()) : Buffer.byteLength(value.code.toString(), 'utf8')) + 1 + BSON.calculateObjectSize(value.scope, serializeFunctions);\n  263          } else {\n  264:           return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + 4 + (!isBuffer ? numberOfBytes(value.code.toString()) : Buffer.byteLength(value.code.toString(), 'utf8')) + 1;\n  265          }                      \n  266        } else if(value instanceof Binary || value['_bsontype'] == 'Binary') {\n  267          // Check what kind of subtype we have\n  268          if(value.sub_type == Binary.SUBTYPE_BYTE_ARRAY) {\n  269:           return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (value.position + 1 + 4 + 1 + 4);\n  270          } else {\n  271:           return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (value.position + 1 + 4 + 1);          \n  272          }\n  273        } else if(value instanceof Symbol || value['_bsontype'] == 'Symbol') {\n  274:         return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + ((!isBuffer ? numberOfBytes(value.value) : Buffer.byteLength(value.value, 'utf8')) + 4 + 1 + 1);\n  275        } else if(value instanceof DBRef || value['_bsontype'] == 'DBRef') {\n  276          // Set up correct object for serialization\n  277          var ordered_values = {\n  278:             '$ref': value.namespace\n  279            , '$id' : value.oid\n  280          };\n  ...\n  285          }\n  286          \n  287:         return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + BSON.calculateObjectSize(ordered_values, serializeFunctions);\n  288        } else if(value instanceof RegExp || Object.prototype.toString.call(value) === '[object RegExp]') {\n  289:           return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + (!isBuffer ? numberOfBytes(value.source) : Buffer.byteLength(value.source, 'utf8')) + 1\n  290              + (value.global ? 1 : 0) + (value.ignoreCase ? 1 : 0) + (value.multiline ? 1 : 0) + 1        \n  291        } else {	\n  292:         return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + BSON.calculateObjectSize(value, serializeFunctions) + 1;        					\n  293        }\n  294      case 'function':\n  295        // WTF for 0.4.X where typeof /someregexp/ === 'function'\n  296        if(value instanceof RegExp || Object.prototype.toString.call(value) === '[object RegExp]' || String.call(value) == '[object RegExp]') {\n  297:         return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + (!isBuffer ? numberOfBytes(value.source) : Buffer.byteLength(value.source, 'utf8')) + 1\n  298            + (value.global ? 1 : 0) + (value.ignoreCase ? 1 : 0) + (value.multiline ? 1 : 0) + 1\n  299        } else {\n  300          if(serializeFunctions && value.scope != null && Object.keys(value.scope).length > 0) {\n  301:           return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + 4 + 4 + (!isBuffer ? numberOfBytes(value.toString()) : Buffer.byteLength(value.toString(), 'utf8')) + 1 + BSON.calculateObjectSize(value.scope, serializeFunctions);\n  302          } else if(serializeFunctions) {\n  303:           return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + 4 + (!isBuffer ? numberOfBytes(value.toString()) : Buffer.byteLength(value.toString(), 'utf8')) + 1;\n  304          }      \n  305        }\n  ...\n  424   * @api private\n  425   */\n  426: var packElement = function(name, value, checkKeys, buffer, index, serializeFunctions) {\n  427    var startIndex = index;\n  428      \n  ...\n  432        buffer[index++] = BSON.BSON_DATA_STRING;\n  433        // Number of written bytes\n  434:       var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n  435:       // Encode the name\n  436        index = index + numberOfWrittenBytes + 1;\n  437        buffer[index - 1] = 0;          \n  ...\n  463            buffer[index++] = BSON.BSON_DATA_INT;          \n  464            // Number of written bytes\n  465:           var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n  466:           // Encode the name\n  467            index = index + numberOfWrittenBytes + 1;\n  468            buffer[index - 1] = 0;          \n  ...\n  476            buffer[index++] = BSON.BSON_DATA_NUMBER;\n  477            // Number of written bytes\n  478:           var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n  479:           // Encode the name\n  480            index = index + numberOfWrittenBytes + 1;\n  481            buffer[index - 1] = 0;          \n  ...\n  488            buffer[index++] = BSON.BSON_DATA_LONG;          \n  489            // Number of written bytes\n  490:           var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n  491:           // Encode the name\n  492            index = index + numberOfWrittenBytes + 1;\n  493            buffer[index - 1] = 0;          \n  ...\n  510          buffer[index++] = BSON.BSON_DATA_NUMBER;\n  511          // Number of written bytes\n  512:         var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n  513:         // Encode the name\n  514          index = index + numberOfWrittenBytes + 1;\n  515          buffer[index - 1] = 0;          \n  ...\n  525        buffer[index++] = BSON.BSON_DATA_NULL;\n  526        // Number of written bytes\n  527:       var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n  528:       // Encode the name\n  529        index = index + numberOfWrittenBytes + 1;\n  530        buffer[index - 1] = 0;\n  ...\n  534        buffer[index++] = BSON.BSON_DATA_BOOLEAN;\n  535        // Number of written bytes\n  536:       var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n  537:       // Encode the name\n  538        index = index + numberOfWrittenBytes + 1;\n  539        buffer[index - 1] = 0;\n  ...\n  554        \n  555          // Number of written bytes\n  556:         var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n  557:         // Encode the name\n  558          index = index + numberOfWrittenBytes + 1;\n  559          buffer[index - 1] = 0;\n  ...\n  563          buffer[index++] = BSON.BSON_DATA_OID;\n  564          // Number of written bytes\n  565:         var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n  566:         // Encode the name\n  567          index = index + numberOfWrittenBytes + 1;\n  568          buffer[index - 1] = 0;\n  ...\n  577          buffer[index++] = BSON.BSON_DATA_DATE;\n  578          // Number of written bytes\n  579:         var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n  580:         // Encode the name\n  581          index = index + numberOfWrittenBytes + 1;\n  582          buffer[index - 1] = 0;\n  ...\n  601          buffer[index++] = BSON.BSON_DATA_BINARY;\n  602          // Number of written bytes\n  603:         var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n  604:         // Encode the name\n  605          index = index + numberOfWrittenBytes + 1;\n  606          buffer[index - 1] = 0;\n  ...\n  623          buffer[index++] = value instanceof Long ? BSON.BSON_DATA_LONG : BSON.BSON_DATA_TIMESTAMP;\n  624          // Number of written bytes\n  625:         var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n  626:         // Encode the name\n  627          index = index + numberOfWrittenBytes + 1;\n  628          buffer[index - 1] = 0;\n  ...\n  645          buffer[index++] = BSON.BSON_DATA_NUMBER;\n  646          // Number of written bytes\n  647:         var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n  648:         // Encode the name\n  649          index = index + numberOfWrittenBytes + 1;\n  650          buffer[index - 1] = 0;          \n  ...\n  659            buffer[index++] = BSON.BSON_DATA_CODE_W_SCOPE;\n  660            // Number of written bytes\n  661:           var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n  662:           // Encode the name\n  663            index = index + numberOfWrittenBytes + 1;\n  664            buffer[index - 1] = 0;\n  ...\n  714            buffer[index++] = BSON.BSON_DATA_CODE;\n  715            // Number of written bytes\n  716:           var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n  717:           // Encode the name\n  718            index = index + numberOfWrittenBytes + 1;\n  719            buffer[index - 1] = 0;\n  ...\n  739          buffer[index++] = BSON.BSON_DATA_BINARY;\n  740          // Number of written bytes\n  741:         var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n  742:         // Encode the name\n  743          index = index + numberOfWrittenBytes + 1;\n  744          buffer[index - 1] = 0;\n  ...\n  772          buffer[index++] = BSON.BSON_DATA_SYMBOL;\n  773          // Number of written bytes\n  774:         var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n  775:         // Encode the name\n  776          index = index + numberOfWrittenBytes + 1;\n  777          buffer[index - 1] = 0;\n  ...\n  794          buffer[index++] = BSON.BSON_DATA_OBJECT;\n  795          // Number of written bytes\n  796:         var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n  797:         // Encode the name\n  798          index = index + numberOfWrittenBytes + 1;\n  799          buffer[index - 1] = 0;\n  800          // Set up correct object for serialization\n  801          var ordered_values = {\n  802:             '$ref': value.namespace\n  803            , '$id' : value.oid\n  804          };\n  ...\n  826          buffer[index++] = BSON.BSON_DATA_REGEXP;\n  827          // Number of written bytes\n  828:         var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n  829:         // Encode the name\n  830          index = index + numberOfWrittenBytes + 1;\n  831          buffer[index - 1] = 0;\n  ...\n  848          buffer[index++] = Array.isArray(value) ? BSON.BSON_DATA_ARRAY : BSON.BSON_DATA_OBJECT;        \n  849          // Number of written bytes\n  850:         var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n  851          // Adjust the index\n  852          index = index + numberOfWrittenBytes + 1;\n  ...\n  868          buffer[index++] = BSON.BSON_DATA_REGEXP;\n  869          // Number of written bytes\n  870:         var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n  871:         // Encode the name\n  872          index = index + numberOfWrittenBytes + 1;\n  873          buffer[index - 1] = 0;\n  ...\n  891            buffer[index++] = BSON.BSON_DATA_CODE_W_SCOPE;\n  892            // Number of written bytes\n  893:           var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n  894:           // Encode the name\n  895            index = index + numberOfWrittenBytes + 1;\n  896            buffer[index - 1] = 0;\n  ...\n  947            buffer[index++] = BSON.BSON_DATA_CODE;\n  948            // Number of written bytes\n  949:           var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n  950:           // Encode the name\n  951            index = index + numberOfWrittenBytes + 1;\n  952            buffer[index - 1] = 0;\n  ...\n 1185      // If we get a zero it's the last byte, exit\n 1186      if(elementType == 0) break;\n 1187:     // Read the name of the field\n 1188:     var name = readCStyleString();\n 1189      // Switch on the type\n 1190      switch(elementType) {\n ....\n 1192          var string = supportsBuffer && Buffer.isBuffer(buffer) ? buffer.toString('binary', index, index + 12) : convertArraytoUtf8BinaryString(buffer, index, index + 12);\n 1193          // Decode the oid\n 1194:         object[name] = new ObjectID(string);\n 1195          // Update index\n 1196          index = index + 12;\n ....\n 1200          var stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n 1201          // Add string to object\n 1202:         object[name] = supportsBuffer && Buffer.isBuffer(buffer) ? buffer.toString('utf8', index, index + stringSize - 1) : convertUint8ArrayToUtf8String(buffer, index, index + stringSize - 1);\n 1203          // Update parse index position\n 1204          index = index + stringSize;\n ....\n 1206        case BSON.BSON_DATA_INT:\n 1207          // Decode the 32bit value\n 1208:         object[name] = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n 1209          break;\n 1210        case BSON.BSON_DATA_NUMBER:\n 1211          // Decode the double value\n 1212:         object[name] = readIEEE754(buffer, index, 'little', 52, 8);\n 1213          // Update the index\n 1214          index = index + 8;\n ....\n 1219          var highBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n 1220          // Set date object\n 1221:         object[name] = new Date(new Long(lowBits, highBits).toNumber());\n 1222          break;\n 1223        case BSON.BSON_DATA_BOOLEAN:\n 1224          // Parse the boolean value\n 1225:         object[name] = buffer[index++] == 1;\n 1226          break;\n 1227        case BSON.BSON_DATA_NULL:\n 1228          // Parse the boolean value\n 1229:         object[name] = null;\n 1230          break;\n 1231        case BSON.BSON_DATA_BINARY:\n ....\n 1241            }\n 1242            // Slice the data\n 1243:           object[name] = new Binary(buffer.slice(index, index + binarySize), subType);          \n 1244          } else {\n 1245            var _buffer = typeof Uint8Array != 'undefined' ? new Uint8Array(new ArrayBuffer(binarySize)) : new Array(binarySize);\n ....\n 1253            }\n 1254            // Create the binary object\n 1255:           object[name] = new Binary(_buffer, subType);\n 1256          }\n 1257          // Update the index\n ....\n 1263          var objectSize = buffer[index] | buffer[index + 1] << 8 | buffer[index + 2] << 16 | buffer[index + 3] << 24;\n 1264          // Set the array to the object\n 1265:         object[name] = BSON.deserialize(buffer, options, true);\n 1266          // Adjust the index\n 1267          index = index + objectSize;\n ....\n 1272          var objectSize = buffer[index] | buffer[index + 1] << 8 | buffer[index + 2] << 16 | buffer[index + 3] << 24;\n 1273          // Set the array to the object\n 1274:         object[name] = BSON.deserialize(buffer, options, false);\n 1275          // Adjust the index\n 1276          index = index + objectSize;\n ....\n 1298          }\n 1299          \n 1300:         object[name] = new RegExp(source, optionsArray.join(''));\n 1301          break;        \n 1302        case BSON.BSON_DATA_LONG:\n ....\n 1307          var long = new Long(lowBits, highBits);\n 1308          // Set the object\n 1309:         object[name] = long.lessThanOrEqual(JS_INT_MAX_LONG) && long.greaterThanOrEqual(JS_INT_MIN_LONG) ? long.toNumber() : long;\n 1310          break;\n 1311        case BSON.BSON_DATA_SYMBOL:\n ....\n 1313          var stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n 1314          // Add string to object\n 1315:         object[name] = new Symbol(buffer.toString('utf8', index, index + stringSize - 1));\n 1316          // Update parse index position\n 1317          index = index + stringSize;\n ....\n 1322          var highBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n 1323          // Set the object\n 1324:         object[name] = new Timestamp(lowBits, highBits);\n 1325          break;\n 1326        case BSON.BSON_DATA_MIN_KEY:\n 1327          // Parse the object\n 1328:         object[name] = new MinKey();\n 1329          break;\n 1330        case BSON.BSON_DATA_MAX_KEY:\n 1331          // Parse the object\n 1332:         object[name] = new MaxKey();\n 1333          break;\n 1334        case BSON.BSON_DATA_CODE:\n ....\n 1346              var hash = cacheFunctionsCrc32 ? crc32(functionString) : functionString;\n 1347              // Got to do this to avoid V8 deoptimizing the call due to finding eval\n 1348:             object[name] = isolateEvalWithHash(functionCache, hash, functionString, object);\n 1349            } else {\n 1350              // Set directly\n 1351:             object[name] = isolateEval(functionString);\n 1352            }\n 1353          } else {\n 1354:           object[name]  = new Code(functionString, {});\n 1355          }\n 1356  \n ....\n 1383              var hash = cacheFunctionsCrc32 ? crc32(functionString) : functionString;\n 1384              // Got to do this to avoid V8 deoptimizing the call due to finding eval\n 1385:             object[name] = isolateEvalWithHash(functionCache, hash, functionString, object);\n 1386            } else {\n 1387              // Set directly\n 1388:             object[name] = isolateEval(functionString);\n 1389            }\n 1390              \n 1391            // Set the scope on the object\n 1392:           object[name].scope = scopeObject;\n 1393          } else {\n 1394:           object[name]  = new Code(functionString, scopeObject);\n 1395          }\n 1396              \n ....\n 1408   \n 1409  /**\n 1410:  * Check if key name is valid.\n 1411   *\n 1412   * @ignore\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/bson/lib/bson/db_ref.js:\n    3   *\n    4   * @class Represents the BSON DBRef type.\n    5:  * @param {String} namespace the collection name.\n    6   * @param {ObjectID} oid the reference ObjectID.\n    7:  * @param {String} [db] optional db name, if omitted the reference is local to the current db.\n    8   * @return {DBRef}\n    9   */\n   10: function DBRef(namespace, oid, db) {\n   11:   if(!(this instanceof DBRef)) return new DBRef(namespace, oid, db);\n   12    \n   13    this._bsontype = 'DBRef';\n   14:   this.namespace = namespace;\n   15    this.oid = oid;\n   16    this.db = db;\n   ..\n   23  DBRef.prototype.toJSON = function() {\n   24    return {\n   25:     '$ref':this.namespace,\n   26      '$id':this.oid,\n   27      '$db':this.db == null ? '' : this.db\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/bson/lib/bson/float_parser.js:\n   12  //    and/or other materials provided with the distribution.\n   13  // \n   14: //  * Neither the name of Fair Oaks Labs, Inc. nor the names of its contributors\n   15  //    may be used to endorse or promote products derived from this software\n   16  //    without specific prior written permission.\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/bson/lib/bson/objectid.js:\n    9   * Create a random 3-byte value (i.e. unique for this\n   10   * process). Other drivers use a md5 of the machine id here, but\n   11:  * that would mean an asyc call to gethostname, so we don't bother.\n   12   */\n   13  var MACHINE_ID = parseInt(Math.random() * 0xFFFFFF, 10);\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/bson/package.json:\n    1  {\n    2:   \"name\": \"bson\",\n    3    \"description\": \"A bson parser for node.js and the browser\",\n    4    \"keywords\": [\n    .\n    9    \"version\": \"0.1.8\",\n   10    \"author\": {\n   11:     \"name\": \"Christian Amor Kvalheim\",\n   12      \"email\": \"christkv@gmail.com\"\n   13    },\n   ..\n   47    ],\n   48    \"readme\": \"A JS/C++ Bson parser for node, used in the MongoDB Native driver\",\n   49:   \"readmeFilename\": \"README.md\",\n   50    \"_id\": \"bson@0.1.8\",\n   51    \"_from\": \"bson@0.1.8\"\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/bson/test/browser/nodeunit.js:\n   51              method, its toJSON method will be called and the result will be\n   52              stringified. A toJSON method does not serialize: it returns the\n   53:             value represented by the name/value pair that should be serialized,\n   54              or undefined if nothing should be serialized. The toJSON method\n   55              will be passed the key associated with the value, and this will be\n   ..\n  480  \n  481  // In the optional fourth stage, we recursively walk the new structure, passing\n  482: // each name/value pair to a reviver function for possible transformation.\n  483  \n  484                  return typeof reviver === 'function' ?\n  ...\n 1072      };\n 1073  \n 1074:     var _console_fn = function (name) {\n 1075          return function (fn) {\n 1076              var args = Array.prototype.slice.call(arguments, 1);\n ....\n 1083                          }\n 1084                      }\n 1085:                     else if (console[name]) {\n 1086                          _forEach(args, function (x) {\n 1087:                             console[name](x);\n 1088                          });\n 1089                      }\n ....\n 1183  \n 1184  assert.AssertionError = function AssertionError (options) {\n 1185:   this.name = \"AssertionError\";\n 1186    this.message = options.message;\n 1187    this.actual = options.actual;\n ....\n 1207  assert.AssertionError.prototype.toString = function() {\n 1208    if (this.message) {\n 1209:     return [this.name+\":\", this.message].join(' ');\n 1210    } else {\n 1211:     return [ this.name+\":\"\n 1212             , JSON.stringify(this.expected )\n 1213             , this.operator\n ....\n 1301    // (although not necessarily the same order), equivalent values for every\n 1302    // corresponding key, and an identical \"prototype\" property. Note: this\n 1303:   // accounts for both named and indexed properties on Arrays.\n 1304    } else {\n 1305      return objEquiv(actual, expected);\n ....\n 1411    if (shouldThrow && !threw) {\n 1412      fail( \"Missing expected exception\"\n 1413:         + (err && err.name ? \" (\"+err.name+\").\" : '.')\n 1414          + (message ? \" \" + message : \"\")\n 1415          );\n ....\n 1417    if (!shouldThrow && threw && typematters && exception instanceof err) {\n 1418      fail( \"Got unwanted exception\"\n 1419:         + (err && err.name ? \" (\"+err.name+\").\" : '.')\n 1420          + (message ? \" \" + message : \"\")\n 1421          );\n ....\n 1536  /**\n 1537   * Creates the 'test' object that gets passed to every test function.\n 1538:  * Accepts the name of the test function as its first argument, followed by\n 1539   * the start time in ms, the options object and a callback function.\n 1540   *\n 1541:  * @param {String} name\n 1542   * @param {Number} start\n 1543   * @param {Object} options\n ....\n 1546   */\n 1547  \n 1548: exports.test = function (name, start, options, callback) {\n 1549      var expecting;\n 1550      var a_list = [];\n ....\n 1586              async.nextTick(function () {\n 1587                  var assertion_list = exports.assertionList(a_list, end - start);\n 1588:                 options.testDone(name, assertion_list);\n 1589                  callback(null, a_list);\n 1590              });\n ....\n 1617  \n 1618  exports.options = function (opt) {\n 1619:     var optionalCallback = function (name) {\n 1620:         opt[name] = opt[name] || function () {};\n 1621      };\n 1622  \n ....\n 1685   * second argument.\n 1686   *\n 1687:  * @param {String} name\n 1688   * @param {Function} fn\n 1689   * @param {Object} opt\n ....\n 1692   */\n 1693  \n 1694: exports.runTest = function (name, fn, opt, callback) {\n 1695      var options = types.options(opt);\n 1696  \n 1697:     options.testStart(name);\n 1698      var start = new Date().getTime();\n 1699:     var test = types.test(name, start, options, callback);\n 1700  \n 1701      try {\n ....\n 1712   * called with a list of all assertions as the second argument.\n 1713   *\n 1714:  * If a name is passed to this function it is prepended to all test and suite\n 1715:  * names that run within it.\n 1716   *\n 1717:  * @param {String} name\n 1718   * @param {Object} suite\n 1719   * @param {Object} opt\n ....\n 1722   */\n 1723  \n 1724: exports.runSuite = function (name, suite, opt, callback) {\n 1725      var keys = _keys(suite);\n 1726  \n 1727      async.concatSeries(keys, function (k, cb) {\n 1728:         var prop = suite[k], _name;\n 1729  \n 1730:         _name = name ? [].concat(name, k) : [k];\n 1731  \n 1732:         _name.toString = function () {\n 1733              // fallback for old one\n 1734              return this.join(' - ');\n ....\n 1736  \n 1737          if (typeof prop === 'function') {\n 1738:             var in_name = false;\n 1739:             for (var i = 0; i < _name.length; i += 1) {\n 1740:                 if (_name[i] === opt.testspec) {\n 1741:                     in_name = true;\n 1742                  }\n 1743              }\n 1744:             if (!opt.testspec || in_name) {\n 1745                  if (opt.moduleStart) {\n 1746                      opt.moduleStart();\n 1747                  }\n 1748:                 exports.runTest(_name, suite[k], opt, cb);\n 1749              }\n 1750              else {\n ....\n 1753          }\n 1754          else {\n 1755:             exports.runSuite(_name, suite[k], opt, cb);\n 1756          }\n 1757      }, callback);\n ....\n 1761   * Run each exported test function or test suite from a loaded module.\n 1762   *\n 1763:  * @param {String} name\n 1764   * @param {Object} mod\n 1765   * @param {Object} opt\n ....\n 1768   */\n 1769  \n 1770: exports.runModule = function (name, mod, opt, callback) {\n 1771      var options = _copy(types.options(opt));\n 1772  \n ....\n 1776          if (!_run) {\n 1777              _run = true;\n 1778:             _moduleStart(name);\n 1779          }\n 1780      }\n ....\n 1786          var end = new Date().getTime();\n 1787          var assertion_list = types.assertionList(a_list, end - start);\n 1788:         options.moduleDone(name, assertion_list);\n 1789          callback(null, a_list);\n 1790      });\n ....\n 1792  \n 1793  /**\n 1794:  * Treats an object literal as a list of modules keyed by name. Runs each\n 1795   * module and finished with calling 'done'. You can think of this as a browser\n 1796   * safe alternative to runFiles in the nodeunit module.\n ....\n 1971  \n 1972      nodeunit.runModules(modules, {\n 1973:         moduleStart: function (name) {\n 1974              /*var mheading = document.createElement('h2');\n 1975:             mheading.innerText = name;\n 1976              results.appendChild(mheading);\n 1977              module = document.createElement('ol');\n 1978              results.appendChild(module);*/\n 1979          },\n 1980:         testDone: function (name, assertions) {\n 1981              var test = document.createElement('li');\n 1982              var strong = document.createElement('strong');\n 1983:             strong.innerHTML = name + ' <b style=\"color: black;\">(' +\n 1984                  '<b class=\"fail\">' + assertions.failures() + '</b>, ' +\n 1985                  '<b class=\"pass\">' + assertions.passes() + '</b>, ' +\n 1986                  assertions.length +\n 1987              ')</b>';\n 1988:             test.className = assertions.failures() ? 'fail': 'pass';\n 1989              test.appendChild(strong);\n 1990  \n ....\n 2001                      li.innerHTML = (a.message || a.method || 'no message') +\n 2002                          '<pre>' + (a.error.stack || a.error) + '</pre>';\n 2003:                     li.className = 'fail';\n 2004                  }\n 2005                  else {\n 2006                      li.innerHTML = a.message || a.method || 'no message';\n 2007:                     li.className = 'pass';\n 2008                  }\n 2009                  aList.appendChild(li);\n ....\n 2017  \n 2018              var failures = assertions.failures();\n 2019:             banner.className = failures ? 'fail': 'pass';\n 2020  \n 2021              result.innerHTML = 'Tests completed in ' + duration +\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/bson/test/node/bson_array_test.js:\n   93     return date;\n   94   } else\n   95:    throw new Error(\"Invalid ISO 8601 date given.\", __filename);\n   96  };\n   97  \n   ..\n  138  //     'long': Long.fromNumber(100),\n  139  //     'where': new Code('this.a > i', {i:1}),        \n  140: //     'dbref': new DBRef('namespace', new ObjectID(), 'integration_tests_'),\n  141  //     'minkey': new MinKey(),\n  142  //     'maxkey': new MaxKey()    \n  ...\n  171  //   test.deepEqual(motherOfAllDocuments.where, object.where);\n  172  //   test.deepEqual(motherOfAllDocuments.dbref.oid.toHexString(), object.dbref.oid.toHexString());\n  173: //   test.deepEqual(motherOfAllDocuments.dbref.namespace, object.dbref.namespace);\n  174  //   test.deepEqual(motherOfAllDocuments.dbref.db, object.dbref.db);\n  175  //   test.deepEqual(motherOfAllDocuments.minkey, object.minkey);\n  ...\n  195      'long': Long.fromNumber(100),\n  196      'where': new Code('this.a > i', {i:1}),        \n  197:     'dbref': new DBRef('namespace', new ObjectID(), 'integration_tests_'),\n  198      'minkey': new MinKey(),\n  199      'maxkey': new MaxKey()    \n  ...\n  221    test.deepEqual(motherOfAllDocuments.where, object.where);\n  222    test.deepEqual(motherOfAllDocuments.dbref.oid.toHexString(), object.dbref.oid.toHexString());\n  223:   test.deepEqual(motherOfAllDocuments.dbref.namespace, object.dbref.namespace);\n  224    test.deepEqual(motherOfAllDocuments.dbref.db, object.dbref.db);\n  225    test.deepEqual(motherOfAllDocuments.minkey, object.minkey);\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/bson/test/node/bson_parser_comparision_test.js:\n  270    var oid = new ObjectID()\n  271    var oid2 = new ObjectID.createFromHexString(oid.toHexString())\n  272:   var simple_string_serialized = bsonJS.serialize({doc:new DBRef('namespace', oid2, 'integration_tests_')}, false, true);\n  273:   var simple_string_serialized_2 = bsonC.serialize({doc:new DBRef('namespace', oid, 'integration_tests_')}, false, true);\n  274  \n  275    assert.deepEqual(simple_string_serialized, simple_string_serialized_2)\n  ...\n  278    var object_c = bsonC.deserialize(simple_string_serialized);\n  279  \n  280:   assert.equal(object_js.doc.namespace, object_c.doc.namespace);\n  281    assert.equal(object_js.doc.oid.toHexString(), object_c.doc.oid.toHexString());\n  282    assert.equal(object_js.doc.db, object_c.doc.db);\n  ...\n  296    }\n  297    var object = bsonC.deserialize(new Buffer(serialized_data, 'binary'));\n  298:   assert.equal('Patty', object.name)\n  299    assert.equal(34, object.age)\n  300    assert.equal('4c640c170b1e270859000001', object._id.toHexString())\n  ...\n  306   */\n  307  exports['Serialize utf8'] = function(test) {\n  308:   var doc = { \"name\" : \"本荘由利地域に洪水警報\", \"name1\" : \"öüóőúéáűíÖÜÓŐÚÉÁŰÍ\", \"name2\" : \"abcdedede\"};\n  309    var simple_string_serialized = bsonC.serialize(doc, false, true);\n  310    var simple_string_serialized2 = bsonJS.serialize(doc, false, true);\n  ...\n  312  \n  313    var object = bsonC.deserialize(simple_string_serialized);\n  314:   assert.equal(doc.name, object.name)\n  315:   assert.equal(doc.name1, object.name1)\n  316:   assert.equal(doc.name2, object.name2)\n  317    test.done();\n  318  }\n  ...\n  464  exports['Serialize big complex document'] = function(test) {\n  465    // Complex document serialization\n  466:   var doc = {\"DateTime\": \"Tue Nov 40 2011 17:27:55 GMT+0000 (WEST)\",\"isActive\": true,\"Media\": {\"URL\": \"http://videos.sapo.pt/Tc85NsjaKjj8o5aV7Ubb\"},\"Title\": \"Lisboa fecha a ganhar 0.19%\",\"SetPosition\": 60,\"Type\": \"videos\",\"Thumbnail\": [{\"URL\": \"http://rd3.videos.sapo.pt/Tc85NsjaKjj8o5aV7Ubb/pic/320x240\",\"Dimensions\": {\"Height\": 240,\"Width\": 320}}],\"Source\": {\"URL\": \"http://videos.sapo.pt\",\"SetID\": \"1288\",\"SourceID\": \"http://videos.sapo.pt/tvnet/rss2\",\"SetURL\": \"http://noticias.sapo.pt/videos/tv-net_1288/\",\"ItemID\": \"Tc85NsjaKjj8o5aV7Ubb\",\"Name\": \"SAPO VÃ­deos\"},\"Category\": \"Tec_ciencia\",\"Description\": \"Lisboa fecha a ganhar 0.19%\",\"GalleryID\": new ObjectID(\"4eea2a634ce8573200000000\"),\"InternalRefs\": {\"RegisterDate\": \"Thu Dec 15 2011 17:12:51 GMT+0000 (WEST)\",\"ChangeDate\": \"Thu Dec 15 2011 17:12:51 GMT+0000 (WEST)\",\"Hash\": 332279244514},\"_id\": new ObjectID(\"4eea2a96e52778160000003a\")}\n  467    var docJSBin = bsonJS.serialize(doc, false, true, true);\n  468    var docCBin = bsonC.serialize(doc, false, true, true);\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/bson/test/node/bson_test.js:\n   92  		return date;\n   93  	} else\n   94: 		throw new Error(\"Invalid ISO 8601 date given.\", __filename);\n   95  };\n   96  \n   ..\n  157  \n  158    var object = new BSONDE.BSON([Long, ObjectID, Binary, Code, DBRef, Symbol, Double, Timestamp, MaxKey, MinKey]).deserialize(new Buffer(serialized_data, 'binary'));\n  159:   test.equal(\"a_1\", object.name);\n  160    test.equal(false, object.unique);\n  161    test.equal(1, object.key.a);\n  ...\n  309   */\n  310  exports['Should Correctly Serialize and Deserialize Object'] = function(test) {\n  311:   var doc = {doc: {age: 42, name: 'Spongebob', shoe_size: 9.5}};\n  312    var serialized_data = new BSONSE.BSON([Long, ObjectID, Binary, Code, DBRef, Symbol, Double, Timestamp, MaxKey, MinKey]).serialize(doc, false, true);\n  313  \n  ...\n  317  \n  318    test.deepEqual(doc.doc.age, new BSONDE.BSON([Long, ObjectID, Binary, Code, DBRef, Symbol, Double, Timestamp, MaxKey, MinKey]).deserialize(serialized_data).doc.age);\n  319:   test.deepEqual(doc.doc.name, new BSONDE.BSON([Long, ObjectID, Binary, Code, DBRef, Symbol, Double, Timestamp, MaxKey, MinKey]).deserialize(serialized_data).doc.name);\n  320    test.deepEqual(doc.doc.shoe_size, new BSONDE.BSON([Long, ObjectID, Binary, Code, DBRef, Symbol, Double, Timestamp, MaxKey, MinKey]).deserialize(serialized_data).doc.shoe_size);\n  321    test.done();        \n  ...\n  516    var keys = [];\n  517  \n  518:   for(var name in decoded_hash) keys.push(name);\n  519    test.deepEqual(['b', 'a', 'c', 'd'], keys);\n  520    test.done();        \n  ...\n  609  exports[\"Should Correctly Serialize and Deserialize DBRef\"] = function(test) {\n  610    var oid = new ObjectID();\n  611:   var doc = {dbref: new DBRef('namespace', oid, null)};\n  612    var serialized_data = new BSONSE.BSON([Long, ObjectID, Binary, Code, DBRef, Symbol, Double, Timestamp, MaxKey, MinKey]).serialize(doc, false, true);\n  613  \n  ...\n  617  \n  618    var doc2 = new BSONDE.BSON([Long, ObjectID, Binary, Code, DBRef, Symbol, Double, Timestamp, MaxKey, MinKey]).deserialize(serialized_data);    \n  619:   test.equal(\"namespace\", doc2.dbref.namespace);\n  620    test.deepEqual(doc2.dbref.oid.toHexString(), oid.toHexString());\n  621    test.done();        \n  ...\n  627  exports['Should Correctly Serialize and Deserialize partial DBRef'] = function(test) {\n  628    var id = new ObjectID();\n  629:   var doc = {'name':'something', 'user':{'$ref':'username', '$id': id}};\n  630    var serialized_data = new BSONSE.BSON([Long, ObjectID, Binary, Code, DBRef, Symbol, Double, Timestamp, MaxKey, MinKey]).serialize(doc, false, true);\n  631  \n  ...\n  635  \n  636    var doc2 = new BSONDE.BSON([Long, ObjectID, Binary, Code, DBRef, Symbol, Double, Timestamp, MaxKey, MinKey]).deserialize(serialized_data);\n  637:   test.equal('something', doc2.name);\n  638:   test.equal('username', doc2.user.namespace);\n  639    test.equal(id.toString(), doc2.user.oid.toString());\n  640    test.done();                \n  ...\n  750    var keys = [];\n  751  \n  752:   for(var name in deserialized_data.doc) {\n  753:     keys.push(name);\n  754    }\n  755    \n  ...\n  823  exports['Should Correctly Serialize and Deserialize UTF8'] = function(test) {\n  824    // Serialize utf8\n  825:   var doc = { \"name\" : \"本荘由利地域に洪水警報\", \"name1\" : \"öüóőúéáűíÖÜÓŐÚÉÁŰÍ\", \"name2\" : \"abcdedede\"};\n  826    var serialized_data = new BSONSE.BSON([Long, ObjectID, Binary, Code, DBRef, Symbol, Double, Timestamp, MaxKey, MinKey]).serialize(doc, false, true);\n  827  \n  ...\n  947      'long': date.getTime(),\n  948      'where': new Code('this.a > i', {i:1}),\n  949:     'dbref': new DBRef('namespace', oid, 'integration_tests_')\n  950    }\n  951  \n  ...\n  971      'long': date.getTime(),\n  972      'where': new Code('this.a > i', {i:1}),\n  973:     'dbref': new DBRef('namespace', oid, 'integration_tests_')\n  974    }\n  975  \n  ...\n  998             '4dc77b24c5ba38be14000002' ],\n  999          location: [ 72.4930088, 23.0431957 ],\n 1000:         name: 'Amit Kumar',\n 1001          password_salt: 'salty',\n 1002          profile_fields: [],\n 1003:         username: 'amit',\n 1004          _id: new ObjectID() }\n 1005          \n ....\n 1029  \n 1030    // JS doc\n 1031:   var doc = { dbref2: new DBRef('namespace', oid1, 'integration_tests_'),\n 1032         _id: oid2 };\n 1033  \n 1034:   var doc2 = { dbref2: new DBRef('namespace', ObjectID.createFromHexString(oid1.toHexString()), 'integration_tests_'),\n 1035        _id: new ObjectID.createFromHexString(oid2.toHexString()) };\n 1036  \n ....\n 1136   * @ignore\n 1137   */\n 1138: exports['Should Correctly Serialize empty name object'] = function(test) {\n 1139    var doc = {'':'test',\n 1140      'bbbb':1};\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/bson/test/node/test_full_bson.js:\n   54  \n   55    var object = bsonC.deserialize(serialized_data);\n   56:   assert.equal(\"a_1\", object.name);\n   57    assert.equal(false, object.unique);\n   58    assert.equal(1, object.key.a);\n   ..\n  167   */\n  168  exports['Should Correctly Serialize and Deserialize Object'] = function(test) {\n  169:   var doc = {doc: {age: 42, name: 'Spongebob', shoe_size: 9.5}}\n  170    var serialized_data = bsonC.serialize(doc)\n  171    assert.deepEqual(doc, bsonC.deserialize(serialized_data));\n  ...\n  260    var decoded_hash = bsonC.deserialize(serialized_data).doc\n  261    var keys = []\n  262:   for(var name in decoded_hash) keys.push(name)\n  263    assert.deepEqual(['b', 'a', 'c', 'd'], keys)\n  264    test.done();\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/bson/tools/jasmine-1.1.0/jasmine-html.js:\n   19  \n   20    for (var attr in attrs) {\n   21:     if (attr == \"className\") {\n   22        el[attr] = attrs[attr];\n   23      } else {\n   ..\n   32    var showPassed, showSkipped;\n   33  \n   34:   this.outerDiv = this.createDom('div', { className: 'jasmine_reporter' },\n   35:       this.createDom('div', { className: 'banner' },\n   36:         this.createDom('div', { className: 'logo' },\n   37:             this.createDom('span', { className: 'title' }, \"Jasmine\"),\n   38:             this.createDom('span', { className: 'version' }, runner.env.versionString())),\n   39:         this.createDom('div', { className: 'options' },\n   40              \"Show \",\n   41              showPassed = this.createDom('input', { id: \"__jasmine_TrivialReporter_showPassed__\", type: 'checkbox' }),\n   ..\n   46            ),\n   47  \n   48:       this.runnerDiv = this.createDom('div', { className: 'runner running' },\n   49:           this.createDom('a', { className: 'run_spec', href: '?' }, \"run all\"),\n   50            this.runnerMessageSpan = this.createDom('span', {}, \"Running...\"),\n   51:           this.finishedAtSpan = this.createDom('span', { className: 'finished-at' }, \"\"))\n   52        );\n   53  \n   ..\n   57    for (var i = 0; i < suites.length; i++) {\n   58      var suite = suites[i];\n   59:     var suiteDiv = this.createDom('div', { className: 'suite' },\n   60:         this.createDom('a', { className: 'run_spec', href: '?spec=' + encodeURIComponent(suite.getFullName()) }, \"run\"),\n   61:         this.createDom('a', { className: 'description', href: '?spec=' + encodeURIComponent(suite.getFullName()) }, suite.description));\n   62      this.suiteDivs[suite.id] = suiteDiv;\n   63      var parentDiv = this.outerDiv;\n   ..\n   73    showPassed.onclick = function(evt) {\n   74      if (showPassed.checked) {\n   75:       self.outerDiv.className += ' show-passed';\n   76      } else {\n   77:       self.outerDiv.className = self.outerDiv.className.replace(/ show-passed/, '');\n   78      }\n   79    };\n   ..\n   81    showSkipped.onclick = function(evt) {\n   82      if (showSkipped.checked) {\n   83:       self.outerDiv.className += ' show-skipped';\n   84      } else {\n   85:       self.outerDiv.className = self.outerDiv.className.replace(/ show-skipped/, '');\n   86      }\n   87    };\n   ..\n   90  jasmine.TrivialReporter.prototype.reportRunnerResults = function(runner) {\n   91    var results = runner.results();\n   92:   var className = (results.failedCount > 0) ? \"runner failed\" : \"runner passed\";\n   93:   this.runnerDiv.setAttribute(\"class\", className);\n   94    //do it twice for IE\n   95:   this.runnerDiv.setAttribute(\"className\", className);\n   96    var specs = runner.specs();\n   97    var specCount = 0;\n   ..\n  103    var message = \"\" + specCount + \" spec\" + (specCount == 1 ? \"\" : \"s\" ) + \", \" + results.failedCount + \" failure\" + ((results.failedCount == 1) ? \"\" : \"s\");\n  104    message += \" in \" + ((new Date().getTime() - this.startedAt.getTime()) / 1000) + \"s\";\n  105:   this.runnerMessageSpan.replaceChild(this.createDom('a', { className: 'description', href: '?'}, message), this.runnerMessageSpan.firstChild);\n  106  \n  107    this.finishedAtSpan.appendChild(document.createTextNode(\"Finished at \" + new Date().toString()));\n  ...\n  114      status = 'skipped';\n  115    }\n  116:   this.suiteDivs[suite.id].className += \" \" + status;\n  117  };\n  118  \n  ...\n  129      status = 'skipped';\n  130    }\n  131:   var specDiv = this.createDom('div', { className: 'spec '  + status },\n  132:       this.createDom('a', { className: 'run_spec', href: '?spec=' + encodeURIComponent(spec.getFullName()) }, \"run\"),\n  133        this.createDom('a', {\n  134:         className: 'description',\n  135:         href: '?spec=' + encodeURIComponent(spec.getFullName()),\n  136:         title: spec.getFullName()\n  137        }, spec.description));\n  138  \n  139  \n  140    var resultItems = results.getItems();\n  141:   var messagesDiv = this.createDom('div', { className: 'messages' });\n  142    for (var i = 0; i < resultItems.length; i++) {\n  143      var result = resultItems[i];\n  144  \n  145      if (result.type == 'log') {\n  146:       messagesDiv.appendChild(this.createDom('div', {className: 'resultMessage log'}, result.toString()));\n  147      } else if (result.type == 'expect' && result.passed && !result.passed()) {\n  148:       messagesDiv.appendChild(this.createDom('div', {className: 'resultMessage fail'}, result.message));\n  149  \n  150        if (result.trace.stack) {\n  151:         messagesDiv.appendChild(this.createDom('div', {className: 'stackTrace'}, result.trace.stack));\n  152        }\n  153      }\n  ...\n  187      return true;\n  188    }\n  189:   return spec.getFullName().indexOf(paramMap.spec) === 0;\n  190  };\n  191  \n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/bson/tools/jasmine-1.1.0/jasmine.js:\n    2  \n    3  /**\n    4:  * Top level namespace for Jasmine, a lightweight JavaScript BDD/spec/testing framework.\n    5   *\n    6:  * @namespace\n    7   */\n    8  var jasmine = {};\n    .\n   54   * @private\n   55   * @param base {Object} bound 'this' for the function\n   56:  * @param name {Function} function to find\n   57   */\n   58: jasmine.bindOriginal_ = function(base, name) {\n   59:   var original = base[name];\n   60    if (original.apply) {\n   61      return function() {\n   ..\n   64    } else {\n   65      // IE support\n   66:     return jasmine.getGlobal()[name];\n   67    }\n   68  };\n   ..\n   94  jasmine.ExpectationResult = function(params) {\n   95    this.type = 'expect';\n   96:   this.matcherName = params.matcherName;\n   97    this.passed_ = params.passed;\n   98    this.expected = params.expected;\n   ..\n  153   * @ignore\n  154   * @private\n  155:  * @param {String} typeName\n  156   * @param value\n  157   * @returns {Boolean}\n  158   */\n  159: jasmine.isA_ = function(typeName, value) {\n  160:   return Object.prototype.toString.apply(value) === '[object ' + typeName + ']';\n  161  };\n  162  \n  ...\n  239   * @constructor\n  240   * @see spyOn, jasmine.createSpy, jasmine.createSpyObj\n  241:  * @param {String} name\n  242   */\n  243: jasmine.Spy = function(name) {\n  244    /**\n  245:    * The name of the spy, if provided.\n  246     */\n  247:   this.identity = name || 'unknown';\n  248    /**\n  249     *  Is this Object a spy?\n  ...\n  374  };\n  375  \n  376: jasmine.createSpy = function(name) {\n  377  \n  378    var spyObj = function() {\n  ...\n  387    };\n  388  \n  389:   var spy = new jasmine.Spy(name);\n  390  \n  391    for (var prop in spy) {\n  ...\n  412   * large in one call.\n  413   *\n  414:  * @param {String} baseName name of spy class\n  415:  * @param {Array} methodNames array of names of methods to make spies\n  416   */\n  417: jasmine.createSpyObj = function(baseName, methodNames) {\n  418:   if (!jasmine.isArray_(methodNames) || methodNames.length === 0) {\n  419:     throw new Error('createSpyObj requires a non-empty array of method names to create spies for');\n  420    }\n  421    var obj = {};\n  422:   for (var i = 0; i < methodNames.length; i++) {\n  423:     obj[methodNames[i]] = jasmine.createSpy(baseName + '.' + methodNames[i]);\n  424    }\n  425    return obj;\n  ...\n  437  \n  438  /**\n  439:  * Function that installs a spy on an existing object's method name.  Used within a Spec to create a spy.\n  440   *\n  441   * @example\n  ...\n  448   * @see jasmine.createSpy\n  449   * @param obj\n  450:  * @param methodName\n  451   * @returns a Jasmine spy that can be chained with all spy methods\n  452   */\n  453: var spyOn = function(obj, methodName) {\n  454:   return jasmine.getEnv().currentSpec.spyOn(obj, methodName);\n  455  };\n  456  if (isCommonJS) exports.spyOn = spyOn;\n  ...\n  617  } : XMLHttpRequest;\n  618  /**\n  619:  * @namespace\n  620   */\n  621  jasmine.util = {};\n  ...\n  652      file = e.sourceURL;\n  653    }\n  654:   else if (e.fileName) {\n  655:     file = e.fileName;\n  656    }\n  657  \n  658:   var message = (e.name && e.message) ? (e.name + ': ' + e.message) : e.toString();\n  659  \n  660    if (file && lineNumber) {\n  ...\n  861    b.__Jasmine_been_here_before__ = a;\n  862  \n  863:   var hasKey = function(obj, keyName) {\n  864:     return obj !== null && obj[keyName] !== jasmine.undefined;\n  865    };\n  866  \n  ...\n 1033    var summary = {\n 1034      id: suiteOrSpec.id,\n 1035:     name: suiteOrSpec.description,\n 1036      type: isSuite ? 'suite' : 'spec',\n 1037      children: []\n ....\n 1132  \n 1133  jasmine.Matchers.wrapInto_ = function(prototype, matchersClass) {\n 1134:   for (var methodName in prototype) {\n 1135:     if (methodName == 'report') continue;\n 1136:     var orig = prototype[methodName];\n 1137:     matchersClass.prototype[methodName] = jasmine.Matchers.matcherFn_(methodName, orig);\n 1138    }\n 1139  };\n 1140  \n 1141: jasmine.Matchers.matcherFn_ = function(matcherName, matcherFunction) {\n 1142    return function() {\n 1143      var matcherArgs = jasmine.util.argsToArray(arguments);\n ....\n 1158          }\n 1159        } else {\n 1160:         var englishyPredicate = matcherName.replace(/[A-Z]/g, function(s) { return ' ' + s.toLowerCase(); });\n 1161          message = \"Expected \" + jasmine.pp(this.actual) + (this.isNot ? \" not \" : \" \") + englishyPredicate;\n 1162          if (matcherArgs.length > 0) {\n ....\n 1170      }\n 1171      var expectationResult = new jasmine.ExpectationResult({\n 1172:       matcherName: matcherName,\n 1173        passed: result,\n 1174        expected: matcherArgs.length > 1 ? matcherArgs : matcherArgs[0],\n ....\n 1491  \n 1492  (function() {\n 1493:   var functionNames = [\n 1494      \"reportRunnerStarting\",\n 1495      \"reportRunnerResults\",\n ....\n 1499      \"log\"\n 1500    ];\n 1501:   for (var i = 0; i < functionNames.length; i++) {\n 1502:     var functionName = functionNames[i];\n 1503:     jasmine.MultiReporter.prototype[functionName] = (function(functionName) {\n 1504        return function() {\n 1505          for (var j = 0; j < this.subReporters_.length; j++) {\n 1506            var subReporter = this.subReporters_[j];\n 1507:           if (subReporter[functionName]) {\n 1508:             subReporter[functionName].apply(subReporter, arguments);\n 1509            }\n 1510          }\n 1511        };\n 1512:     })(functionName);\n 1513    }\n 1514  })();\n ....\n 1841  \n 1842  jasmine.Runner.prototype.beforeEach = function(beforeEachFunction) {\n 1843:   beforeEachFunction.typeName = 'beforeEach';\n 1844    this.before_.splice(0,0,beforeEachFunction);\n 1845  };\n 1846  \n 1847  jasmine.Runner.prototype.afterEach = function(afterEachFunction) {\n 1848:   afterEachFunction.typeName = 'afterEach';\n 1849    this.after_.splice(0,0,afterEachFunction);\n 1850  };\n ....\n 1922  };\n 1923  \n 1924: jasmine.Spec.prototype.getFullName = function() {\n 1925:   return this.suite.getFullName() + ' ' + this.description + '.';\n 1926  };\n 1927  \n ....\n 2102  };\n 2103  \n 2104: jasmine.Spec.prototype.spyOn = function(obj, methodName, ignoreMethodDoesntExist) {\n 2105    if (obj == jasmine.undefined) {\n 2106:     throw \"spyOn could not find an object to spy upon for \" + methodName + \"()\";\n 2107    }\n 2108  \n 2109:   if (!ignoreMethodDoesntExist && obj[methodName] === jasmine.undefined) {\n 2110:     throw methodName + '() method does not exist';\n 2111    }\n 2112  \n 2113:   if (!ignoreMethodDoesntExist && obj[methodName] && obj[methodName].isSpy) {\n 2114:     throw new Error(methodName + ' has already been spied upon');\n 2115    }\n 2116  \n 2117:   var spyObj = jasmine.createSpy(methodName);\n 2118  \n 2119    this.spies_.push(spyObj);\n 2120    spyObj.baseObj = obj;\n 2121:   spyObj.methodName = methodName;\n 2122:   spyObj.originalValue = obj[methodName];\n 2123  \n 2124:   obj[methodName] = spyObj;\n 2125  \n 2126    return spyObj;\n ....\n 2130    for (var i = 0; i < this.spies_.length; i++) {\n 2131      var spy = this.spies_[i];\n 2132:     spy.baseObj[spy.methodName] = spy.originalValue;\n 2133    }\n 2134    this.spies_ = [];\n ....\n 2158  };\n 2159  \n 2160: jasmine.Suite.prototype.getFullName = function() {\n 2161:   var fullName = this.description;\n 2162    for (var parentSuite = this.parentSuite; parentSuite; parentSuite = parentSuite.parentSuite) {\n 2163:     fullName = parentSuite.description + ' ' + fullName;\n 2164    }\n 2165:   return fullName;\n 2166  };\n 2167  \n ....\n 2175  \n 2176  jasmine.Suite.prototype.beforeEach = function(beforeEachFunction) {\n 2177:   beforeEachFunction.typeName = 'beforeEach';\n 2178    this.before_.unshift(beforeEachFunction);\n 2179  };\n 2180  \n 2181  jasmine.Suite.prototype.afterEach = function(afterEachFunction) {\n 2182:   afterEachFunction.typeName = 'afterEach';\n 2183    this.after_.unshift(afterEachFunction);\n 2184  };\n ....\n 2272      var message = 'timed out after ' + this.timeout + ' msec waiting for ' + (this.message || 'something to happen');\n 2273      this.spec.fail({\n 2274:       name: 'timeout',\n 2275        message: message\n 2276      });\n ....\n 2374  \n 2375  /**\n 2376:  * @namespace\n 2377   */\n 2378  jasmine.Clock = {\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/kerberos/binding.gyp:\n    2    'targets': [\n    3      {\n    4:       'target_name': 'kerberos',      \n    5        'cflags!': [ '-fno-exceptions' ],\n    6        'cflags_cc!': [ '-fno-exceptions' ],\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/kerberos/build/binding.Makefile:\n    1  # This file is generated by gyp; do not edit.\n    2  \n    3: export builddir_name ?= build/./.\n    4  .PHONY: all\n    5  all:\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/kerberos/build/config.gypi:\n   75      \"global\": \"\",\n   76      \"optional\": \"true\",\n   77:     \"username\": \"\",\n   78      \"bin_links\": \"true\",\n   79      \"force\": \"\",\n   ..\n   81      \"depth\": \"null\",\n   82      \"rebuild_bundle\": \"true\",\n   83:     \"searchsort\": \"name\",\n   84      \"unicode\": \"true\",\n   85      \"yes\": \"\",\n   ..\n  103      \"umask\": \"18\",\n  104      \"git\": \"git\",\n  105:     \"init_author_name\": \"\",\n  106      \"onload_script\": \"\",\n  107      \"tmp\": \"/var/folders/2m/0dk3bcjj74zfhxy8167mpzcc0000gn/T/\",\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/kerberos/build/gyp-mac-tool:\n   36        raise Exception(\"Not enough arguments\")\n   37  \n   38:     method = \"Exec%s\" % self._CommandifyName(args[0])\n   39      return getattr(self, method)(*args[1:])\n   40  \n   41:   def _CommandifyName(self, name_string):\n   42:     \"\"\"Transforms a tool name like copy-info-plist to CopyInfoPlist\"\"\"\n   43:     return name_string.title().replace('-', '')\n   44  \n   45    def ExecCopyBundleResource(self, source, dest):\n   ..\n   88      fp.close()\n   89  \n   90:   def _DetectInputEncoding(self, file_name):\n   91:     \"\"\"Reads the first few bytes from file_name and tries to guess the text\n   92      encoding. Returns None as a guess if it can't detect it.\"\"\"\n   93:     fp = open(file_name, 'rb')\n   94      try:\n   95        header = fp.read(3)\n   ..\n  149        signature_code = '?' * 4\n  150  \n  151:     dest = os.path.join(os.path.dirname(info_plist), 'PkgInfo')\n  152      fp = open(dest, 'w')\n  153      fp.write('%s%s' % (package_type, signature_code))\n  ...\n  174      \"\"\"Takes a path to Something.framework and the Current version of that and\n  175      sets up all the symlinks.\"\"\"\n  176:     # Find the name of the binary based on the part before the \".framework\".\n  177:     binary = os.path.basename(framework).split('.')[0]\n  178  \n  179      CURRENT = 'Current'\n  ...\n  201  \n  202    def _Relink(self, dest, link):\n  203:     \"\"\"Creates a symlink to |dest| named |link|. If |link| already exists,\n  204      it is overwritten.\"\"\"\n  205      if os.path.lexists(link):\n  ...\n  208  \n  209  \n  210: if __name__ == '__main__':\n  211    sys.exit(main(sys.argv[1:]))\n  212  \n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/kerberos/build/kerberos.target.mk:\n  130  	-arch x86_64 \\\n  131  	-L$(builddir) \\\n  132: 	-install_name @rpath/kerberos.node\n  133  \n  134  LIBTOOLFLAGS_Debug := \\\n  ...\n  140  	-arch x86_64 \\\n  141  	-L$(builddir) \\\n  142: 	-install_name @rpath/kerberos.node\n  143  \n  144  LIBTOOLFLAGS_Release := \\\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/kerberos/build/Makefile:\n   11  abs_srcdir := $(abspath $(srcdir))\n   12  \n   13: # The name of the builddir.\n   14: builddir_name ?= .\n   15  \n   16  # The V=1 flag on command line makes us verbosely print command lines.\n   ..\n   27  # Note that this must be two directories beneath src/ for unit tests to pass,\n   28  # as they reach into the src/ directory for data with relative paths.\n   29: builddir ?= $(builddir_name)/$(BUILDTYPE)\n   30  abs_builddir := $(abspath $(builddir))\n   31  depsdir := $(builddir)/.deps\n   ..\n   84  # Flags to make gcc output dependency info.  Note that you need to be\n   85  # careful here to use the flags that ccache and distcc can understand.\n   86: # We write to a dep file on the side first and then rename at the end\n   87  # so we can't end up with a broken dep file.\n   88  depfile = $(depsdir)/$(call replace_spaces,$@).d\n   ..\n  108  # and dollar signs past make, the shell, and sed at the same time.\n  109  # Doesn't work with spaces, but that's fine: .d files have spaces in\n  110: # their names replaced with other characters.\n  111  define fixup_dep\n  112  # The depfile may not exist if the input file didn't have any #includes.\n  ...\n  240  endef\n  241  \n  242: # do_cmd: run a command via the above cmd_foo names, if necessary.\n  243  # Should always run for a given target to handle command-line changes.\n  244  # Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/kerberos/build/Release/.deps/Release/kerberos.node.d:\n    1: cmd_Release/kerberos.node := ./gyp-mac-tool flock ./Release/linker.lock c++ -shared -Wl,-search_paths_first -mmacosx-version-min=10.5 -arch x86_64 -L./Release -install_name @rpath/kerberos.node  -o Release/kerberos.node Release/obj.target/kerberos/lib/kerberos.o Release/obj.target/kerberos/lib/worker.o Release/obj.target/kerberos/lib/kerberosgss.o Release/obj.target/kerberos/lib/base64.o Release/obj.target/kerberos/lib/kerberos_context.o -undefined dynamic_lookup -lkrb5\n    2  \n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/kerberos/lib/auth_processes/mongodb.js:\n   10  }\n   11  \n   12: MongoAuthProcess.prototype.init = function(username, password, callback) {\n   13:   this._processor.init(username, password, callback);\n   14  }\n   15  \n   ..\n   36  }\n   37  \n   38: Win32MongoProcessor.prototype.init = function(username, password, callback) {\n   39    var self = this;\n   40    // Save the values used later\n   41:   this.username = username;\n   42    this.password = password;\n   43    // Aquire credentials\n   44:   this.ssip.SecurityCredentials.aquire_kerberos(username, password, function(err, security_credentials) {\n   45      if(err) return callback(err);\n   46      // Save credentials\n   ..\n  139  \n  140        var length = 4;\n  141:       if(self.username != null) {\n  142:         length += self.username.length;          \n  143        }\n  144  \n  ...\n  149        bytesReceivedFromServer[3] = 0x00;  // NO_PROTECTION        \n  150  \n  151:       if(self.username != null) {\n  152:         var authorization_id_bytes = new Buffer(self.username, 'utf8');\n  153          authorization_id_bytes.copy(bytesReceivedFromServer, 4, 0);\n  154        }\n  ...\n  193  }\n  194  \n  195: UnixMongoProcessor.prototype.init = function(username, password, callback) {\n  196    var self = this;\n  197:   this.username = username;\n  198    this.password = password;\n  199    // Call client initiate\n  ...\n  251        \n  252        // Wrap the response\n  253:       self.kerberos.authGSSClientWrap(self.context, self.context.response, self.username, function(err, result) {\n  254          if(err) return callback(err, false);\n  255          // Set up the next step\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/kerberos/lib/kerberos.cc:\n   29    KerberosContext *context;\n   30    char *challenge;\n   31:   char *user_name;\n   32  } AuthGSSClientWrapCall;\n   33  \n   ..\n   52    constructor_template = Persistent<FunctionTemplate>::New(t);\n   53    constructor_template->InstanceTemplate()->SetInternalFieldCount(1);\n   54:   constructor_template->SetClassName(String::NewSymbol(\"Kerberos\"));\n   55  \n   56    // Set up method for the Kerberos instance\n   ..\n  338  static void _authGSSClientWrap(Worker *worker) {\n  339    gss_client_response *response;\n  340:   char *user_name = NULL;\n  341  \n  342    // Unpack the parameter data struct\n  343    AuthGSSClientWrapCall *call = (AuthGSSClientWrapCall *)worker->parameters;\n  344:   user_name = call->user_name;  \n  345  \n  346    // Check what kind of challenge we have\n  347:   if(call->user_name == NULL) {\n  348:     user_name = (char *)\"\";\n  349    }\n  350  \n  351    // Perform authentication step\n  352:   response = authenticate_gss_client_wrap(call->context->state, call->challenge, user_name);\n  353  \n  354    // If we have an error mark worker as having had an error\n  ...\n  363    // Free up structure\n  364    if(call->challenge != NULL) free(call->challenge);\n  365:   if(call->user_name != NULL) free(call->user_name);\n  366    free(call);\n  367    free(response);\n  ...\n  379  \n  380    // Ensure valid call\n  381:   if(args.Length() != 3 && args.Length() != 4) return VException(\"Requires a GSS context, the result from the authGSSClientResponse after authGSSClientUnwrap, optional user name and callback function\");\n  382:   if(args.Length() == 3 && !KerberosContext::HasInstance(args[0]) && !args[1]->IsString() && !args[2]->IsFunction()) return VException(\"Requires a GSS context, the result from the authGSSClientResponse after authGSSClientUnwrap, optional user name and callback function\");\n  383:   if(args.Length() == 4 && !KerberosContext::HasInstance(args[0]) && !args[1]->IsString() && !args[2]->IsString() && !args[2]->IsFunction()) return VException(\"Requires a GSS context, the result from the authGSSClientResponse after authGSSClientUnwrap, optional user name and callback function\");\n  384  \n  385    // Challenge string\n  386    char *challenge_str = NULL;\n  387:   char *user_name_str = NULL;\n  388    \n  389    // Let's unpack the kerberos context\n  ...\n  400    // If we have a user string\n  401    if(args.Length() == 4) {\n  402:     // Unpack user name\n  403:     Local<String> user_name = args[2]->ToString();\n  404      // Convert uri string to c-string\n  405:     user_name_str = (char *)calloc(user_name->Utf8Length() + 1, sizeof(char));\n  406      // Write v8 string to c-string\n  407:     user_name->WriteUtf8(user_name_str);\n  408    }\n  409  \n  ...\n  412    call->context = kerberos_context;\n  413    call->challenge = challenge_str;\n  414:   call->user_name = user_name_str;\n  415  \n  416    // Unpack the callback\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/kerberos/lib/kerberos.h:\n   14  }\n   15  \n   16: using namespace v8;\n   17: using namespace node;\n   18  \n   19  class Kerberos : public ObjectWrap {\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/kerberos/lib/kerberos.js:\n   28  }\n   29  \n   30: Kerberos.prototype.authGSSClientWrap = function(context, challenge, user_name, callback) {\n   31:   if(typeof user_name == 'function') {\n   32:     callback = user_name;\n   33:     user_name = '';\n   34    }\n   35  \n   36:   return this._native_kerberos.authGSSClientWrap(context, challenge, user_name, callback);\n   37  }\n   38  \n   ..\n   41  }\n   42  \n   43: Kerberos.prototype.acquireAlternateCredentials = function(user_name, password, domain) {\n   44:   return this._native_kerberos.acquireAlternateCredentials(user_name, password, domain); \n   45  }\n   46  \n   ..\n   82  // If we have SSPI (windows)\n   83  if(kerberos.SecurityCredentials) {\n   84:   // Put all SSPI classes in it's own namespace\n   85    exports.SSIP = {\n   86        SecurityCredentials: require('./win32/wrappers/security_credentials').SecurityCredentials\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/kerberos/lib/kerberos_context.cc:\n   37    constructor_template = Persistent<FunctionTemplate>::New(t);\n   38    constructor_template->InstanceTemplate()->SetInternalFieldCount(1);\n   39:   constructor_template->SetClassName(String::NewSymbol(\"KerberosContext\"));\n   40  \n   41    // Property symbols\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/kerberos/lib/kerberos_context.h:\n   14  }\n   15  \n   16: using namespace v8;\n   17: using namespace node;\n   18  \n   19  class KerberosContext : public ObjectWrap {\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/kerberos/lib/kerberosgss.c:\n   29  extern PyObject *KrbException_class;\n   30  \n   31: char* server_principal_details(const char* service, const char* hostname)\n   32  {\n   33      char match[1024];\n   ..\n   40      krb5_kt_cursor cursor = NULL;\n   41      krb5_keytab_entry entry;\n   42:     char* pname = NULL;\n   43      \n   44      // Generate the principal prefix we want to match\n   45:     snprintf(match, 1024, \"%s/%s@\", service, hostname);\n   46      match_len = strlen(match);\n   47      \n   ..\n   70      while ((code = krb5_kt_next_entry(kcontext, kt, &entry, &cursor)) == 0)\n   71      {\n   72:         if ((code = krb5_unparse_name(kcontext, entry.principal, &pname)))\n   73          {\n   74              PyErr_SetObject(KrbException_class, Py_BuildValue(\"((s:i))\",\n   75:                                                               \"Cannot parse principal name from keytab\", code));\n   76              goto end;\n   77          }\n   78          \n   79:         if (strncmp(pname, match, match_len) == 0)\n   80          {\n   81:             result = malloc(strlen(pname) + 1);\n   82:             strcpy(result, pname);\n   83:             krb5_free_unparsed_name(kcontext, pname);\n   84              krb5_free_keytab_entry_contents(kcontext, &entry);\n   85              break;\n   86          }\n   87          \n   88:         krb5_free_unparsed_name(kcontext, pname);\n   89          krb5_free_keytab_entry_contents(kcontext, &entry);\n   90      }\n   ..\n  109    OM_uint32 maj_stat;\n  110    OM_uint32 min_stat;\n  111:   gss_buffer_desc name_token = GSS_C_EMPTY_BUFFER;\n  112    gss_client_response *response = NULL;\n  113    int ret = AUTH_GSS_COMPLETE;\n  114  \n  115:   state->server_name = GSS_C_NO_NAME;\n  116    state->context = GSS_C_NO_CONTEXT;\n  117    state->gss_flags = gss_flags;\n  118:   state->username = NULL;\n  119    state->response = NULL;\n  120    \n  121:   // Import server name first\n  122:   name_token.length = strlen(service);\n  123:   name_token.value = (char *)service;\n  124    \n  125:   maj_stat = gss_import_name(&min_stat, &name_token, gss_krb5_nt_service_name, &state->server_name);\n  126    \n  127    if (GSS_ERROR(maj_stat)) {\n  ...\n  149      maj_stat = gss_delete_sec_context(&min_stat, &state->context, GSS_C_NO_BUFFER);\n  150    \n  151:   if(state->server_name != GSS_C_NO_NAME)\n  152:     maj_stat = gss_release_name(&min_stat, &state->server_name);\n  153    \n  154:   if(state->username != NULL) {\n  155:     free(state->username);\n  156:     state->username = NULL;\n  157    }\n  158  \n  ...\n  195                                    GSS_C_NO_CREDENTIAL,\n  196                                    &state->context,\n  197:                                   state->server_name,\n  198                                    GSS_C_NO_OID,\n  199                                    (OM_uint32)state->gss_flags,\n  ...\n  219    }\n  220    \n  221:   // Try to get the user name if we have completed all GSS operations\n  222    if (ret == AUTH_GSS_COMPLETE) {\n  223:     gss_name_t gssuser = GSS_C_NO_NAME;\n  224      maj_stat = gss_inquire_context(&min_stat, state->context, &gssuser, NULL, NULL, NULL,  NULL, NULL, NULL);\n  225      \n  ...\n  230      }\n  231      \n  232:     gss_buffer_desc name_token;\n  233:     name_token.length = 0;\n  234:     maj_stat = gss_display_name(&min_stat, gssuser, &name_token, NULL);\n  235      \n  236      if(GSS_ERROR(maj_stat)) {\n  237:       if(name_token.value)\n  238:         gss_release_buffer(&min_stat, &name_token);\n  239:       gss_release_name(&min_stat, &gssuser);\n  240        \n  241        response = gss_error(maj_stat, min_stat);\n  ...\n  243        goto end;\n  244      } else {\n  245:       state->username = (char *)malloc(name_token.length + 1);\n  246:       strncpy(state->username, (char*) name_token.value, name_token.length);\n  247:       state->username[name_token.length] = 0;\n  248:       gss_release_buffer(&min_stat, &name_token);\n  249:       gss_release_name(&min_stat, &gssuser);\n  250      }\n  251    }\n  ...\n  406      OM_uint32 maj_stat;\n  407      OM_uint32 min_stat;\n  408:     gss_buffer_desc name_token = GSS_C_EMPTY_BUFFER;\n  409      int ret = AUTH_GSS_COMPLETE;\n  410      \n  411      state->context = GSS_C_NO_CONTEXT;\n  412:     state->server_name = GSS_C_NO_NAME;\n  413:     state->client_name = GSS_C_NO_NAME;\n  414      state->server_creds = GSS_C_NO_CREDENTIAL;\n  415      state->client_creds = GSS_C_NO_CREDENTIAL;\n  416:     state->username = NULL;\n  417:     state->targetname = NULL;\n  418      state->response = NULL;\n  419      \n  420:     // Server name may be empty which means we aren't going to create our own creds\n  421      size_t service_len = strlen(service);\n  422      if (service_len != 0)\n  423      {\n  424:         // Import server name first\n  425:         name_token.length = strlen(service);\n  426:         name_token.value = (char *)service;\n  427          \n  428:         maj_stat = gss_import_name(&min_stat, &name_token, GSS_C_NT_HOSTBASED_SERVICE, &state->server_name);\n  429          \n  430          if (GSS_ERROR(maj_stat))\n  ...\n  436          \n  437          // Get credentials\n  438:         maj_stat = gss_acquire_cred(&min_stat, state->server_name, GSS_C_INDEFINITE,\n  439                                      GSS_C_NO_OID_SET, GSS_C_ACCEPT, &state->server_creds, NULL, NULL);\n  440          \n  ...\n  459      if (state->context != GSS_C_NO_CONTEXT)\n  460          maj_stat = gss_delete_sec_context(&min_stat, &state->context, GSS_C_NO_BUFFER);\n  461:     if (state->server_name != GSS_C_NO_NAME)\n  462:         maj_stat = gss_release_name(&min_stat, &state->server_name);\n  463:     if (state->client_name != GSS_C_NO_NAME)\n  464:         maj_stat = gss_release_name(&min_stat, &state->client_name);\n  465      if (state->server_creds != GSS_C_NO_CREDENTIAL)\n  466          maj_stat = gss_release_cred(&min_stat, &state->server_creds);\n  467      if (state->client_creds != GSS_C_NO_CREDENTIAL)\n  468          maj_stat = gss_release_cred(&min_stat, &state->client_creds);\n  469:     if (state->username != NULL)\n  470      {\n  471:         free(state->username);\n  472:         state->username = NULL;\n  473      }\n  474:     if (state->targetname != NULL)\n  475      {\n  476:         free(state->targetname);\n  477:         state->targetname = NULL;\n  478      }\n  479      if (state->response != NULL)\n  ...\n  520                                        &input_token,\n  521                                        GSS_C_NO_CHANNEL_BINDINGS,\n  522:                                       &state->client_name,\n  523                                        NULL,\n  524                                        &output_token,\n  ...\n  541      }\n  542      \n  543:     // Get the user name\n  544:     maj_stat = gss_display_name(&min_stat, state->client_name, &output_token, NULL);\n  545      if (GSS_ERROR(maj_stat))\n  546      {\n  ...\n  549          goto end;\n  550      }\n  551:     state->username = (char *)malloc(output_token.length + 1);\n  552:     strncpy(state->username, (char*) output_token.value, output_token.length);\n  553:     state->username[output_token.length] = 0;\n  554      \n  555:     // Get the target name if no server creds were supplied\n  556      if (state->server_creds == GSS_C_NO_CREDENTIAL)\n  557      {\n  558:         gss_name_t target_name = GSS_C_NO_NAME;\n  559:         maj_stat = gss_inquire_context(&min_stat, state->context, NULL, &target_name, NULL, NULL, NULL, NULL, NULL);\n  560          if (GSS_ERROR(maj_stat))\n  561          {\n  ...\n  564              goto end;\n  565          }\n  566:         maj_stat = gss_display_name(&min_stat, target_name, &output_token, NULL);\n  567          if (GSS_ERROR(maj_stat))\n  568          {\n  ...\n  571              goto end;\n  572          }\n  573:         state->targetname = (char *)malloc(output_token.length + 1);\n  574:         strncpy(state->targetname, (char*) output_token.value, output_token.length);\n  575:         state->targetname[output_token.length] = 0;\n  576      }\n  577  \n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/kerberos/lib/kerberosgss.h:\n   38  typedef struct {\n   39    gss_ctx_id_t     context;\n   40:   gss_name_t       server_name;\n   41    long int         gss_flags;\n   42:   char*            username;\n   43    char*            response;\n   44  } gss_client_state;\n   ..\n   46  typedef struct {\n   47    gss_ctx_id_t     context;\n   48:   gss_name_t       server_name;\n   49:   gss_name_t       client_name;\n   50    gss_cred_id_t    server_creds;\n   51    gss_cred_id_t    client_creds;\n   52:   char*            username;\n   53:   char*            targetname;\n   54    char*            response;\n   55  } gss_server_state;\n   56  \n   57: // char* server_principal_details(const char* service, const char* hostname);\n   58  \n   59  gss_client_response *authenticate_gss_client_init(const char* service, long int gss_flags, gss_client_state* state);\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/kerberos/lib/win32/kerberos.cc:\n   26    constructor_template = Persistent<FunctionTemplate>::New(t);\n   27    constructor_template->InstanceTemplate()->SetInternalFieldCount(1);\n   28:   constructor_template->SetClassName(String::NewSymbol(\"Kerberos\"));\n   29    // Set the symbol\n   30    target->ForceSet(String::NewSymbol(\"Kerberos\"), constructor_template->GetFunction());\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/kerberos/lib/win32/kerberos.h:\n   11  }\n   12  \n   13: using namespace v8;\n   14: using namespace node;\n   15  \n   16  class Kerberos : public ObjectWrap {\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/kerberos/lib/win32/kerberos_sspi.c:\n  114  SECURITY_STATUS SEC_ENTRY _sspi_initializeSecurityContext(\n  115    PCredHandle phCredential, PCtxtHandle phContext,\n  116:   LPSTR pszTargetName, unsigned long fContextReq, \n  117    unsigned long Reserved1, unsigned long TargetDataRep, \n  118    PSecBufferDesc pInput, unsigned long Reserved2,\n  ...\n  142    // Execute intialize context\n  143    status = (*pfn_initializeSecurityContext)(\n  144:     phCredential, phContext, pszTargetName, fContextReq, \n  145      Reserved1, TargetDataRep, pInput, Reserved2,\n  146      phNewContext, pOutput, pfContextAttr, ptsExpiry\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/kerberos/lib/win32/kerberos_sspi.h:\n   18   */\n   19  SECURITY_STATUS SEC_ENTRY _sspi_AcquireCredentialsHandle(\n   20:   LPSTR pszPrincipal,                 // Name of principal\n   21:   LPSTR pszPackage,                   // Name of package\n   22    unsigned long fCredentialUse,       // Flags indicating use\n   23    void * pvLogonId,                   // Pointer to logon ID\n   ..\n   63    PCredHandle phCredential,       // Cred to base context\n   64    PCtxtHandle phContext,          // Existing context (OPT)\n   65:   LPSTR pszTargetName,            // Name of target\n   66    unsigned long fContextReq,      // Context Requirements\n   67    unsigned long Reserved1,        // Reserved, MBZ\n   ..\n   76  \n   77  typedef DWORD (WINAPI *initializeSecurityContext_fn)(\n   78:   PCredHandle phCredential, PCtxtHandle phContext, LPSTR pszTargetName, unsigned long fContextReq, \n   79    unsigned long Reserved1, unsigned long TargetDataRep, PSecBufferDesc pInput, unsigned long Reserved2,\n   80    PCtxtHandle phNewContext, PSecBufferDesc pOutput, unsigned long * pfContextAttr, PTimeStamp ptsExpiry);\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/kerberos/lib/win32/worker.h:\n    6  #include <v8.h>\n    7  \n    8: using namespace node;\n    9: using namespace v8;\n   10  \n   11  class Worker {\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/kerberos/lib/win32/wrappers/security_buffer.cc:\n   13  #include \"security_buffer.h\"\n   14  \n   15: using namespace node;\n   16  \n   17  static Handle<Value> VException(const char *msg) {\n   ..\n  101    constructor_template = Persistent<FunctionTemplate>::New(t);\n  102    constructor_template->InstanceTemplate()->SetInternalFieldCount(1);\n  103:   constructor_template->SetClassName(String::NewSymbol(\"SecurityBuffer\"));\n  104  \n  105    // Set up method for the Kerberos instance\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/kerberos/lib/win32/wrappers/security_buffer.h:\n   11  #include <sspi.h>\n   12  \n   13: using namespace v8;\n   14: using namespace node;\n   15  \n   16  class SecurityBuffer : public ObjectWrap {  \n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/kerberos/lib/win32/wrappers/security_buffer_descriptor.cc:\n  169    constructor_template = Persistent<FunctionTemplate>::New(t);\n  170    constructor_template->InstanceTemplate()->SetInternalFieldCount(1);\n  171:   constructor_template->SetClassName(String::NewSymbol(\"SecurityBufferDescriptor\"));\n  172  \n  173    // Set up method for the Kerberos instance\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/kerberos/lib/win32/wrappers/security_buffer_descriptor.h:\n    9  #include <sspi.h>\n   10  \n   11: using namespace v8;\n   12: using namespace node;\n   13  \n   14  class SecurityBufferDescriptor : public ObjectWrap {  \n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/kerberos/lib/win32/wrappers/security_context.cc:\n  128  Handle<Value> SecurityContext::InitializeContextSync(const Arguments &args) {\n  129    HandleScope scope;  \n  130:   char *service_principal_name_str = NULL, *input_str = NULL, *decoded_input_str = NULL;\n  131    BYTE *out_bound_data_str = NULL;\n  132    int decoded_input_str_length = NULL;\n  ...\n  138    // We need 3 parameters\n  139    if(args.Length() != 3)\n  140:     return VException(\"Initialize must be called with either [credential:SecurityCredential, servicePrincipalName:string, input:string]\");\n  141  \n  142    // First parameter must be an instance of SecurityCredentials\n  ...\n  153  \n  154    // Let's unpack the values\n  155:   Local<String> service_principal_name = args[1]->ToString();\n  156:   service_principal_name_str = (char *)calloc(service_principal_name->Utf8Length() + 1, sizeof(char));\n  157:   service_principal_name->WriteUtf8(service_principal_name_str);\n  158  \n  159:   // Unpack the user name\n  160    Local<String> input = args[2]->ToString();\n  161  \n  ...\n  210        &security_credentials->m_Credentials\n  211      , NULL\n  212:     , const_cast<TCHAR*>(service_principal_name_str)\n  213      , 0x02  // MUTUAL\n  214      , 0\n  ...\n  248  //\n  249  typedef struct SecurityContextStaticInitializeCall {\n  250:   char *service_principal_name_str;\n  251    char *decoded_input_str;\n  252    int decoded_input_str_length;\n  ...\n  292        &call->context->security_credentials->m_Credentials\n  293      , NULL\n  294:     , const_cast<TCHAR*>(call->service_principal_name_str)\n  295      , 0x02  // MUTUAL\n  296      , 0\n  ...\n  324    // Clean up data\n  325    if(call->decoded_input_str != NULL) free(call->decoded_input_str);\n  326:   if(call->service_principal_name_str != NULL) free(call->service_principal_name_str);\n  327  }\n  328  \n  ...\n  338  Handle<Value> SecurityContext::InitializeContext(const Arguments &args) {\n  339    HandleScope scope;  \n  340:   char *service_principal_name_str = NULL, *input_str = NULL, *decoded_input_str = NULL;\n  341    int decoded_input_str_length = NULL;\n  342    // Store reference to security credentials\n  ...\n  345    // We need 3 parameters\n  346    if(args.Length() != 4)\n  347:     return VException(\"Initialize must be called with [credential:SecurityCredential, servicePrincipalName:string, input:string, callback:function]\");\n  348  \n  349    // First parameter must be an instance of SecurityCredentials\n  ...\n  364  \n  365    // Let's unpack the values\n  366:   Local<String> service_principal_name = args[1]->ToString();\n  367:   service_principal_name_str = (char *)calloc(service_principal_name->Utf8Length() + 1, sizeof(char));\n  368:   service_principal_name->WriteUtf8(service_principal_name_str);\n  369  \n  370:   // Unpack the user name\n  371    Local<String> input = args[2]->ToString();\n  372  \n  ...\n  395    call->decoded_input_str = decoded_input_str;\n  396    call->decoded_input_str_length = decoded_input_str_length;\n  397:   call->service_principal_name_str = service_principal_name_str;\n  398  \n  399    // Callback\n  ...\n  436  //\n  437  typedef struct SecurityContextStepStaticInitializeCall {\n  438:   char *service_principal_name_str;\n  439    char *decoded_input_str;\n  440    int decoded_input_str_length;\n  ...\n  482        &context->security_credentials->m_Credentials\n  483      , context->hasContext == true ? &context->m_Context : NULL\n  484:     , const_cast<TCHAR*>(call->service_principal_name_str)\n  485      , 0x02  // MUTUAL\n  486      , 0\n  ...\n  513    // Clean up data\n  514    if(call->decoded_input_str != NULL) free(call->decoded_input_str);\n  515:   if(call->service_principal_name_str != NULL) free(call->service_principal_name_str);\n  516  }\n  517  \n  ...\n  527    HandleScope scope;\n  528  \n  529:   char *service_principal_name_str = NULL, *input_str = NULL, *decoded_input_str = NULL;\n  530    int decoded_input_str_length = NULL;\n  531  \n  532    // We need 3 parameters\n  533    if(args.Length() != 3)\n  534:     return VException(\"Initialize must be called with [servicePrincipalName:string, input:string, callback:function]\");\n  535  \n  536    // Second parameter must be a string\n  ...\n  547  \n  548    // Let's unpack the values\n  549:   Local<String> service_principal_name = args[0]->ToString();\n  550:   service_principal_name_str = (char *)calloc(service_principal_name->Utf8Length() + 1, sizeof(char));\n  551:   service_principal_name->WriteUtf8(service_principal_name_str);\n  552  \n  553:   // Unpack the user name\n  554    Local<String> input = args[1]->ToString();\n  555  \n  ...\n  571    call->decoded_input_str = decoded_input_str;\n  572    call->decoded_input_str_length = decoded_input_str_length;\n  573:   call->service_principal_name_str = service_principal_name_str;\n  574  \n  575    // Callback\n  ...\n  595    HandleScope scope;\n  596  \n  597:   char *service_principal_name_str = NULL, *input_str = NULL, *decoded_input_str = NULL;\n  598    BYTE *out_bound_data_str = NULL;\n  599    int decoded_input_str_length = NULL;\n  ...\n  603    // We need 3 parameters\n  604    if(args.Length() != 2)\n  605:     return VException(\"Initialize must be called with [servicePrincipalName:string, input:string]\");\n  606  \n  607    // Second parameter must be a string\n  ...\n  614  \n  615    // Let's unpack the values\n  616:   Local<String> service_principal_name = args[0]->ToString();\n  617:   service_principal_name_str = (char *)calloc(service_principal_name->Utf8Length() + 1, sizeof(char));\n  618:   service_principal_name->WriteUtf8(service_principal_name_str);\n  619  \n  620:   // Unpack the user name\n  621    Local<String> input = args[1]->ToString();\n  622  \n  ...\n  664        &security_credentials->m_Credentials\n  665      , security_context->hasContext == true ? &security_context->m_Context : NULL\n  666:     , const_cast<TCHAR*>(service_principal_name_str)\n  667      , 0x02  // MUTUAL\n  668      , 0\n  ...\n 1124    constructor_template = Persistent<FunctionTemplate>::New(t);\n 1125    constructor_template->InstanceTemplate()->SetInternalFieldCount(1);\n 1126:   constructor_template->SetClassName(String::NewSymbol(\"SecurityContext\"));\n 1127  \n 1128    // Class methods\n ....\n 1148    constructor_template->InstanceTemplate()->SetAccessor(String::NewSymbol(\"hasContext\"), HasContextGetter);\n 1149  \n 1150:   // Set template class name\n 1151    target->Set(String::NewSymbol(\"SecurityContext\"), constructor_template->GetFunction());  \n 1152  }\n 1153  \n 1154  static LPSTR DisplaySECError(DWORD ErrCode) {\n 1155:   LPSTR pszName = NULL; // WinError.h\n 1156  \n 1157    switch(ErrCode) {\n 1158      case SEC_E_BUFFER_TOO_SMALL:\n 1159:       pszName = \"SEC_E_BUFFER_TOO_SMALL - The message buffer is too small. Used with the Digest SSP.\";\n 1160        break;\n 1161  \n 1162      case SEC_E_CRYPTO_SYSTEM_INVALID:\n 1163:       pszName = \"SEC_E_CRYPTO_SYSTEM_INVALID - The cipher chosen for the security context is not supported. Used with the Digest SSP.\"; \n 1164        break;\n 1165      case SEC_E_INCOMPLETE_MESSAGE:\n 1166:       pszName = \"SEC_E_INCOMPLETE_MESSAGE - The data in the input buffer is incomplete. The application needs to read more data from the server and call DecryptMessageSync (General) again.\"; \n 1167        break;\n 1168  \n 1169      case SEC_E_INVALID_HANDLE:\n 1170:       pszName = \"SEC_E_INVALID_HANDLE - A context handle that is not valid was specified in the phContext parameter. Used with the Digest and Schannel SSPs.\"; \n 1171        break;\n 1172  \n 1173      case SEC_E_INVALID_TOKEN:\n 1174:       pszName = \"SEC_E_INVALID_TOKEN - The buffers are of the wrong type or no buffer of type SECBUFFER_DATA was found. Used with the Schannel SSP.\"; \n 1175        break;\n 1176          \n 1177      case SEC_E_MESSAGE_ALTERED:\n 1178:       pszName = \"SEC_E_MESSAGE_ALTERED - The message has been altered. Used with the Digest and Schannel SSPs.\"; \n 1179        break;\n 1180          \n 1181      case SEC_E_OUT_OF_SEQUENCE:\n 1182:       pszName = \"SEC_E_OUT_OF_SEQUENCE - The message was not received in the correct sequence.\"; \n 1183        break;\n 1184          \n 1185      case SEC_E_QOP_NOT_SUPPORTED:\n 1186:       pszName = \"SEC_E_QOP_NOT_SUPPORTED - Neither confidentiality nor integrity are supported by the security context. Used with the Digest SSP.\"; \n 1187        break;\n 1188          \n 1189      case SEC_I_CONTEXT_EXPIRED:\n 1190:       pszName = \"SEC_I_CONTEXT_EXPIRED - The message sender has finished using the connection and has initiated a shutdown.\"; \n 1191        break;\n 1192          \n 1193      case SEC_I_RENEGOTIATE:\n 1194:       pszName = \"SEC_I_RENEGOTIATE - The remote party requires a new handshake sequence or the application has just initiated a shutdown.\"; \n 1195        break;\n 1196          \n 1197      case SEC_E_ENCRYPT_FAILURE:\n 1198:       pszName = \"SEC_E_ENCRYPT_FAILURE - The specified data could not be encrypted.\"; \n 1199        break;\n 1200          \n 1201      case SEC_E_DECRYPT_FAILURE:\n 1202:       pszName = \"SEC_E_DECRYPT_FAILURE - The specified data could not be decrypted.\"; \n 1203        break;\n 1204      case -1:\n 1205:       pszName = \"Failed to load security.dll library\"; \n 1206        break;\n 1207    }\n 1208  \n 1209:   return pszName;\n 1210  }\n 1211  \n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/kerberos/lib/win32/wrappers/security_context.h:\n   18  }\n   19  \n   20: using namespace v8;\n   21: using namespace node;\n   22  \n   23  class SecurityContext : public ObjectWrap {  \n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/kerberos/lib/win32/wrappers/security_credentials.cc:\n   54  Handle<Value> SecurityCredentials::AquireSync(const Arguments &args) {\n   55    HandleScope scope;  \n   56:   char *package_str = NULL, *username_str = NULL, *password_str = NULL, *domain_str = NULL;\n   57    // Status of operation\n   58    SECURITY_STATUS status;\n   ..\n   60    // Unpack the variables\n   61    if(args.Length() != 2 && args.Length() != 3 && args.Length() != 4)\n   62:     return VException(\"Aquire must be called with either [package:string, username:string, [password:string, domain:string]]\");\n   63  \n   64    if(!args[0]->IsString())\n   65:     return VException(\"Aquire must be called with either [package:string, username:string, [password:string, domain:string]]\");\n   66  \n   67    if(!args[1]->IsString())\n   68:     return VException(\"Aquire must be called with either [package:string, username:string, [password:string, domain:string]]\");\n   69  \n   70    if(args.Length() == 3 && !args[2]->IsString())\n   71:     return VException(\"Aquire must be called with either [package:string, username:string, [password:string, domain:string]]\");\n   72  \n   73    if(args.Length() == 4 && (!args[3]->IsString() && !args[3]->IsUndefined() && !args[3]->IsNull()))\n   74:     return VException(\"Aquire must be called with either [package:string, username:string, [password:string, domain:string]]\");\n   75  \n   76    // Unpack the package\n   ..\n   79    package->WriteUtf8(package_str);\n   80  \n   81:   // Unpack the user name\n   82:   Local<String> username = args[1]->ToString();\n   83:   username_str = (char *)calloc(username->Utf8Length() + 1, sizeof(char));\n   84:   username->WriteUtf8(username_str);\n   85  \n   86    // If we have a password\n   ..\n  114  \n  115    // Set up the user\n  116:   security_credentials->m_Identity.User = USTR(_tcsdup(username_str));\n  117:   security_credentials->m_Identity.UserLength = (unsigned long)_tcslen(username_str);\n  118  \n  119    // If we have a password string\n  ...\n  162  typedef struct SecurityCredentialCall {\n  163    char *package_str;\n  164:   char *username_str;\n  165    char *password_str;\n  166    char *domain_str;\n  ...\n  191  \n  192    // Set up the user\n  193:   security_credentials->m_Identity.User = USTR(_tcsdup(call->username_str));\n  194:   security_credentials->m_Identity.UserLength = (unsigned long)_tcslen(call->username_str);\n  195  \n  196    // If we have a password string\n  ...\n  233    if(call->domain_str != NULL) free(call->domain_str);\n  234    if(call->password_str != NULL) free(call->password_str);\n  235:   if(call->username_str != NULL) free(call->username_str);\n  236    free(call);\n  237  }\n  ...\n  250  Handle<Value> SecurityCredentials::Aquire(const Arguments &args) {\n  251    HandleScope scope;  \n  252:   char *package_str = NULL, *username_str = NULL, *password_str = NULL, *domain_str = NULL;\n  253    // Unpack the variables\n  254    if(args.Length() != 2 && args.Length() != 3 && args.Length() != 4 && args.Length() != 5)\n  255:     return VException(\"Aquire must be called with either [package:string, username:string, [password:string, domain:string], callback:function]\");\n  256  \n  257    if(!args[0]->IsString())\n  258:     return VException(\"Aquire must be called with either [package:string, username:string, [password:string, domain:string], callback:function]\");\n  259  \n  260    if(!args[1]->IsString())\n  261:     return VException(\"Aquire must be called with either [package:string, username:string, [password:string, domain:string], callback:function]\");\n  262  \n  263    if(args.Length() == 3 && (!args[2]->IsString() && !args[2]->IsFunction()))\n  264:     return VException(\"Aquire must be called with either [package:string, username:string, [password:string, domain:string], callback:function]\");\n  265  \n  266    if(args.Length() == 4 && (!args[3]->IsString() && !args[3]->IsUndefined() && !args[3]->IsNull()) && !args[3]->IsFunction())\n  267:     return VException(\"Aquire must be called with either [package:string, username:string, [password:string, domain:string], callback:function]\");\n  268  \n  269    if(args.Length() == 5 && !args[4]->IsFunction())\n  270:     return VException(\"Aquire must be called with either [package:string, username:string, [password:string, domain:string], callback:function]\");\n  271  \n  272    Local<Function> callback;\n  ...\n  286    package->WriteUtf8(package_str);\n  287  \n  288:   // Unpack the user name\n  289:   Local<String> username = args[1]->ToString();\n  290:   username_str = (char *)calloc(username->Utf8Length() + 1, sizeof(char));\n  291:   username->WriteUtf8(username_str);\n  292  \n  293    // If we have a password\n  ...\n  315    call->package_str = package_str;\n  316    call->password_str = password_str;\n  317:   call->username_str = username_str;\n  318    call->credentials = security_credentials;\n  319  \n  ...\n  341    constructor_template = Persistent<FunctionTemplate>::New(t);\n  342    constructor_template->InstanceTemplate()->SetInternalFieldCount(1);\n  343:   constructor_template->SetClassName(String::NewSymbol(\"SecurityCredentials\"));\n  344  \n  345    // Class methods\n  ...\n  355  \n  356  static LPSTR DisplaySECError(DWORD ErrCode) {\n  357:   LPSTR pszName = NULL; // WinError.h\n  358  \n  359    switch(ErrCode) {\n  360      case SEC_E_BUFFER_TOO_SMALL:\n  361:       pszName = \"SEC_E_BUFFER_TOO_SMALL - The message buffer is too small. Used with the Digest SSP.\";\n  362        break;\n  363  \n  364      case SEC_E_CRYPTO_SYSTEM_INVALID:\n  365:       pszName = \"SEC_E_CRYPTO_SYSTEM_INVALID - The cipher chosen for the security context is not supported. Used with the Digest SSP.\"; \n  366        break;\n  367      case SEC_E_INCOMPLETE_MESSAGE:\n  368:       pszName = \"SEC_E_INCOMPLETE_MESSAGE - The data in the input buffer is incomplete. The application needs to read more data from the server and call DecryptMessage (General) again.\"; \n  369        break;\n  370  \n  371      case SEC_E_INVALID_HANDLE:\n  372:       pszName = \"SEC_E_INVALID_HANDLE - A context handle that is not valid was specified in the phContext parameter. Used with the Digest and Schannel SSPs.\"; \n  373        break;\n  374  \n  375      case SEC_E_INVALID_TOKEN:\n  376:       pszName = \"SEC_E_INVALID_TOKEN - The buffers are of the wrong type or no buffer of type SECBUFFER_DATA was found. Used with the Schannel SSP.\"; \n  377        break;\n  378          \n  379      case SEC_E_MESSAGE_ALTERED:\n  380:       pszName = \"SEC_E_MESSAGE_ALTERED - The message has been altered. Used with the Digest and Schannel SSPs.\"; \n  381        break;\n  382          \n  383      case SEC_E_OUT_OF_SEQUENCE:\n  384:       pszName = \"SEC_E_OUT_OF_SEQUENCE - The message was not received in the correct sequence.\"; \n  385        break;\n  386          \n  387      case SEC_E_QOP_NOT_SUPPORTED:\n  388:       pszName = \"SEC_E_QOP_NOT_SUPPORTED - Neither confidentiality nor integrity are supported by the security context. Used with the Digest SSP.\"; \n  389        break;\n  390          \n  391      case SEC_I_CONTEXT_EXPIRED:\n  392:       pszName = \"SEC_I_CONTEXT_EXPIRED - The message sender has finished using the connection and has initiated a shutdown.\"; \n  393        break;\n  394          \n  395      case SEC_I_RENEGOTIATE:\n  396:       pszName = \"SEC_I_RENEGOTIATE - The remote party requires a new handshake sequence or the application has just initiated a shutdown.\"; \n  397        break;\n  398          \n  399      case SEC_E_ENCRYPT_FAILURE:\n  400:       pszName = \"SEC_E_ENCRYPT_FAILURE - The specified data could not be encrypted.\"; \n  401        break;\n  402          \n  403      case SEC_E_DECRYPT_FAILURE:\n  404:       pszName = \"SEC_E_DECRYPT_FAILURE - The specified data could not be decrypted.\"; \n  405        break;\n  406      case -1:\n  407:       pszName = \"Failed to load security.dll library\"; \n  408        break;\n  409  \n  410    }\n  411  \n  412:   return pszName;\n  413  }\n  414  \n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/kerberos/lib/win32/wrappers/security_credentials.h:\n   26  #endif\n   27  \n   28: using namespace v8;\n   29: using namespace node;\n   30  \n   31  class SecurityCredentials : public ObjectWrap {  \n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/kerberos/lib/win32/wrappers/security_credentials.js:\n    2  \n    3  // Add simple kebros helper\n    4: SecurityCredentialsNative.aquire_kerberos = function(username, password, domain, callback) {\n    5    if(typeof password == 'function') {\n    6      callback = password;\n    .\n   13    // We are going to use the async version\n   14    if(typeof callback == 'function') {\n   15:     return SecurityCredentialsNative.aquire('Kerberos', username, password, domain, callback);\n   16    } else {\n   17:     return SecurityCredentialsNative.aquireSync('Kerberos', username, password, domain);\n   18    }\n   19  }\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/kerberos/lib/worker.h:\n    6  #include <v8.h>\n    7  \n    8: using namespace node;\n    9: using namespace v8;\n   10  \n   11  class Worker {\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/node_modules/kerberos/package.json:\n    1  {\n    2:   \"name\": \"kerberos\",\n    3    \"version\": \"0.0.2\",\n    4    \"description\": \"Kerberos library for Node.js\",\n    .\n   21    },\n   22    \"author\": {\n   23:     \"name\": \"Christian Amor Kvalheim\"\n   24    },\n   25    \"license\": \"Apache 2.0\",\n   26:   \"readmeFilename\": \"README.md\",\n   27    \"gitHead\": \"bb01d4fe322e022999aca19da564e7d9db59a8ed\",\n   28    \"readme\": \"kerberos\\n========\\n\\nKerberos library for node.js\",\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/package.json:\n    1  {\n    2:   \"name\": \"mongodb\",\n    3    \"description\": \"A node.js driver for MongoDB\",\n    4    \"keywords\": [\n    .\n   10    \"version\": \"1.3.1\",\n   11    \"author\": {\n   12:     \"name\": \"Christian Amor Kvalheim\",\n   13      \"email\": \"christkv@gmail.com\"\n   14    },\n   15    \"contributors\": [\n   16      {\n   17:       \"name\": \"Aaron Heckmann\"\n   18      },\n   19      {\n   20:       \"name\": \"Christoph Pojer\"\n   21      },\n   22      {\n   23:       \"name\": \"Pau Ramon Revilla\"\n   24      },\n   25      {\n   26:       \"name\": \"Nathan White\"\n   27      },\n   28      {\n   29:       \"name\": \"Emmerman\"\n   30      },\n   31      {\n   32:       \"name\": \"Seth LaForge\"\n   33      },\n   34      {\n   35:       \"name\": \"Boris Filipov\"\n   36      },\n   37      {\n   38:       \"name\": \"Stefan Schärmeli\"\n   39      },\n   40      {\n   41:       \"name\": \"Tedde Lundgren\"\n   42      },\n   43      {\n   44:       \"name\": \"renctan\"\n   45      },\n   46      {\n   47:       \"name\": \"Sergey Ukustov\"\n   48      },\n   49      {\n   50:       \"name\": \"Ciaran Jessup\"\n   51      },\n   52      {\n   53:       \"name\": \"kuno\"\n   54      },\n   55      {\n   56:       \"name\": \"srimonti\"\n   57      },\n   58      {\n   59:       \"name\": \"Erik Abele\"\n   60      },\n   61      {\n   62:       \"name\": \"Pratik Daga\"\n   63      },\n   64      {\n   65:       \"name\": \"Slobodan Utvic\"\n   66      },\n   67      {\n   68:       \"name\": \"Kristina Chodorow\"\n   69      },\n   70      {\n   71:       \"name\": \"Yonathan Randolph\"\n   72      },\n   73      {\n   74:       \"name\": \"Brian Noguchi\"\n   75      },\n   76      {\n   77:       \"name\": \"Sam Epstein\"\n   78      },\n   79      {\n   80:       \"name\": \"James Harrison Fisher\"\n   81      },\n   82      {\n   83:       \"name\": \"Vladimir Dronnikov\"\n   84      },\n   85      {\n   86:       \"name\": \"Ben Hockey\"\n   87      },\n   88      {\n   89:       \"name\": \"Henrik Johansson\"\n   90      },\n   91      {\n   92:       \"name\": \"Simon Weare\"\n   93      },\n   94      {\n   95:       \"name\": \"Alex Gorbatchev\"\n   96      },\n   97      {\n   98:       \"name\": \"Shimon Doodkin\"\n   99      },\n  100      {\n  101:       \"name\": \"Kyle Mueller\"\n  102      },\n  103      {\n  104:       \"name\": \"Eran Hammer-Lahav\"\n  105      },\n  106      {\n  107:       \"name\": \"Marcin Ciszak\"\n  108      },\n  109      {\n  110:       \"name\": \"François de Metz\"\n  111      },\n  112      {\n  113:       \"name\": \"Vinay Pulim\"\n  114      },\n  115      {\n  116:       \"name\": \"nstielau\"\n  117      },\n  118      {\n  119:       \"name\": \"Adam Wiggins\"\n  120      },\n  121      {\n  122:       \"name\": \"entrinzikyl\"\n  123      },\n  124      {\n  125:       \"name\": \"Jeremy Selier\"\n  126      },\n  127      {\n  128:       \"name\": \"Ian Millington\"\n  129      },\n  130      {\n  131:       \"name\": \"Public Keating\"\n  132      },\n  133      {\n  134:       \"name\": \"andrewjstone\"\n  135      },\n  136      {\n  137:       \"name\": \"Christopher Stott\"\n  138      },\n  139      {\n  140:       \"name\": \"Corey Jewett\"\n  141      },\n  142      {\n  143:       \"name\": \"brettkiefer\"\n  144      },\n  145      {\n  146:       \"name\": \"Rob Holland\"\n  147      },\n  148      {\n  149:       \"name\": \"Senmiao Liu\"\n  150      },\n  151      {\n  152:       \"name\": \"heroic\"\n  153      },\n  154      {\n  155:       \"name\": \"gitfy\"\n  156      },\n  157      {\n  158:       \"name\": \"Andrew Stone\"\n  159      },\n  160      {\n  161:       \"name\": \"John Le Drew\"\n  162      },\n  163      {\n  164:       \"name\": \"Lucasfilm Singapore\"\n  165      },\n  166      {\n  167:       \"name\": \"Roman Shtylman\"\n  168      },\n  169      {\n  170:       \"name\": \"Matt Self\"\n  171      }\n  172    ],\n  ...\n  219      }\n  220    ],\n  221:   \"readme\": \"Up to date documentation\\n========================\\n\\n[Documentation](http://mongodb.github.com/node-mongodb-native/)\\n\\nInstall\\n=======\\n\\nTo install the most recent release from npm, run:\\n\\n    npm install mongodb\\n\\nThat may give you a warning telling you that bugs['web'] should be bugs['url'], it would be safe to ignore it (this has been fixed in the development version)\\n\\nTo install the latest from the repository, run::\\n\\n    npm install path/to/node-mongodb-native\\n\\nCommunity\\n=========\\nCheck out the google group [node-mongodb-native](http://groups.google.com/group/node-mongodb-native) for questions/answers from users of the driver.\\n\\nLive Examples\\n============\\n<a href=\\\"https://runnable.com/node-mongodb-native\\\" target=\\\"_blank\\\"><img src=\\\"https://runnable.com/external/styles/assets/runnablebtn.png\\\" style=\\\"width:67px;height:25px;\\\"></a>\\n\\nIntroduction\\n============\\n\\nThis is a node.js driver for MongoDB. It's a port (or close to a port) of the library for ruby at http://github.com/mongodb/mongo-ruby-driver/.\\n\\nA simple example of inserting a document.\\n\\n```javascript\\n    var client = new Db('test', new Server(\\\"127.0.0.1\\\", 27017, {}), {w: 1}),\\n        test = function (err, collection) {\\n          collection.insert({a:2}, function(err, docs) {\\n\\n            collection.count(function(err, count) {\\n              test.assertEquals(1, count);\\n            });\\n\\n            // Locate all the entries using find\\n            collection.find().toArray(function(err, results) {\\n              test.assertEquals(1, results.length);\\n              test.assertTrue(results[0].a === 2);\\n\\n              // Let's close the db\\n              client.close();\\n            });\\n          });\\n        };\\n\\n    client.open(function(err, p_client) {\\n      client.collection('test_insert', test);\\n    });\\n```\\n\\nData types\\n==========\\n\\nTo store and retrieve the non-JSON MongoDb primitives ([ObjectID](http://www.mongodb.org/display/DOCS/Object+IDs), Long, Binary, [Timestamp](http://www.mongodb.org/display/DOCS/Timestamp+data+type), [DBRef](http://www.mongodb.org/display/DOCS/Database+References#DatabaseReferences-DBRef), Code).\\n\\nIn particular, every document has a unique `_id` which can be almost any type, and by default a 12-byte ObjectID is created. ObjectIDs can be represented as 24-digit hexadecimal strings, but you must convert the string back into an ObjectID before you can use it in the database. For example:\\n\\n```javascript\\n    // Get the objectID type\\n    var ObjectID = require('mongodb').ObjectID;\\n\\n    var idString = '4e4e1638c85e808431000003';\\n    collection.findOne({_id: new ObjectID(idString)}, console.log)  // ok\\n    collection.findOne({_id: idString}, console.log)  // wrong! callback gets undefined\\n```\\n\\nHere are the constructors the non-Javascript BSON primitive types:\\n\\n```javascript\\n    // Fetch the library\\n    var mongo = require('mongodb');\\n    // Create new instances of BSON types\\n    new mongo.Long(numberString)\\n    new mongo.ObjectID(hexString)\\n    new mongo.Timestamp()  // the actual unique number is generated on insert.\\n    new mongo.DBRef(collectionName, id, dbName)\\n    new mongo.Binary(buffer)  // takes a string or Buffer\\n    new mongo.Code(code, [context])\\n    new mongo.Symbol(string)\\n    new mongo.MinKey()\\n    new mongo.MaxKey()\\n    new mongo.Double(number)\\t// Force double storage\\n```\\n\\nThe C/C++ bson parser/serializer\\n--------------------------------\\n\\nIf you are running a version of this library has the C/C++ parser compiled, to enable the driver to use the C/C++ bson parser pass it the option native_parser:true like below\\n\\n```javascript\\n    // using native_parser:\\n    var client = new Db('integration_tests_20',\\n                        new Server(\\\"127.0.0.1\\\", 27017),\\n                        {native_parser:true});\\n```\\n\\nThe C++ parser uses the js objects both for serialization and deserialization.\\n\\nGitHub information\\n==================\\n\\nThe source code is available at http://github.com/mongodb/node-mongodb-native.\\nYou can either clone the repository or download a tarball of the latest release.\\n\\nOnce you have the source you can test the driver by running\\n\\n    $ make test\\n\\nin the main directory. You will need to have a mongo instance running on localhost for the integration tests to pass.\\n\\nExamples\\n========\\n\\nFor examples look in the examples/ directory. You can execute the examples using node.\\n\\n    $ cd examples\\n    $ node queries.js\\n\\nGridStore\\n=========\\n\\nThe GridStore class allows for storage of binary files in mongoDB using the mongoDB defined files and chunks collection definition.\\n\\nFor more information have a look at [Gridstore](https://github.com/mongodb/node-mongodb-native/blob/master/docs/gridfs.md)\\n\\nReplicasets\\n===========\\nFor more information about how to connect to a replicaset have a look at [Replicasets](https://github.com/mongodb/node-mongodb-native/blob/master/docs/replicaset.md)\\n\\nPrimary Key Factories\\n---------------------\\n\\nDefining your own primary key factory allows you to generate your own series of id's\\n(this could f.ex be to use something like ISBN numbers). The generated the id needs to be a 12 byte long \\\"string\\\".\\n\\nSimple example below\\n\\n```javascript\\n    // Custom factory (need to provide a 12 byte array);\\n    CustomPKFactory = function() {}\\n    CustomPKFactory.prototype = new Object();\\n    CustomPKFactory.createPk = function() {\\n      return new ObjectID(\\\"aaaaaaaaaaaa\\\");\\n    }\\n\\n    var p_client = new Db('integration_tests_20', new Server(\\\"127.0.0.1\\\", 27017, {}), {'pk':CustomPKFactory});\\n    p_client.open(function(err, p_client) {\\n      p_client.dropDatabase(function(err, done) {\\n        p_client.createCollection('test_custom_key', function(err, collection) {\\n          collection.insert({'a':1}, function(err, docs) {\\n            collection.find({'_id':new ObjectID(\\\"aaaaaaaaaaaa\\\")}, function(err, cursor) {\\n              cursor.toArray(function(err, items) {\\n                test.assertEquals(1, items.length);\\n\\n                // Let's close the db\\n                p_client.close();\\n              });\\n            });\\n          });\\n        });\\n      });\\n    });\\n```\\n\\nStrict mode\\n-----------\\n\\nEach database has an optional strict mode. If it is set then asking for a collection\\nthat does not exist will return an Error object in the callback. Similarly if you\\nattempt to create a collection that already exists. Strict is provided for convenience.\\n\\n```javascript\\n    var error_client = new Db('integration_tests_', new Server(\\\"127.0.0.1\\\", 27017, {auto_reconnect: false}), {strict:true});\\n      test.assertEquals(true, error_client.strict);\\n\\n      error_client.open(function(err, error_client) {\\n      error_client.collection('does-not-exist', function(err, collection) {\\n        test.assertTrue(err instanceof Error);\\n        test.assertEquals(\\\"Collection does-not-exist does not exist. Currently in strict mode.\\\", err.message);\\n      });\\n\\n      error_client.createCollection('test_strict_access_collection', function(err, collection) {\\n        error_client.collection('test_strict_access_collection', function(err, collection) {\\n          test.assertTrue(collection instanceof Collection);\\n          // Let's close the db\\n          error_client.close();\\n        });\\n      });\\n    });\\n```\\n\\nDocumentation\\n=============\\n\\nIf this document doesn't answer your questions, see the source of\\n[Collection](https://github.com/mongodb/node-mongodb-native/blob/master/lib/mongodb/collection.js)\\nor [Cursor](https://github.com/mongodb/node-mongodb-native/blob/master/lib/mongodb/cursor.js),\\nor the documentation at MongoDB for query and update formats.\\n\\nFind\\n----\\n\\nThe find method is actually a factory method to create\\nCursor objects. A Cursor lazily uses the connection the first time\\nyou call `nextObject`, `each`, or `toArray`.\\n\\nThe basic operation on a cursor is the `nextObject` method\\nthat fetches the next matching document from the database. The convenience\\nmethods `each` and `toArray` call `nextObject` until the cursor is exhausted.\\n\\nSignatures:\\n\\n```javascript\\n    var cursor = collection.find(query, [fields], options);\\n    cursor.sort(fields).limit(n).skip(m).\\n\\n    cursor.nextObject(function(err, doc) {});\\n    cursor.each(function(err, doc) {});\\n    cursor.toArray(function(err, docs) {});\\n\\n    cursor.rewind()  // reset the cursor to its initial state.\\n```\\n\\nUseful chainable methods of cursor. These can optionally be options of `find` instead of method calls:\\n\\n* `.limit(n).skip(m)` to control paging.\\n* `.sort(fields)` Order by the given fields. There are several equivalent syntaxes:\\n  * `.sort({field1: -1, field2: 1})` descending by field1, then ascending by field2.\\n  * `.sort([['field1', 'desc'], ['field2', 'asc']])` same as above\\n  * `.sort([['field1', 'desc'], 'field2'])` same as above\\n  * `.sort('field1')` ascending by field1\\n\\nOther options of `find`:\\n\\n* `fields` the fields to fetch (to avoid transferring the entire document)\\n* `tailable` if true, makes the cursor [tailable](http://www.mongodb.org/display/DOCS/Tailable+Cursors).\\n* `batchSize` The number of the subset of results to request the database\\nto return for every request. This should initially be greater than 1 otherwise\\nthe database will automatically close the cursor. The batch size can be set to 1\\nwith `batchSize(n, function(err){})` after performing the initial query to the database.\\n* `hint` See [Optimization: hint](http://www.mongodb.org/display/DOCS/Optimization#Optimization-Hint).\\n* `explain` turns this into an explain query. You can also call\\n`explain()` on any cursor to fetch the explanation.\\n* `snapshot` prevents documents that are updated while the query is active\\nfrom being returned multiple times. See more\\n[details about query snapshots](http://www.mongodb.org/display/DOCS/How+to+do+Snapshotted+Queries+in+the+Mongo+Database).\\n* `timeout` if false, asks MongoDb not to time out this cursor after an\\ninactivity period.\\n\\n\\nFor information on how to create queries, see the\\n[MongoDB section on querying](http://www.mongodb.org/display/DOCS/Querying).\\n\\n```javascript\\n    var mongodb = require('mongodb');\\n    var server = new mongodb.Server(\\\"127.0.0.1\\\", 27017, {});\\n    new mongodb.Db('test', server, {}).open(function (error, client) {\\n      if (error) throw error;\\n      var collection = new mongodb.Collection(client, 'test_collection');\\n      collection.find({}, {limit:10}).toArray(function(err, docs) {\\n        console.dir(docs);\\n      });\\n    });\\n```\\n\\nInsert\\n------\\n\\nSignature:\\n\\n```javascript\\n    collection.insert(docs, options, [callback]);\\n```\\n\\nwhere `docs` can be a single document or an array of documents.\\n\\nUseful options:\\n\\n* `safe:true` Should always set if you have a callback.\\n\\nSee also: [MongoDB docs for insert](http://www.mongodb.org/display/DOCS/Inserting).\\n\\n```javascript\\n    var mongodb = require('mongodb');\\n    var server = new mongodb.Server(\\\"127.0.0.1\\\", 27017, {});\\n    new mongodb.Db('test', server, {w: 1}).open(function (error, client) {\\n      if (error) throw error;\\n      var collection = new mongodb.Collection(client, 'test_collection');\\n      collection.insert({hello: 'world'}, {safe:true},\\n                        function(err, objects) {\\n        if (err) console.warn(err.message);\\n        if (err && err.message.indexOf('E11000 ') !== -1) {\\n          // this _id was already inserted in the database\\n        }\\n      });\\n    });\\n```\\n\\nNote that there's no reason to pass a callback to the insert or update commands\\nunless you use the `safe:true` option. If you don't specify `safe:true`, then\\nyour callback will be called immediately.\\n\\nUpdate; update and insert (upsert)\\n----------------------------------\\n\\nThe update operation will update the first document that matches your query\\n(or all documents that match if you use `multi:true`).\\nIf `safe:true`, `upsert` is not set, and no documents match, your callback will return 0 documents updated.\\n\\nSee the [MongoDB docs](http://www.mongodb.org/display/DOCS/Updating) for\\nthe modifier (`$inc`, `$set`, `$push`, etc.) formats.\\n\\nSignature:\\n\\n```javascript\\n    collection.update(criteria, objNew, options, [callback]);\\n```\\n\\nUseful options:\\n\\n* `safe:true` Should always set if you have a callback.\\n* `multi:true` If set, all matching documents are updated, not just the first.\\n* `upsert:true` Atomically inserts the document if no documents matched.\\n\\nExample for `update`:\\n\\n```javascript\\n    var mongodb = require('mongodb');\\n    var server = new mongodb.Server(\\\"127.0.0.1\\\", 27017, {});\\n    new mongodb.Db('test', server, {w: 1}).open(function (error, client) {\\n      if (error) throw error;\\n      var collection = new mongodb.Collection(client, 'test_collection');\\n      collection.update({hi: 'here'}, {$set: {hi: 'there'}}, {safe:true},\\n                        function(err) {\\n        if (err) console.warn(err.message);\\n        else console.log('successfully updated');\\n      });\\n    });\\n```\\n\\nFind and modify\\n---------------\\n\\n`findAndModify` is like `update`, but it also gives the updated document to\\nyour callback. But there are a few key differences between findAndModify and\\nupdate:\\n\\n  1. The signatures differ.\\n  2. You can only findAndModify a single item, not multiple items.\\n\\nSignature:\\n\\n```javascript\\n    collection.findAndModify(query, sort, update, options, callback)\\n```\\n\\nThe sort parameter is used to specify which object to operate on, if more than\\none document matches. It takes the same format as the cursor sort (see\\nConnection.find above).\\n\\nSee the\\n[MongoDB docs for findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command)\\nfor more details.\\n\\nUseful options:\\n\\n* `remove:true` set to a true to remove the object before returning\\n* `new:true` set to true if you want to return the modified object rather than the original. Ignored for remove.\\n* `upsert:true` Atomically inserts the document if no documents matched.\\n\\nExample for `findAndModify`:\\n\\n```javascript\\n    var mongodb = require('mongodb');\\n    var server = new mongodb.Server(\\\"127.0.0.1\\\", 27017, {});\\n    new mongodb.Db('test', server, {w: 1}).open(function (error, client) {\\n      if (error) throw error;\\n      var collection = new mongodb.Collection(client, 'test_collection');\\n      collection.findAndModify({hello: 'world'}, [['_id','asc']], {$set: {hi: 'there'}}, {},\\n                        function(err, object) {\\n        if (err) console.warn(err.message);\\n        else console.dir(object);  // undefined if no matching object exists.\\n      });\\n    });\\n```\\n\\nSave\\n----\\n\\nThe `save` method is a shorthand for upsert if the document contains an\\n`_id`, or an insert if there is no `_id`.\\n\\nSponsors\\n========\\nJust as Felix Geisendörfer I'm also working on the driver for my own startup and this driver is a big project that also benefits other companies who are using MongoDB.\\n\\nIf your company could benefit from a even better-engineered node.js mongodb driver I would appreciate any type of sponsorship you may be able to provide. All the sponsors will get a lifetime display in this readme, priority support and help on problems and votes on the roadmap decisions for the driver. If you are interested contact me on [christkv AT g m a i l.com](mailto:christkv@gmail.com) for details.\\n\\nAnd I'm very thankful for code contributions. If you are interested in working on features please contact me so we can discuss API design and testing.\\n\\nRelease Notes\\n=============\\n\\nSee HISTORY\\n\\nCredits\\n=======\\n\\n1. [10gen](http://github.com/mongodb/mongo-ruby-driver/)\\n2. [Google Closure Library](http://code.google.com/closure/library/)\\n3. [Jonas Raoni Soares Silva](http://jsfromhell.com/classes/binary-parser)\\n\\nContributors\\n============\\n\\nAaron Heckmann, Christoph Pojer, Pau Ramon Revilla, Nathan White, Emmerman, Seth LaForge, Boris Filipov, Stefan Schärmeli, Tedde Lundgren, renctan, Sergey Ukustov, Ciaran Jessup, kuno, srimonti, Erik Abele, Pratik Daga, Slobodan Utvic, Kristina Chodorow, Yonathan Randolph, Brian Noguchi, Sam Epstein, James Harrison Fisher, Vladimir Dronnikov, Ben Hockey, Henrik Johansson, Simon Weare, Alex Gorbatchev, Shimon Doodkin, Kyle Mueller, Eran Hammer-Lahav, Marcin Ciszak, François de Metz, Vinay Pulim, nstielau, Adam Wiggins, entrinzikyl, Jeremy Selier, Ian Millington, Public Keating, andrewjstone, Christopher Stott, Corey Jewett, brettkiefer, Rob Holland, Senmiao Liu, heroic, gitfy\\n\\nLicense\\n=======\\n\\n Copyright 2009 - 2012 Christian Amor Kvalheim.\\n\\n   Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n\\n\",\n  222:   \"readmeFilename\": \"Readme.md\",\n  223    \"_id\": \"mongodb@1.3.1\",\n  224    \"dist\": {\n\n/Users/pezillionaire/GitHub/simpllist/node_modules/mongodb/Readme.md:\n   82      new mongo.ObjectID(hexString)\n   83      new mongo.Timestamp()  // the actual unique number is generated on insert.\n   84:     new mongo.DBRef(collectionName, id, dbName)\n   85      new mongo.Binary(buffer)  // takes a string or Buffer\n   86      new mongo.Code(code, [context])\n\n/Users/pezillionaire/GitHub/simpllist/package.json:\n    1  {\n    2:     \"name\": \"application-name\"\n    3    , \"version\": \"0.0.1\"\n    4    , \"private\": true\n\n/Users/pezillionaire/GitHub/simpllist/public/js/controllers.js:\n    4  \n    5  function AppCtrl($scope, $http) {\n    6:   $http({method: 'GET', url: '/api/name'}).\n    7    success(function(data, status, headers, config) {\n    8:     $scope.name = data.name;\n    9    }).\n   10    error(function(data, status, headers, config) {\n   11:     $scope.name = 'Error!'\n   12    });\n   13  }\n\n/Users/pezillionaire/GitHub/simpllist/public/js/lib/angular/angular-cookies.js:\n    9  /**\n   10   * @ngdoc overview\n   11:  * @name ngCookies\n   12   */\n   13  \n   ..\n   16    /**\n   17     * @ngdoc object\n   18:    * @name ngCookies.$cookies\n   19     * @requires $browser\n   20     *\n   ..\n   60         */\n   61        function push() {\n   62:         var name,\n   63              value,\n   64              browserCookies,\n   ..\n   66  \n   67          //delete any cookies deleted in $cookies\n   68:         for (name in lastCookies) {\n   69:           if (isUndefined(cookies[name])) {\n   70:             $browser.cookies(name, undefined);\n   71            }\n   72          }\n   73  \n   74          //update all cookies updated in $cookies\n   75:         for(name in cookies) {\n   76:           value = cookies[name];\n   77            if (!angular.isString(value)) {\n   78:             if (angular.isDefined(lastCookies[name])) {\n   79:               cookies[name] = lastCookies[name];\n   80              } else {\n   81:               delete cookies[name];\n   82              }\n   83:           } else if (value !== lastCookies[name]) {\n   84:             $browser.cookies(name, value);\n   85              updated = true;\n   86            }\n   ..\n   92            browserCookies = $browser.cookies();\n   93  \n   94:           for (name in cookies) {\n   95:             if (cookies[name] !== browserCookies[name]) {\n   96                //delete or reset all cookies that the browser dropped from $cookies\n   97:               if (isUndefined(browserCookies[name])) {\n   98:                 delete cookies[name];\n   99                } else {\n  100:                 cookies[name] = browserCookies[name];\n  101                }\n  102                updated = true;\n  ...\n  110    /**\n  111     * @ngdoc object\n  112:    * @name ngCookies.$cookieStore\n  113     * @requires $cookies\n  114     *\n  ...\n  124          /**\n  125           * @ngdoc method\n  126:          * @name ngCookies.$cookieStore#get\n  127           * @methodOf ngCookies.$cookieStore\n  128           *\n  ...\n  139          /**\n  140           * @ngdoc method\n  141:          * @name ngCookies.$cookieStore#put\n  142           * @methodOf ngCookies.$cookieStore\n  143           *\n  ...\n  154          /**\n  155           * @ngdoc method\n  156:          * @name ngCookies.$cookieStore#remove\n  157           * @methodOf ngCookies.$cookieStore\n  158           *\n\n/Users/pezillionaire/GitHub/simpllist/public/js/lib/angular/angular-loader.js:\n    9  /**\n   10   * @ngdoc interface\n   11:  * @name angular.Module\n   12   * @description\n   13   *\n   ..\n   17  function setupModuleLoader(window) {\n   18  \n   19:   function ensure(obj, name, factory) {\n   20:     return obj[name] || (obj[name] = factory());\n   21    }\n   22  \n   ..\n   27      /**\n   28       * @ngdoc function\n   29:      * @name angular.module\n   30       * @description\n   31       *\n   ..\n   45       *\n   46       * // register a new service\n   47:      * myModule.value('appName', 'MyCoolApp');\n   48       *\n   49       * // configure existing services inside initialization blocks.\n   ..\n   65       * {@link angular.bootstrap} to simplify this process for you.\n   66       *\n   67:      * @param {!string} name The name of the module to create or retrieve.\n   68       * @param {Array.<string>=} requires If specified then new module is being created. If unspecified then the\n   69       *        the module is being retrieved for further configuration.\n   ..\n   72       * @returns {module} new module with the {@link angular.Module} api.\n   73       */\n   74:     return function module(name, requires, configFn) {\n   75:       if (requires && modules.hasOwnProperty(name)) {\n   76:         modules[name] = null;\n   77        }\n   78:       return ensure(modules, name, function() {\n   79          if (!requires) {\n   80:           throw Error('No module: ' + name);\n   81          }\n   82  \n   ..\n   97            /**\n   98             * @ngdoc property\n   99:            * @name angular.Module#requires\n  100             * @propertyOf angular.Module\n  101:            * @returns {Array.<string>} List of module names which must be loaded before this module.\n  102             * @description\n  103             * Holds the list of modules which the injector will load before the current module is loaded.\n  ...\n  107            /**\n  108             * @ngdoc property\n  109:            * @name angular.Module#name\n  110             * @propertyOf angular.Module\n  111:            * @returns {string} Name of the module.\n  112             * @description\n  113             */\n  114:           name: name,\n  115  \n  116  \n  117            /**\n  118             * @ngdoc method\n  119:            * @name angular.Module#provider\n  120             * @methodOf angular.Module\n  121:            * @param {string} name service name\n  122             * @param {Function} providerType Construction function for creating new instance of the service.\n  123             * @description\n  ...\n  128            /**\n  129             * @ngdoc method\n  130:            * @name angular.Module#factory\n  131             * @methodOf angular.Module\n  132:            * @param {string} name service name\n  133             * @param {Function} providerFunction Function for creating new instance of the service.\n  134             * @description\n  ...\n  139            /**\n  140             * @ngdoc method\n  141:            * @name angular.Module#service\n  142             * @methodOf angular.Module\n  143:            * @param {string} name service name\n  144             * @param {Function} constructor A constructor function that will be instantiated.\n  145             * @description\n  ...\n  150            /**\n  151             * @ngdoc method\n  152:            * @name angular.Module#value\n  153             * @methodOf angular.Module\n  154:            * @param {string} name service name\n  155             * @param {*} object Service instance object.\n  156             * @description\n  ...\n  161            /**\n  162             * @ngdoc method\n  163:            * @name angular.Module#constant\n  164             * @methodOf angular.Module\n  165:            * @param {string} name constant name\n  166             * @param {*} object Constant value.\n  167             * @description\n  ...\n  173            /**\n  174             * @ngdoc method\n  175:            * @name angular.Module#filter\n  176             * @methodOf angular.Module\n  177:            * @param {string} name Filter name.\n  178             * @param {Function} filterFactory Factory function for creating new instance of filter.\n  179             * @description\n  ...\n  184            /**\n  185             * @ngdoc method\n  186:            * @name angular.Module#controller\n  187             * @methodOf angular.Module\n  188:            * @param {string} name Controller name.\n  189             * @param {Function} constructor Controller constructor function.\n  190             * @description\n  ...\n  195            /**\n  196             * @ngdoc method\n  197:            * @name angular.Module#directive\n  198             * @methodOf angular.Module\n  199:            * @param {string} name directive name\n  200             * @param {Function} directiveFactory Factory function for creating new instance of\n  201             * directives.\n  ...\n  207            /**\n  208             * @ngdoc method\n  209:            * @name angular.Module#config\n  210             * @methodOf angular.Module\n  211             * @param {Function} configFn Execute this function on module load. Useful for service\n  ...\n  218            /**\n  219             * @ngdoc method\n  220:            * @name angular.Module#run\n  221             * @methodOf angular.Module\n  222             * @param {Function} initializationFn Execute this function after injector creation.\n\n/Users/pezillionaire/GitHub/simpllist/public/js/lib/angular/angular-loader.min.js:\n    4   License: MIT\n    5  */\n    6: (function(i){'use strict';function d(c,b,e){return c[b]||(c[b]=e())}return d(d(i,\"angular\",Object),\"module\",function(){var c={};return function(b,e,f){e&&c.hasOwnProperty(b)&&(c[b]=null);return d(c,b,function(){function a(a,b,d){return function(){c[d||\"push\"]([a,b,arguments]);return g}}if(!e)throw Error(\"No module: \"+b);var c=[],d=[],h=a(\"$injector\",\"invoke\"),g={_invokeQueue:c,_runBlocks:d,requires:e,name:b,provider:a(\"$provide\",\"provider\"),factory:a(\"$provide\",\"factory\"),service:a(\"$provide\",\"service\"),\n    7  value:a(\"$provide\",\"value\"),constant:a(\"$provide\",\"constant\",\"unshift\"),filter:a(\"$filterProvider\",\"register\"),controller:a(\"$controllerProvider\",\"register\"),directive:a(\"$compileProvider\",\"directive\"),config:h,run:function(a){d.push(a);return this}};f&&h(f);return g})}})})(window);\n    8  \n\n/Users/pezillionaire/GitHub/simpllist/public/js/lib/angular/angular-resource.js:\n    9  /**\n   10   * @ngdoc overview\n   11:  * @name ngResource\n   12   * @description\n   13   */\n   ..\n   15   /**\n   16   * @ngdoc object\n   17:  * @name ngResource.$resource\n   18   * @requires $http\n   19   *\n   ..\n   26   *\n   27   * @param {string} url A parameterized URL template with parameters prefixed by `:` as in\n   28:  *   `/user/:username`.\n   29   *\n   30   * @param {Object=} paramDefaults Default values for `url` parameters. These can be overridden in\n   ..\n   49   *   Where:\n   50   *\n   51:  *   - `action` – {string} – The name of action. This name becomes the name of the method on your\n   52   *     resource object.\n   53   *   - `method` – {string} – HTTP request method. Valid methods are: `GET`, `POST`, `PUT`, `DELETE`,\n   ..\n  109       var cards = CreditCard.query(function() {\n  110         // GET: /user/123/card\n  111:        // server returns: [ {id:456, number:'1234', name:'Smith'} ];\n  112  \n  113         var card = cards[0];\n  114         // each item is an instance of CreditCard\n  115         expect(card instanceof CreditCard).toEqual(true);\n  116:        card.name = \"J. Smith\";\n  117         // non GET methods are mapped onto the instances\n  118         card.$save();\n  119:        // POST: /user/123/card/456 {id:456, number:'1234', name:'J. Smith'}\n  120:        // server returns: {id:456, number:'1234', name: 'J. Smith'};\n  121  \n  122         // our custom method is mapped as well.\n  123         card.$charge({amount:9.99});\n  124:        // POST: /user/123/card/456?amount=9.99&charge=true {id:456, number:'1234', name:'J. Smith'}\n  125       });\n  126  \n  127       // we can create an instance as well\n  128       var newCard = new CreditCard({number:'0123'});\n  129:      newCard.name = \"Mike Smith\";\n  130       newCard.$save();\n  131:      // POST: /user/123/card {number:'0123', name:'Mike Smith'}\n  132:      // server returns: {id:789, number:'01234', name: 'Mike Smith'};\n  133       expect(newCard.id).toEqual(789);\n  134   * </pre>\n  ...\n  198             <h1 style=\"font-size: 15px;\">\n  199               <img src=\"{{item.actor.thumbnailUrl}}\" style=\"max-height:30px;max-width:30px;\"/>\n  200:              <a href=\"{{item.actor.profileUrl}}\">{{item.actor.name}}</a>\n  201               <a href ng-click=\"expandReplies(item)\" style=\"float: right;\">Expand replies: {{item.links.replies[0].count}}</a>\n  202             </h1>\n  ...\n  204             <div ng-repeat=\"reply in item.replies.data.items\" style=\"margin-left: 20px;\">\n  205               <img src=\"{{reply.actor.thumbnailUrl}}\" style=\"max-height:30px;max-width:30px;\"/>\n  206:              <a href=\"{{reply.actor.profileUrl}}\">{{reply.actor.name}}</a>: {{reply.content | html}}\n  207             </div>\n  208           </div>\n  ...\n  331        }\n  332  \n  333:       forEach(actions, function(action, name) {\n  334          var hasBody = action.method == 'POST' || action.method == 'PUT' || action.method == 'PATCH';\n  335:         Resource[name] = function(a1, a2, a3, a4) {\n  336            var params = {};\n  337            var data;\n  ...\n  402  \n  403  \n  404:         Resource.prototype['$' + name] = function(a1, a2, a3) {\n  405            var params = extractParams(this),\n  406                success = noop,\n  ...\n  424            }\n  425            var data = hasBody ? this : undefined;\n  426:           Resource[name].call(this, params, data, success, error);\n  427          };\n  428        });\n\n/Users/pezillionaire/GitHub/simpllist/public/js/lib/angular/angular-sanitize.js:\n    9  /**\n   10   * @ngdoc overview\n   11:  * @name ngSanitize\n   12   * @description\n   13   */\n   ..\n   32  /**\n   33   * @ngdoc service\n   34:  * @name ngSanitize.$sanitize\n   35   * @function\n   36   *\n   ..\n  265    parseEndTag();\n  266  \n  267:   function parseStartTag( tag, tagName, rest, unary ) {\n  268:     tagName = angular.lowercase(tagName);\n  269:     if ( blockElements[ tagName ] ) {\n  270        while ( stack.last() && inlineElements[ stack.last() ] ) {\n  271          parseEndTag( \"\", stack.last() );\n  ...\n  273      }\n  274  \n  275:     if ( optionalEndTagElements[ tagName ] && stack.last() == tagName ) {\n  276:       parseEndTag( \"\", tagName );\n  277      }\n  278  \n  279:     unary = voidElements[ tagName ] || !!unary;\n  280  \n  281      if ( !unary )\n  282:       stack.push( tagName );\n  283  \n  284      var attrs = {};\n  285  \n  286:     rest.replace(ATTR_REGEXP, function(match, name, doubleQuotedValue, singleQoutedValue, unqoutedValue) {\n  287        var value = doubleQuotedValue\n  288          || singleQoutedValue\n  ...\n  290          || '';\n  291  \n  292:       attrs[name] = decodeEntities(value);\n  293      });\n  294:     if (handler.start) handler.start( tagName, attrs, unary );\n  295    }\n  296  \n  297:   function parseEndTag( tag, tagName ) {\n  298      var pos = 0, i;\n  299:     tagName = angular.lowercase(tagName);\n  300:     if ( tagName )\n  301        // Find the closest opened tag of the same type\n  302        for ( pos = stack.length - 1; pos >= 0; pos-- )\n  303:         if ( stack[ pos ] == tagName )\n  304            break;\n  305  \n  ...\n  403  /**\n  404   * @ngdoc directive\n  405:  * @name ngSanitize.directive:ngBindHtml\n  406   *\n  407   * @description\n  ...\n  425  /**\n  426   * @ngdoc filter\n  427:  * @name ngSanitize.filter:linky\n  428   * @function\n  429   *\n\n/Users/pezillionaire/GitHub/simpllist/public/js/lib/angular/angular.js:\n   11  /**\n   12   * @ngdoc function\n   13:  * @name angular.lowercase\n   14   * @function\n   15   *\n   ..\n   23  /**\n   24   * @ngdoc function\n   25:  * @name angular.uppercase\n   26   * @function\n   27   *\n   ..\n   65      toString          = Object.prototype.toString,\n   66  \n   67:     /** @name angular */\n   68      angular           = window.angular || (window.angular = {}),\n   69      angularModule,\n   70:     nodeName_,\n   71      uid               = ['0', '0', '0'];\n   72  \n   73  /**\n   74   * @ngdoc function\n   75:  * @name angular.forEach\n   76   * @function\n   77   *\n   ..\n   85   *\n   86     <pre>\n   87:      var values = {name: 'misko', gender: 'male'};\n   88       var log = [];\n   89       angular.forEach(values, function(value, key){\n   90         this.push(key + ': ' + value);\n   91       }, log);\n   92:      expect(log).toEqual(['name: misko', 'gender:male']);\n   93     </pre>\n   94   *\n   ..\n  103      if (isFunction(obj)){\n  104        for (key in obj) {\n  105:         if (key != 'prototype' && key != 'length' && key != 'name' && obj.hasOwnProperty(key)) {\n  106            iterator.call(context, obj[key], key);\n  107          }\n  ...\n  183  /**\n  184   * @ngdoc function\n  185:  * @name angular.extend\n  186   * @function\n  187   *\n  ...\n  216  /**\n  217   * @ngdoc function\n  218:  * @name angular.noop\n  219   * @function\n  220   *\n  ...\n  235  /**\n  236   * @ngdoc function\n  237:  * @name angular.identity\n  238   * @function\n  239   *\n  ...\n  256  /**\n  257   * @ngdoc function\n  258:  * @name angular.isUndefined\n  259   * @function\n  260   *\n  ...\n  270  /**\n  271   * @ngdoc function\n  272:  * @name angular.isDefined\n  273   * @function\n  274   *\n  ...\n  284  /**\n  285   * @ngdoc function\n  286:  * @name angular.isObject\n  287   * @function\n  288   *\n  ...\n  299  /**\n  300   * @ngdoc function\n  301:  * @name angular.isString\n  302   * @function\n  303   *\n  ...\n  313  /**\n  314   * @ngdoc function\n  315:  * @name angular.isNumber\n  316   * @function\n  317   *\n  ...\n  327  /**\n  328   * @ngdoc function\n  329:  * @name angular.isDate\n  330   * @function\n  331   *\n  ...\n  343  /**\n  344   * @ngdoc function\n  345:  * @name angular.isArray\n  346   * @function\n  347   *\n  ...\n  359  /**\n  360   * @ngdoc function\n  361:  * @name angular.isFunction\n  362   * @function\n  363   *\n  ...\n  404  /**\n  405   * @ngdoc function\n  406:  * @name angular.isElement\n  407   * @function\n  408   *\n  ...\n  415  function isElement(node) {\n  416    return node &&\n  417:     (node.nodeName  // we are a direct element\n  418      || (node.bind && node.find));  // we have a bind and find method part of jQuery API\n  419  }\n  ...\n  432  \n  433  if (msie < 9) {\n  434:   nodeName_ = function(element) {\n  435:     element = element.nodeName ? element : element[0];\n  436:     return (element.scopeName && element.scopeName != 'HTML')\n  437:       ? uppercase(element.scopeName + ':' + element.nodeName) : element.nodeName;\n  438    };\n  439  } else {\n  440:   nodeName_ = function(element) {\n  441:     return element.nodeName ? element.nodeName : element[0].nodeName;\n  442    };\n  443  }\n  ...\n  502  function isLeafNode (node) {\n  503    if (node) {\n  504:     switch (node.nodeName) {\n  505      case \"OPTION\":\n  506      case \"PRE\":\n  ...\n  514  /**\n  515   * @ngdoc function\n  516:  * @name angular.copy\n  517   * @function\n  518   *\n  ...\n  586  /**\n  587   * @ngdoc function\n  588:  * @name angular.equals\n  589   * @function\n  590   *\n  ...\n  599   * * Both values are NaN. (In JavasScript, NaN == NaN => false. But we consider two NaN as equal)\n  600   *\n  601:  * During a property comparision, properties of `function` type and properties with names\n  602   * that begin with `$` are ignored.\n  603   *\n  ...\n  655  /**\n  656   * @ngdoc function\n  657:  * @name angular.bind\n  658   * @function\n  659   *\n  ...\n  708  /**\n  709   * @ngdoc function\n  710:  * @name angular.toJson\n  711   * @function\n  712   *\n  ...\n  725  /**\n  726   * @ngdoc function\n  727:  * @name angular.fromJson\n  728   * @function\n  729   *\n  ...\n  763    return jqLite('<div>').append(element).html().\n  764        match(/^(<[^>]+>)/)[1].\n  765:       replace(/^<([\\w\\-]+)/, function(match, nodeName) { return '<' + lowercase(nodeName); });\n  766  }\n  767  \n  ...\n  836  /**\n  837   * @ngdoc directive\n  838:  * @name ng.directive:ngApp\n  839   *\n  840   * @element ANY\n  841   * @param {angular.Module} ngApp an optional application\n  842:  *   {@link angular.module module} name to load.\n  843   *\n  844   * @description\n  ...\n  866        appElement,\n  867        module,\n  868:       names = ['ng:app', 'ng-app', 'x-ng-app', 'data-ng-app'],\n  869        NG_APP_CLASS_REGEXP = /\\sng[:\\-]app(:\\s*([\\w\\d_]+);?)?\\s/;\n  870  \n  ...\n  873    }\n  874  \n  875:   forEach(names, function(name) {\n  876:     names[name] = true;\n  877:     append(document.getElementById(name));\n  878:     name = name.replace(':', '\\\\:');\n  879      if (element.querySelectorAll) {\n  880:       forEach(element.querySelectorAll('.' + name), append);\n  881:       forEach(element.querySelectorAll('.' + name + '\\\\:'), append);\n  882:       forEach(element.querySelectorAll('[' + name + ']'), append);\n  883      }\n  884    });\n  ...\n  886    forEach(elements, function(element) {\n  887      if (!appElement) {\n  888:       var className = ' ' + element.className + ' ';\n  889:       var match = NG_APP_CLASS_REGEXP.exec(className);\n  890        if (match) {\n  891          appElement = element;\n  ...\n  893        } else {\n  894          forEach(element.attributes, function(attr) {\n  895:           if (!appElement && names[attr.name]) {\n  896              appElement = element;\n  897              module = attr.value;\n  ...\n  908  /**\n  909   * @ngdoc function\n  910:  * @name angular.bootstrap\n  911   * @description\n  912   * Use this function to manually start up angular application.\n  ...\n  938  \n  939  var SNAKE_CASE_REGEXP = /[A-Z]/g;\n  940: function snake_case(name, separator){\n  941    separator = separator || '_';\n  942:   return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {\n  943      return (pos ? separator : '') + letter.toLowerCase();\n  944    });\n  ...\n  969   * throw error of the argument is falsy.\n  970   */\n  971: function assertArg(arg, name, reason) {\n  972    if (!arg) {\n  973:     throw new Error(\"Argument '\" + (name || '?') + \"' is \" + (reason || \"required\"));\n  974    }\n  975    return arg;\n  976  }\n  977  \n  978: function assertArgFn(arg, name, acceptArrayAnnotation) {\n  979    if (acceptArrayAnnotation && isArray(arg)) {\n  980        arg = arg[arg.length - 1];\n  981    }\n  982  \n  983:   assertArg(isFunction(arg), name, 'not a function, got ' +\n  984:       (arg && typeof arg == 'object' ? arg.constructor.name || 'Object' : typeof arg));\n  985    return arg;\n  986  }\n  ...\n  988  /**\n  989   * @ngdoc interface\n  990:  * @name angular.Module\n  991   * @description\n  992   *\n  ...\n  996  function setupModuleLoader(window) {\n  997  \n  998:   function ensure(obj, name, factory) {\n  999:     return obj[name] || (obj[name] = factory());\n 1000    }\n 1001  \n ....\n 1006      /**\n 1007       * @ngdoc function\n 1008:      * @name angular.module\n 1009       * @description\n 1010       *\n ....\n 1024       *\n 1025       * // register a new service\n 1026:      * myModule.value('appName', 'MyCoolApp');\n 1027       *\n 1028       * // configure existing services inside initialization blocks.\n ....\n 1043       * {@link angular.bootstrap} to simplify this process for you.\n 1044       *\n 1045:      * @param {!string} name The name of the module to create or retrieve.\n 1046       * @param {Array.<string>=} requires If specified then new module is being created. If unspecified then the\n 1047       *        the module is being retrieved for further configuration.\n ....\n 1050       * @returns {module} new module with the {@link angular.Module} api.\n 1051       */\n 1052:     return function module(name, requires, configFn) {\n 1053:       if (requires && modules.hasOwnProperty(name)) {\n 1054:         modules[name] = null;\n 1055        }\n 1056:       return ensure(modules, name, function() {\n 1057          if (!requires) {\n 1058:           throw Error('No module: ' + name);\n 1059          }\n 1060  \n ....\n 1075            /**\n 1076             * @ngdoc property\n 1077:            * @name angular.Module#requires\n 1078             * @propertyOf angular.Module\n 1079:            * @returns {Array.<string>} List of module names which must be loaded before this module.\n 1080             * @description\n 1081             * Holds the list of modules which the injector will load before the current module is loaded.\n ....\n 1085            /**\n 1086             * @ngdoc property\n 1087:            * @name angular.Module#name\n 1088             * @propertyOf angular.Module\n 1089:            * @returns {string} Name of the module.\n 1090             * @description\n 1091             */\n 1092:           name: name,\n 1093  \n 1094  \n 1095            /**\n 1096             * @ngdoc method\n 1097:            * @name angular.Module#provider\n 1098             * @methodOf angular.Module\n 1099:            * @param {string} name service name\n 1100             * @param {Function} providerType Construction function for creating new instance of the service.\n 1101             * @description\n ....\n 1106            /**\n 1107             * @ngdoc method\n 1108:            * @name angular.Module#factory\n 1109             * @methodOf angular.Module\n 1110:            * @param {string} name service name\n 1111             * @param {Function} providerFunction Function for creating new instance of the service.\n 1112             * @description\n ....\n 1117            /**\n 1118             * @ngdoc method\n 1119:            * @name angular.Module#service\n 1120             * @methodOf angular.Module\n 1121:            * @param {string} name service name\n 1122             * @param {Function} constructor A constructor function that will be instantiated.\n 1123             * @description\n ....\n 1128            /**\n 1129             * @ngdoc method\n 1130:            * @name angular.Module#value\n 1131             * @methodOf angular.Module\n 1132:            * @param {string} name service name\n 1133             * @param {*} object Service instance object.\n 1134             * @description\n ....\n 1139            /**\n 1140             * @ngdoc method\n 1141:            * @name angular.Module#constant\n 1142             * @methodOf angular.Module\n 1143:            * @param {string} name constant name\n 1144             * @param {*} object Constant value.\n 1145             * @description\n ....\n 1151            /**\n 1152             * @ngdoc method\n 1153:            * @name angular.Module#filter\n 1154             * @methodOf angular.Module\n 1155:            * @param {string} name Filter name.\n 1156             * @param {Function} filterFactory Factory function for creating new instance of filter.\n 1157             * @description\n ....\n 1162            /**\n 1163             * @ngdoc method\n 1164:            * @name angular.Module#controller\n 1165             * @methodOf angular.Module\n 1166:            * @param {string} name Controller name.\n 1167             * @param {Function} constructor Controller constructor function.\n 1168             * @description\n ....\n 1173            /**\n 1174             * @ngdoc method\n 1175:            * @name angular.Module#directive\n 1176             * @methodOf angular.Module\n 1177:            * @param {string} name directive name\n 1178             * @param {Function} directiveFactory Factory function for creating new instance of\n 1179             * directives.\n ....\n 1185            /**\n 1186             * @ngdoc method\n 1187:            * @name angular.Module#config\n 1188             * @methodOf angular.Module\n 1189             * @param {Function} configFn Execute this function on module load. Useful for service\n ....\n 1196            /**\n 1197             * @ngdoc method\n 1198:            * @name angular.Module#run\n 1199             * @methodOf angular.Module\n 1200             * @param {Function} initializationFn Execute this function after injector creation.\n ....\n 1236  /**\n 1237   * @ngdoc property\n 1238:  * @name angular.version\n 1239   * @description\n 1240   * An object that contains information about the current AngularJS version. This object has the\n ....\n 1245   * - `minor` – `{number}` – Minor version number, such as \"9\".\n 1246   * - `dot` – `{number}` – Dot version number, such as \"18\".\n 1247:  * - `codeName` – `{string}` – Code name of the release, such as \"jiggling-armfat\".\n 1248   */\n 1249  var version = {\n ....\n 1252    minor: 0,\n 1253    dot: 3,\n 1254:   codeName: 'bouncy-thunder'\n 1255  };\n 1256  \n ....\n 1371  /**\n 1372   * @ngdoc function\n 1373:  * @name angular.element\n 1374   * @function\n 1375   *\n ....\n 1404   * - [data()](http://api.jquery.com/data/)\n 1405   * - [eq()](http://api.jquery.com/eq/)\n 1406:  * - [find()](http://api.jquery.com/find/) - Limited to lookups by tag name.\n 1407   * - [hasClass()](http://api.jquery.com/hasClass/)\n 1408   * - [html()](http://api.jquery.com/html/)\n ....\n 1426   * ## In addtion to the above, Angular privides an additional method to both jQuery and jQuery lite:\n 1427   *\n 1428:  * - `controller(name)` - retrieves the controller of the current element or its parent. By default\n 1429:  *   retrieves controller associated with the `ngController` directive. If `name` is provided as\n 1430:  *   camelCase directive name, then the controller for this directive will be retrieved (e.g.\n 1431   *   `'ngModel'`).\n 1432   * - `injector()` - retrieves the injector of the current element or its parent.\n ....\n 1441  \n 1442  var jqCache = JQLite.cache = {},\n 1443:     jqName = JQLite.expando = 'ng-' + new Date().getTime(),\n 1444      jqId = 1,\n 1445      addEventListenerFn = (window.document.addEventListener\n ....\n 1459   * Converts snake_case to camelCase.\n 1460   * Also there is special case for Moz prefix starting with upper case letter.\n 1461:  * @param name Name to normalize\n 1462   */\n 1463: function camelCase(name) {\n 1464:   return name.\n 1465      replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {\n 1466        return offset ? letter.toUpperCase() : letter;\n ....\n 1477  /////////////////////////////////////////////\n 1478  \n 1479: function JQLitePatchJQueryRemove(name, dispatchThis) {\n 1480:   var originalJqFn = jQuery.fn[name];\n 1481    originalJqFn = originalJqFn.$original || originalJqFn;\n 1482    removePatch.$original = originalJqFn;\n 1483:   jQuery.fn[name] = removePatch;\n 1484  \n 1485    function removePatch() {\n ....\n 1568  \n 1569  function JQLiteRemoveData(element) {\n 1570:   var expandoId = element[jqName],\n 1571        expandoStore = jqCache[expandoId];\n 1572  \n ....\n 1577      }\n 1578      delete jqCache[expandoId];\n 1579:     element[jqName] = undefined; // ie does not allow deletion of attributes on elements.\n 1580    }\n 1581  }\n 1582  \n 1583  function JQLiteExpandoStore(element, key, value) {\n 1584:   var expandoId = element[jqName],\n 1585        expandoStore = jqCache[expandoId || -1];\n 1586  \n 1587    if (isDefined(value)) {\n 1588      if (!expandoStore) {\n 1589:       element[jqName] = expandoId = jqNextId();\n 1590        expandoStore = jqCache[expandoId] = {};\n 1591      }\n ....\n 1623  \n 1624  function JQLiteHasClass(element, selector) {\n 1625:   return ((\" \" + element.className + \" \").replace(/[\\n\\t]/g, \" \").\n 1626        indexOf( \" \" + selector + \" \" ) > -1);\n 1627  }\n ....\n 1630    if (cssClasses) {\n 1631      forEach(cssClasses.split(' '), function(cssClass) {\n 1632:       element.className = trim(\n 1633:           (\" \" + element.className + \" \")\n 1634            .replace(/[\\n\\t]/g, \" \")\n 1635            .replace(\" \" + trim(cssClass) + \" \", \" \")\n ....\n 1643      forEach(cssClasses.split(' '), function(cssClass) {\n 1644        if (!JQLiteHasClass(element, cssClass)) {\n 1645:         element.className = trim(element.className + ' ' + trim(cssClass));\n 1646        }\n 1647      });\n ....\n 1651  function JQLiteAddNodes(root, elements) {\n 1652    if (elements) {\n 1653:     elements = (!elements.nodeName && isDefined(elements.length) && !isWindow(elements))\n 1654        ? elements\n 1655        : [ elements ];\n ....\n 1660  }\n 1661  \n 1662: function JQLiteController(element, name) {\n 1663:   return JQLiteInheritedData(element, '$' + (name || 'ngController' ) + 'Controller');\n 1664  }\n 1665  \n 1666: function JQLiteInheritedData(element, name, value) {\n 1667    element = jqLite(element);\n 1668  \n ....\n 1674  \n 1675    while (element.length) {\n 1676:     if (value = element.data(name)) return value;\n 1677      element = element.parent();\n 1678    }\n ....\n 1726  });\n 1727  \n 1728: function getBooleanAttrName(element, name) {\n 1729:   // check dom last since we will most likely fail on name\n 1730:   var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];\n 1731  \n 1732    // booleanAttr is here twice to minimize DOM access\n 1733:   return booleanAttr && BOOLEAN_ELEMENTS[element.nodeName] && booleanAttr;\n 1734  }\n 1735  \n ....\n 1748    },\n 1749  \n 1750:   removeAttr: function(element,name) {\n 1751:     element.removeAttribute(name);\n 1752    },\n 1753  \n 1754    hasClass: JQLiteHasClass,\n 1755  \n 1756:   css: function(element, name, value) {\n 1757:     name = camelCase(name);\n 1758  \n 1759      if (isDefined(value)) {\n 1760:       element.style[name] = value;\n 1761      } else {\n 1762        var val;\n ....\n 1764        if (msie <= 8) {\n 1765          // this is some IE specific weirdness that jQuery 1.6.4 does not sure why\n 1766:         val = element.currentStyle && element.currentStyle[name];\n 1767          if (val === '') val = 'auto';\n 1768        }\n 1769  \n 1770:       val = val || element.style[name];\n 1771  \n 1772        if (msie <= 8) {\n ....\n 1779    },\n 1780  \n 1781:   attr: function(element, name, value){\n 1782:     var lowercasedName = lowercase(name);\n 1783:     if (BOOLEAN_ATTR[lowercasedName]) {\n 1784        if (isDefined(value)) {\n 1785          if (!!value) {\n 1786:           element[name] = true;\n 1787:           element.setAttribute(name, lowercasedName);\n 1788          } else {\n 1789:           element[name] = false;\n 1790:           element.removeAttribute(lowercasedName);\n 1791          }\n 1792        } else {\n 1793:         return (element[name] ||\n 1794:                  (element.attributes.getNamedItem(name)|| noop).specified)\n 1795:                ? lowercasedName\n 1796                 : undefined;\n 1797        }\n 1798      } else if (isDefined(value)) {\n 1799:       element.setAttribute(name, value);\n 1800      } else if (element.getAttribute) {\n 1801        // the extra argument \"2\" is to get the right thing for a.href in IE, see jQuery code\n 1802        // some elements (e.g. Document) don't have get attribute, so return undefined\n 1803:       var ret = element.getAttribute(name, 2);\n 1804        // normalize non-existing attributes to undefined (as jQuery)\n 1805        return ret === null ? undefined : ret;\n ....\n 1807    },\n 1808  \n 1809:   prop: function(element, name, value) {\n 1810      if (isDefined(value)) {\n 1811:       element[name] = value;\n 1812      } else {\n 1813:       return element[name];\n 1814      }\n 1815    },\n ....\n 1850      element.innerHTML = value;\n 1851    }\n 1852: }, function(fn, name){\n 1853    /**\n 1854     * Properties: writes return selection, reads return first value\n 1855     */\n 1856:   JQLite.prototype[name] = function(arg1, arg2) {\n 1857      var i, key;\n 1858  \n ....\n 2012      var children = [];\n 2013      forEach(element.childNodes, function(element){\n 2014:       if (element.nodeName != '#text')\n 2015          children.push(element);\n 2016      });\n ....\n 2086  \n 2087    find: function(element, selector) {\n 2088:     return element.getElementsByTagName(selector);\n 2089    },\n 2090  \n 2091    clone: JQLiteClone,\n 2092  \n 2093:   triggerHandler: function(element, eventName) {\n 2094:     var eventFns = (JQLiteExpandoStore(element, 'events') || {})[eventName];\n 2095  \n 2096      forEach(eventFns, function(fn) {\n ....\n 2098      });\n 2099    }\n 2100: }, function(fn, name){\n 2101    /**\n 2102     * chaining functions\n 2103     */\n 2104:   JQLite.prototype[name] = function(arg1, arg2) {\n 2105      var value;\n 2106      for(var i=0; i < this.length; i++) {\n ....\n 2230  /**\n 2231   * @ngdoc function\n 2232:  * @name angular.injector\n 2233   * @function\n 2234   *\n ....\n 2260  /**\n 2261   * @ngdoc overview\n 2262:  * @name AUTO\n 2263   * @description\n 2264   *\n ....\n 2282        argDecl = fnText.match(FN_ARGS);\n 2283        forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg){\n 2284:         arg.replace(FN_ARG, function(all, underscore, name){\n 2285:           $inject.push(name);\n 2286          });\n 2287        });\n ....\n 2302  /**\n 2303   * @ngdoc object\n 2304:  * @name AUTO.$injector\n 2305   * @function\n 2306   *\n ....\n 2343   * In JavaScript calling `toString()` on a function returns the function definition. The definition can then be\n 2344   * parsed and the function arguments can be extracted. *NOTE:* This does not work with minification, and obfuscation\n 2345:  * tools since these tools change the argument names.\n 2346   *\n 2347   * ## `$inject` Annotation\n ....\n 2349   *\n 2350   * ## Inline\n 2351:  * As an array of injection names, where the last item in the array is the function to call.\n 2352   */\n 2353  \n 2354  /**\n 2355   * @ngdoc method\n 2356:  * @name AUTO.$injector#get\n 2357   * @methodOf AUTO.$injector\n 2358   *\n ....\n 2360   * Return an instance of the service.\n 2361   *\n 2362:  * @param {string} name The name of the instance to retrieve.\n 2363   * @return {*} The instance.\n 2364   */\n ....\n 2366  /**\n 2367   * @ngdoc method\n 2368:  * @name AUTO.$injector#invoke\n 2369   * @methodOf AUTO.$injector\n 2370   *\n ....\n 2374   * @param {!function} fn The function to invoke. The function arguments come form the function annotation.\n 2375   * @param {Object=} self The `this` for the invoked method.\n 2376:  * @param {Object=} locals Optional object. If preset then any argument names are read from this object first, before\n 2377   *   the `$injector` is consulted.\n 2378   * @returns {*} the value returned by the invoked `fn` function.\n ....\n 2381  /**\n 2382   * @ngdoc method\n 2383:  * @name AUTO.$injector#instantiate\n 2384   * @methodOf AUTO.$injector\n 2385   * @description\n ....\n 2388   *\n 2389   * @param {function} Type Annotated constructor function.\n 2390:  * @param {Object=} locals Optional object. If preset then any argument names are read from this object first, before\n 2391   *   the `$injector` is consulted.\n 2392   * @returns {Object} new instance of `Type`.\n ....\n 2395  /**\n 2396   * @ngdoc method\n 2397:  * @name AUTO.$injector#annotate\n 2398   * @methodOf AUTO.$injector\n 2399   *\n 2400   * @description\n 2401:  * Returns an array of service names which the function is requesting for injection. This API is used by the injector\n 2402   * to determine which services need to be injected into the function when the function is invoked. There are three\n 2403   * ways in which the function can be annotated with the needed dependencies.\n 2404   *\n 2405:  * # Argument names\n 2406   *\n 2407   * The simplest form is to extract the dependencies from the arguments of the function. This is done by converting\n 2408:  * the function into a string using `toString()` method and extracting the argument names.\n 2409   * <pre>\n 2410   *   // Given\n ....\n 2422   * # The `$injector` property\n 2423   *\n 2424:  * If a function has an `$inject` property and its value is an array of strings, then the strings represent names of\n 2425   * services to be injected into the function.\n 2426   * <pre>\n ....\n 2466   * </pre>\n 2467   *\n 2468:  * @param {function|Array.<string|Function>} fn Function for which dependent service names need to be retrieved as described\n 2469   *   above.\n 2470   *\n 2471:  * @returns {Array.<string>} The names of the services which the function requires.\n 2472   */\n 2473  \n ....\n 2477  /**\n 2478   * @ngdoc object\n 2479:  * @name AUTO.$provide\n 2480   *\n 2481   * @description\n 2482   *\n 2483   * Use `$provide` to register new providers with the `$injector`. The providers are the factories for the instance.\n 2484:  * The providers share the same name as the instance they create with the `Provider` suffixed to them.\n 2485   *\n 2486   * A provider is an object with a `$get()` method. The injector calls the `$get` method to create a new instance of\n ....\n 2496   *\n 2497   *     this.$get = function() {\n 2498:  *       return function (name) {\n 2499:  *         return salutation + ' ' + name + '!';\n 2500   *       };\n 2501   *     };\n ....\n 2527  /**\n 2528   * @ngdoc method\n 2529:  * @name AUTO.$provide#provider\n 2530   * @methodOf AUTO.$provide\n 2531   * @description\n ....\n 2533   * Register a provider for a service. The providers can be retrieved and can have additional configuration methods.\n 2534   *\n 2535:  * @param {string} name The name of the instance. NOTE: the provider will be available under `name + 'Provider'` key.\n 2536   * @param {(Object|function())} provider If the provider is:\n 2537   *\n ....\n 2546  /**\n 2547   * @ngdoc method\n 2548:  * @name AUTO.$provide#factory\n 2549   * @methodOf AUTO.$provide\n 2550   * @description\n ....\n 2552   * A short hand for configuring services if only `$get` method is required.\n 2553   *\n 2554:  * @param {string} name The name of the instance.\n 2555   * @param {function()} $getFn The $getFn for the instance creation. Internally this is a short hand for\n 2556:  * `$provide.provider(name, {$get: $getFn})`.\n 2557   * @returns {Object} registered provider instance\n 2558   */\n ....\n 2561  /**\n 2562   * @ngdoc method\n 2563:  * @name AUTO.$provide#service\n 2564   * @methodOf AUTO.$provide\n 2565   * @description\n ....\n 2567   * A short hand for registering service of given class.\n 2568   *\n 2569:  * @param {string} name The name of the instance.\n 2570   * @param {Function} constructor A class (constructor function) that will be instantiated.\n 2571   * @returns {Object} registered provider instance\n ....\n 2575  /**\n 2576   * @ngdoc method\n 2577:  * @name AUTO.$provide#value\n 2578   * @methodOf AUTO.$provide\n 2579   * @description\n ....\n 2581   * A short hand for configuring services if the `$get` method is a constant.\n 2582   *\n 2583:  * @param {string} name The name of the instance.\n 2584   * @param {*} value The value.\n 2585   * @returns {Object} registered provider instance\n ....\n 2589  /**\n 2590   * @ngdoc method\n 2591:  * @name AUTO.$provide#constant\n 2592   * @methodOf AUTO.$provide\n 2593   * @description\n ....\n 2597   * {@link AUTO.$provide#decorator decorator}.\n 2598   *\n 2599:  * @param {string} name The name of the constant.\n 2600   * @param {*} value The constant value.\n 2601   * @returns {Object} registered instance\n ....\n 2605  /**\n 2606   * @ngdoc method\n 2607:  * @name AUTO.$provide#decorator\n 2608   * @methodOf AUTO.$provide\n 2609   * @description\n ....\n 2613   * original instance.\n 2614   *\n 2615:  * @param {string} name The name of the service to decorate.\n 2616   * @param {function()} decorator This function will be invoked when the service needs to be\n 2617   *    instanciated. The function is called using the {@link AUTO.$injector#invoke\n ....\n 2643        instanceCache = {},\n 2644        instanceInjector = (instanceCache.$injector =\n 2645:           createInternalInjector(instanceCache, function(servicename) {\n 2646:             var provider = providerInjector.get(servicename + providerSuffix);\n 2647              return instanceInjector.invoke(provider.$get, provider);\n 2648            }));\n ....\n 2667    }\n 2668  \n 2669:   function provider(name, provider_) {\n 2670      if (isFunction(provider_)) {\n 2671        provider_ = providerInjector.instantiate(provider_);\n 2672      }\n 2673      if (!provider_.$get) {\n 2674:       throw Error('Provider ' + name + ' must define $get factory method.');\n 2675      }\n 2676:     return providerCache[name + providerSuffix] = provider_;\n 2677    }\n 2678  \n 2679:   function factory(name, factoryFn) { return provider(name, { $get: factoryFn }); }\n 2680  \n 2681:   function service(name, constructor) {\n 2682:     return factory(name, ['$injector', function($injector) {\n 2683        return $injector.instantiate(constructor);\n 2684      }]);\n 2685    }\n 2686  \n 2687:   function value(name, value) { return factory(name, valueFn(value)); }\n 2688  \n 2689:   function constant(name, value) {\n 2690:     providerCache[name] = value;\n 2691:     instanceCache[name] = value;\n 2692    }\n 2693  \n 2694:   function decorator(serviceName, decorFn) {\n 2695:     var origProvider = providerInjector.get(serviceName + providerSuffix),\n 2696          orig$get = origProvider.$get;\n 2697  \n ....\n 2754    function createInternalInjector(cache, factory) {\n 2755  \n 2756:     function getService(serviceName) {\n 2757:       if (typeof serviceName !== 'string') {\n 2758:         throw Error('Service name expected');\n 2759        }\n 2760:       if (cache.hasOwnProperty(serviceName)) {\n 2761:         if (cache[serviceName] === INSTANTIATING) {\n 2762            throw Error('Circular dependency: ' + path.join(' <- '));\n 2763          }\n 2764:         return cache[serviceName];\n 2765        } else {\n 2766          try {\n 2767:           path.unshift(serviceName);\n 2768:           cache[serviceName] = INSTANTIATING;\n 2769:           return cache[serviceName] = factory(serviceName);\n 2770          } finally {\n 2771            path.shift();\n ....\n 2832  /**\n 2833   * @ngdoc function\n 2834:  * @name ng.$anchorScroll\n 2835   * @requires $window\n 2836   * @requires $location\n ....\n 2863        var result = null;\n 2864        forEach(list, function(element) {\n 2865:         if (!result && lowercase(element.nodeName) === 'a') result = element;\n 2866        });\n 2867        return result;\n ....\n 2877        else if ((elm = document.getElementById(hash))) elm.scrollIntoView();\n 2878  \n 2879:       // first anchor with given name :-D\n 2880:       else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) elm.scrollIntoView();\n 2881  \n 2882        // no element and hash == 'top', scroll to the top of the page\n ....\n 2900   * ! This is a private undocumented service !\n 2901   *\n 2902:  * @name ng.$browser\n 2903   * @requires $log\n 2904   * @description\n ....\n 2984  \n 2985    /**\n 2986:    * @name ng.$browser#addPollFn\n 2987     * @methodOf ng.$browser\n 2988     *\n ....\n 3024  \n 3025    /**\n 3026:    * @name ng.$browser#url\n 3027     * @methodOf ng.$browser\n 3028     *\n ....\n 3080  \n 3081    /**\n 3082:    * @name ng.$browser#onUrlChange\n 3083     * @methodOf ng.$browser\n 3084     * @TODO(vojta): refactor to use node's syntax for events\n ....\n 3145  \n 3146    /**\n 3147:    * @name ng.$browser#cookies\n 3148     * @methodOf ng.$browser\n 3149     *\n 3150:    * @param {string=} name Cookie name\n 3151     * @param {string=} value Cokkie value\n 3152     *\n ....\n 3158     * <ul>\n 3159     *   <li>cookies() -> hash of all cookies, this is NOT a copy of the internal state, so do not modify it</li>\n 3160:    *   <li>cookies(name, value) -> set name to value, if value is undefined delete the cookie</li>\n 3161:    *   <li>cookies(name) -> the same as (name, undefined) == DELETES (no one calls it right now that way)</li>\n 3162     * </ul>\n 3163     *\n 3164     * @returns {Object} Hash of all cookies (if called without any parameter)\n 3165     */\n 3166:   self.cookies = function(name, value) {\n 3167      var cookieLength, cookieArray, cookie, i, index;\n 3168  \n 3169:     if (name) {\n 3170        if (value === undefined) {\n 3171:         rawDocument.cookie = escape(name) + \"=;path=\" + cookiePath + \";expires=Thu, 01 Jan 1970 00:00:00 GMT\";\n 3172        } else {\n 3173          if (isString(value)) {\n 3174:           cookieLength = (rawDocument.cookie = escape(name) + '=' + escape(value) + ';path=' + cookiePath).length + 1;\n 3175            if (cookieLength > 4096) {\n 3176:             $log.warn(\"Cookie '\"+ name +\"' possibly not set or overflowed because it was too large (\"+\n 3177                cookieLength + \" > 4096 bytes)!\");\n 3178            }\n 3179            if (lastCookies.length > 20) {\n 3180:             $log.warn(\"Cookie '\"+ name +\"' possibly not set or overflowed because too many cookies \" +\n 3181                \"were already set (\" + lastCookies.length + \" > 20 )\");\n 3182            }\n ....\n 3192            cookie = cookieArray[i];\n 3193            index = cookie.indexOf('=');\n 3194:           if (index > 0) { //ignore nameless cookies\n 3195              lastCookies[unescape(cookie.substring(0, index))] = unescape(cookie.substring(index + 1));\n 3196            }\n ....\n 3203  \n 3204    /**\n 3205:    * @name ng.$browser#defer\n 3206     * @methodOf ng.$browser\n 3207     * @param {function()} fn A function, who's execution should be defered.\n ....\n 3230  \n 3231    /**\n 3232:    * @name ng.$browser#defer.cancel\n 3233     * @methodOf ng.$browser.defer\n 3234     *\n ....\n 3259  /**\n 3260   * @ngdoc object\n 3261:  * @name ng.$cacheFactory\n 3262   *\n 3263   * @description\n ....\n 3265   *\n 3266   *\n 3267:  * @param {string} cacheId Name or id of the newly created cache.\n 3268   * @param {object=} options Options object that specifies the cache behavior. Properties:\n 3269   *\n ....\n 3414  /**\n 3415   * @ngdoc object\n 3416:  * @name ng.$templateCache\n 3417   *\n 3418   * @description\n ....\n 3451  /**\n 3452   * @ngdoc function\n 3453:  * @name ng.$compile\n 3454   * @function\n 3455   *\n ....\n 3499  \n 3500        function Ctrl($scope) {\n 3501:         $scope.name = 'Angular';\n 3502:         $scope.html = 'Hello {{name}}';\n 3503        }\n 3504      </script>\n 3505      <div ng-controller=\"Ctrl\">\n 3506:       <input ng-model=\"name\"> <br>\n 3507        <textarea ng-model=\"html\"></textarea> <br>\n 3508        <div compile=\"html\"></div>\n ....\n 3512       it('should auto compile', function() {\n 3513         expect(element('div[compile]').text()).toBe('Hello Angular');\n 3514:        input('html').enter('{{name}}!');\n 3515         expect(element('div[compile]').text()).toBe('Angular!');\n 3516       });\n ....\n 3572  /**\n 3573   * @ngdoc service\n 3574:  * @name ng.$compileProvider\n 3575   * @function\n 3576   *\n ....\n 3588    /**\n 3589     * @ngdoc function\n 3590:    * @name ng.$compileProvider#directive\n 3591     * @methodOf ng.$compileProvider\n 3592     * @function\n ....\n 3595     * Register a new directives with the compiler.\n 3596     *\n 3597:    * @param {string} name Name of the directive in camel-case. (ie <code>ngBind</code> which will match as\n 3598     *                <code>ng-bind</code>).\n 3599     * @param {function} directiveFactory An injectable directive factroy function. See {@link guide/directive} for more\n ....\n 3601     * @returns {ng.$compileProvider} Self for chaining.\n 3602     */\n 3603:    this.directive = function registerDirective(name, directiveFactory) {\n 3604:     if (isString(name)) {\n 3605        assertArg(directiveFactory, 'directive');\n 3606:       if (!hasDirectives.hasOwnProperty(name)) {\n 3607:         hasDirectives[name] = [];\n 3608:         $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',\n 3609            function($injector, $exceptionHandler) {\n 3610              var directives = [];\n 3611:             forEach(hasDirectives[name], function(directiveFactory) {\n 3612                try {\n 3613                  var directive = $injector.invoke(directiveFactory);\n ....\n 3618                  }\n 3619                  directive.priority = directive.priority || 0;\n 3620:                 directive.name = directive.name || name;\n 3621:                 directive.require = directive.require || (directive.controller && directive.name);\n 3622                  directive.restrict = directive.restrict || 'A';\n 3623                  directives.push(directive);\n ....\n 3629            }]);\n 3630        }\n 3631:       hasDirectives[name].push(directiveFactory);\n 3632      } else {\n 3633:       forEach(name, reverseParams(registerDirective));\n 3634      }\n 3635      return this;\n ....\n 3659         * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.\n 3660         *     Defaults to true.\n 3661:        * @param {string=} attrName Optional none normalized name. Defaults to key.\n 3662         */\n 3663:       $set: function(key, value, writeAttr, attrName) {\n 3664:         var booleanKey = getBooleanAttrName(this.$$element[0], key),\n 3665              $$observers = this.$$observers;\n 3666  \n 3667          if (booleanKey) {\n 3668            this.$$element.prop(key, value);\n 3669:           attrName = booleanKey;\n 3670          }\n 3671  \n ....\n 3673  \n 3674          // translate normalized key to actual key\n 3675:         if (attrName) {\n 3676:           this.$attr[key] = attrName;\n 3677          } else {\n 3678:           attrName = this.$attr[key];\n 3679:           if (!attrName) {\n 3680:             this.$attr[key] = attrName = snake_case(key, '-');\n 3681            }\n 3682          }\n ....\n 3684          if (writeAttr !== false) {\n 3685            if (value === null || value === undefined) {\n 3686:             this.$$element.removeAttr(attrName);\n 3687            } else {\n 3688:             this.$$element.attr(attrName, value);\n 3689            }\n 3690          }\n ....\n 3766      }\n 3767  \n 3768:     function wrongMode(localName, mode) {\n 3769:       throw Error(\"Unsupported '\" + mode + \"' for '\" + localName + \"'.\");\n 3770      }\n 3771  \n 3772:     function safeAddClass($element, className) {\n 3773        try {\n 3774:         $element.addClass(className);\n 3775        } catch(e) {\n 3776          // ignore, since it means that we are trying to set class on\n 3777:         // SVG element, where class name is read-only.\n 3778        }\n 3779      }\n ....\n 3873            attrsMap = attrs.$attr,\n 3874            match,\n 3875:           className;\n 3876  \n 3877        switch(nodeType) {\n 3878          case 1: /* Element */\n 3879:           // use the node name: <directive>\n 3880            addDirective(directives,\n 3881:               directiveNormalize(nodeName_(node).toLowerCase()), 'E', maxPriority);\n 3882  \n 3883            // iterate over the attributes\n 3884:           for (var attr, name, nName, value, nAttrs = node.attributes,\n 3885                     j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {\n 3886              attr = nAttrs[j];\n 3887              if (attr.specified) {\n 3888:               name = attr.name;\n 3889:               nName = directiveNormalize(name.toLowerCase());\n 3890:               attrsMap[nName] = name;\n 3891:               attrs[nName] = value = trim((msie && name == 'href')\n 3892:                 ? decodeURIComponent(node.getAttribute(name, 2))\n 3893                  : attr.value);\n 3894:               if (getBooleanAttrName(node, nName)) {\n 3895:                 attrs[nName] = true; // presence means true\n 3896                }\n 3897:               addAttrInterpolateDirective(node, directives, value, nName);\n 3898:               addDirective(directives, nName, 'A', maxPriority);\n 3899              }\n 3900            }\n 3901  \n 3902            // use class as directive\n 3903:           className = node.className;\n 3904:           if (isString(className) && className !== '') {\n 3905:             while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {\n 3906:               nName = directiveNormalize(match[2]);\n 3907:               if (addDirective(directives, nName, 'C', maxPriority)) {\n 3908:                 attrs[nName] = trim(match[3]);\n 3909                }\n 3910:               className = className.substr(match.index + match[0].length);\n 3911              }\n 3912            }\n ....\n 3919              match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);\n 3920              if (match) {\n 3921:               nName = directiveNormalize(match[1]);\n 3922:               if (addDirective(directives, nName, 'M', maxPriority)) {\n 3923:                 attrs[nName] = trim(match[2]);\n 3924                }\n 3925              }\n ....\n 3960            $compileNode = templateAttrs.$$element = jqLite(compileNode),\n 3961            directive,\n 3962:           directiveName,\n 3963            $template,\n 3964            transcludeDirective,\n ....\n 3987          }\n 3988  \n 3989:         directiveName = directive.name;\n 3990  \n 3991          if (directiveValue = directive.controller) {\n 3992            controllerDirectives = controllerDirectives || {};\n 3993:           assertNoDuplicate(\"'\" + directiveName + \"' controller\",\n 3994:               controllerDirectives[directiveName], directive, $compileNode);\n 3995:           controllerDirectives[directiveName] = directive;\n 3996          }\n 3997  \n ....\n 4003              $template = jqLite(compileNode);\n 4004              $compileNode = templateAttrs.$$element =\n 4005:                 jqLite('<!-- ' + directiveName + ': ' + templateAttrs[directiveName]  + ' -->');\n 4006              compileNode = $compileNode[0];\n 4007              replaceWith($rootElement, jqLite($template[0]), compileNode);\n ....\n 4140            var parentScope = scope.$parent || scope;\n 4141  \n 4142:           forEach(newIsolateScopeDirective.scope, function(definiton, scopeName) {\n 4143              var match = definiton.match(LOCAL_REGEXP) || [],\n 4144:                 attrName = match[2]|| scopeName,\n 4145                  mode = match[1], // @, =, or &\n 4146                  lastValue,\n ....\n 4150  \n 4151                case '@': {\n 4152:                 attrs.$observe(attrName, function(value) {\n 4153:                   scope[scopeName] = value;\n 4154                  });\n 4155:                 attrs.$$observers[attrName].$$scope = parentScope;\n 4156                  break;\n 4157                }\n 4158  \n 4159                case '=': {\n 4160:                 parentGet = $parse(attrs[attrName]);\n 4161                  parentSet = parentGet.assign || function() {\n 4162                    // reset the change, or we will throw this exception on every $digest\n 4163:                   lastValue = scope[scopeName] = parentGet(parentScope);\n 4164:                   throw Error(NON_ASSIGNABLE_MODEL_EXPRESSION + attrs[attrName] +\n 4165:                       ' (directive: ' + newIsolateScopeDirective.name + ')');\n 4166                  };\n 4167:                 lastValue = scope[scopeName] = parentGet(parentScope);\n 4168                  scope.$watch(function parentValueWatch() {\n 4169                    var parentValue = parentGet(parentScope);\n 4170  \n 4171:                   if (parentValue !== scope[scopeName]) {\n 4172                      // we are out of sync and need to copy\n 4173                      if (parentValue !== lastValue) {\n 4174                        // parent changed and it has precedence\n 4175:                       lastValue = scope[scopeName] = parentValue;\n 4176                      } else {\n 4177                        // if the parent can be assigned then do so\n 4178:                       parentSet(parentScope, parentValue = lastValue = scope[scopeName]);\n 4179                      }\n 4180                    }\n ....\n 4185  \n 4186                case '&': {\n 4187:                 parentGet = $parse(attrs[attrName]);\n 4188:                 scope[scopeName] = function(locals) {\n 4189                    return parentGet(parentScope, locals);\n 4190                  }\n ....\n 4194                default: {\n 4195                  throw Error('Invalid isolate scope definition for directive ' +\n 4196:                     newIsolateScopeDirective.name + ': ' + definiton);\n 4197                }\n 4198              }\n ....\n 4211              controller = directive.controller;\n 4212              if (controller == '@') {\n 4213:               controller = attrs[directive.name];\n 4214              }\n 4215  \n 4216              $element.data(\n 4217:                 '$' + directive.name + 'Controller',\n 4218                  $controller(controller, locals));\n 4219            });\n ....\n 4252       * call this the boundDirective.\n 4253       *\n 4254:      * @param {string} name name of the directive to look up.\n 4255       * @param {string} location The directive must be found in specific format.\n 4256       *   String containing any of theses characters:\n 4257       *\n 4258:      *   * `E`: element name\n 4259       *   * `A': attribute\n 4260       *   * `C`: class\n ....\n 4262       * @returns true if directive was added.\n 4263       */\n 4264:     function addDirective(tDirectives, name, location, maxPriority) {\n 4265        var match = false;\n 4266:       if (hasDirectives.hasOwnProperty(name)) {\n 4267:         for(var directive, directives = $injector.get(name + Suffix),\n 4268              i = 0, ii = directives.length; i<ii; i++) {\n 4269            try {\n ....\n 4409      function assertNoDuplicate(what, previousDirective, directive, element) {\n 4410        if (previousDirective) {\n 4411:         throw Error('Multiple directives [' + previousDirective.name + ', ' +\n 4412:           directive.name + '] asking for ' + what + ' on: ' +  startingTag(element));\n 4413        }\n 4414      }\n ....\n 4434  \n 4435  \n 4436:     function addAttrInterpolateDirective(node, directives, value, name) {\n 4437        var interpolateFn = $interpolate(value, true);\n 4438  \n ....\n 4446            var $$observers = (attr.$$observers || (attr.$$observers = {}));\n 4447  \n 4448:           if (name === 'class') {\n 4449              // we need to interpolate classes again, in the case the element was replaced\n 4450              // and therefore the two class attrs got merged - we want to interpolate the result\n 4451:             interpolateFn = $interpolate(attr[name], true);\n 4452            }\n 4453  \n 4454:           attr[name] = undefined;\n 4455:           ($$observers[name] || ($$observers[name] = [])).$$inter = true;\n 4456:           (attr.$$observers && attr.$$observers[name].$$scope || scope).\n 4457              $watch(interpolateFn, function interpolateFnWatchAction(value) {\n 4458:               attr.$set(name, value);\n 4459              });\n 4460          })\n ....\n 4499  var PREFIX_REGEXP = /^(x[\\:\\-_]|data[\\:\\-_])/i;\n 4500  /**\n 4501:  * Converts all accepted directives format into proper directive name.\n 4502   * All of these will become 'myDirective':\n 4503   *   my:DiRective\n ....\n 4507   *\n 4508   * Also there is special case for Moz prefix starting with upper case letter.\n 4509:  * @param name Name to normalize\n 4510   */\n 4511: function directiveNormalize(name) {\n 4512:   return camelCase(name.replace(PREFIX_REGEXP, ''));\n 4513  }\n 4514  \n 4515  /**\n 4516   * @ngdoc object\n 4517:  * @name ng.$compile.directive.Attributes\n 4518   * @description\n 4519   *\n ....\n 4527  /**\n 4528   * @ngdoc property\n 4529:  * @name ng.$compile.directive.Attributes#$attr\n 4530   * @propertyOf ng.$compile.directive.Attributes\n 4531:  * @returns {object} A map of DOM element attribute names to the normalized name. This is\n 4532:  *          needed to do reverse lookup from normalized name back to actual name.\n 4533   */\n 4534  \n ....\n 4536  /**\n 4537   * @ngdoc function\n 4538:  * @name ng.$compile.directive.Attributes#$set\n 4539   * @methodOf ng.$compile.directive.Attributes\n 4540   * @function\n ....\n 4544   *\n 4545   *\n 4546:  * @param {string} name Normalized element attribute name of the property to modify. The name is\n 4547   *          revers translated using the {@link ng.$compile.directive.Attributes#$attr $attr}\n 4548:  *          property to the original name.\n 4549   * @param {string} value Value to set the attribute to.\n 4550   */\n ....\n 4573  /**\n 4574   * @ngdoc object\n 4575:  * @name ng.$controllerProvider\n 4576   * @description\n 4577   * The {@link ng.$controller $controller service} is used by Angular to create new\n ....\n 4587    /**\n 4588     * @ngdoc function\n 4589:    * @name ng.$controllerProvider#register\n 4590     * @methodOf ng.$controllerProvider\n 4591:    * @param {string} name Controller name\n 4592     * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI\n 4593     *    annotations in the array notation).\n 4594     */\n 4595:   this.register = function(name, constructor) {\n 4596:     if (isObject(name)) {\n 4597:       extend(controllers, name)\n 4598      } else {\n 4599:       controllers[name] = constructor;\n 4600      }\n 4601    };\n ....\n 4606      /**\n 4607       * @ngdoc function\n 4608:      * @name ng.$controller\n 4609       * @requires $injector\n 4610       *\n ....\n 4613       *    to retrieve the controller constructor using the following steps:\n 4614       *\n 4615:      *    * check if a controller with given name is registered via `$controllerProvider`\n 4616       *    * check if evaluating the string on the current scope returns a constructor\n 4617       *    * check `window[constructor]` on the global `window` object\n ....\n 4629      return function(constructor, locals) {\n 4630        if(isString(constructor)) {\n 4631:         var name = constructor;\n 4632:         constructor = controllers.hasOwnProperty(name)\n 4633:             ? controllers[name]\n 4634:             : getter(locals.$scope, name, true) || getter($window, name, true);\n 4635  \n 4636:         assertArgFn(constructor, name, true);\n 4637        }\n 4638  \n ....\n 4644  /**\n 4645   * @ngdoc object\n 4646:  * @name ng.$document\n 4647   * @requires $window\n 4648   *\n ....\n 4659  /**\n 4660   * @ngdoc function\n 4661:  * @name ng.$exceptionHandler\n 4662   * @requires $log\n 4663   *\n ....\n 4684  /**\n 4685   * @ngdoc object\n 4686:  * @name ng.$interpolateProvider\n 4687   * @function\n 4688   *\n ....\n 4697    /**\n 4698     * @ngdoc method\n 4699:    * @name ng.$interpolateProvider#startSymbol\n 4700     * @methodOf ng.$interpolateProvider\n 4701     * @description\n ....\n 4716    /**\n 4717     * @ngdoc method\n 4718:    * @name ng.$interpolateProvider#endSymbol\n 4719     * @methodOf ng.$interpolateProvider\n 4720     * @description\n ....\n 4740      /**\n 4741       * @ngdoc function\n 4742:      * @name ng.$interpolate\n 4743       * @function\n 4744       *\n ....\n 4755         <pre>\n 4756           var $interpolate = ...; // injected\n 4757:          var exp = $interpolate('Hello {{name}}!');\n 4758:          expect(exp({name:'Angular'}).toEqual('Hello Angular!');\n 4759         </pre>\n 4760       *\n ....\n 4828      /**\n 4829       * @ngdoc method\n 4830:      * @name ng.$interpolate#startSymbol\n 4831       * @methodOf ng.$interpolate\n 4832       * @description\n ....\n 4845      /**\n 4846       * @ngdoc method\n 4847:      * @name ng.$interpolate#endSymbol\n 4848       * @methodOf ng.$interpolate\n 4849       * @description\n ....\n 5088    /**\n 5089     * @ngdoc method\n 5090:    * @name ng.$location#absUrl\n 5091     * @methodOf ng.$location\n 5092     *\n ....\n 5103    /**\n 5104     * @ngdoc method\n 5105:    * @name ng.$location#url\n 5106     * @methodOf ng.$location\n 5107     *\n ....\n 5130    /**\n 5131     * @ngdoc method\n 5132:    * @name ng.$location#protocol\n 5133     * @methodOf ng.$location\n 5134     *\n ....\n 5144    /**\n 5145     * @ngdoc method\n 5146:    * @name ng.$location#host\n 5147     * @methodOf ng.$location\n 5148     *\n ....\n 5158    /**\n 5159     * @ngdoc method\n 5160:    * @name ng.$location#port\n 5161     * @methodOf ng.$location\n 5162     *\n ....\n 5172    /**\n 5173     * @ngdoc method\n 5174:    * @name ng.$location#path\n 5175     * @methodOf ng.$location\n 5176     *\n ....\n 5194    /**\n 5195     * @ngdoc method\n 5196:    * @name ng.$location#search\n 5197     * @methodOf ng.$location\n 5198     *\n ....\n 5230    /**\n 5231     * @ngdoc method\n 5232:    * @name ng.$location#hash\n 5233     * @methodOf ng.$location\n 5234     *\n ....\n 5247    /**\n 5248     * @ngdoc method\n 5249:    * @name ng.$location#replace\n 5250     * @methodOf ng.$location\n 5251     *\n ....\n 5297  /**\n 5298   * @ngdoc object\n 5299:  * @name ng.$location\n 5300   *\n 5301   * @requires $browser\n ....\n 5326  /**\n 5327   * @ngdoc object\n 5328:  * @name ng.$locationProvider\n 5329   * @description\n 5330   * Use the `$locationProvider` to configure how the application deep linking paths are stored.\n ....\n 5336    /**\n 5337     * @ngdoc property\n 5338:    * @name ng.$locationProvider#hashPrefix\n 5339     * @methodOf ng.$locationProvider\n 5340     * @description\n ....\n 5353    /**\n 5354     * @ngdoc property\n 5355:    * @name ng.$locationProvider#html5Mode\n 5356     * @methodOf ng.$locationProvider\n 5357     * @description\n ....\n 5412  \n 5413        // traverse the DOM up to find first A tag\n 5414:       while (lowercase(elm[0].nodeName) !== 'a') {\n 5415          // ignore rewriting if no A tag (reached root element, or no parent - removed from document)\n 5416          if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;\n ....\n 5482  /**\n 5483   * @ngdoc object\n 5484:  * @name ng.$log\n 5485   * @requires $window\n 5486   *\n ....\n 5493   * @example\n 5494     <example>\n 5495:      <file name=\"script.js\">\n 5496         function LogCtrl($scope, $log) {\n 5497           $scope.$log = $log;\n ....\n 5499         }\n 5500       </file>\n 5501:      <file name=\"index.html\">\n 5502         <div ng-controller=\"LogCtrl\">\n 5503           <p>Reload this page with open console, enter text and hit the log button...</p>\n ....\n 5518        /**\n 5519         * @ngdoc method\n 5520:        * @name ng.$log#log\n 5521         * @methodOf ng.$log\n 5522         *\n ....\n 5528        /**\n 5529         * @ngdoc method\n 5530:        * @name ng.$log#warn\n 5531         * @methodOf ng.$log\n 5532         *\n ....\n 5538        /**\n 5539         * @ngdoc method\n 5540:        * @name ng.$log#info\n 5541         * @methodOf ng.$log\n 5542         *\n ....\n 5548        /**\n 5549         * @ngdoc method\n 5550:        * @name ng.$log#error\n 5551         * @methodOf ng.$log\n 5552         *\n ....\n 5747      var ident = \"\",\n 5748          start = index,\n 5749:         lastDot, peekIndex, methodName;\n 5750  \n 5751      while (index < text.length) {\n ....\n 5766          var ch = text.charAt(peekIndex);\n 5767          if (ch == '(') {\n 5768:           methodName = ident.substr(lastDot - start + 1);\n 5769            ident = ident.substr(0, lastDot - start);\n 5770            index = peekIndex;\n ....\n 5800      tokens.push(token);\n 5801  \n 5802:     if (methodName) {\n 5803        tokens.push({\n 5804          index:lastDot,\n ....\n 5808        tokens.push({\n 5809          index: lastDot + 1,\n 5810:         text: methodName,\n 5811          json: false\n 5812        });\n ....\n 6410  /**\n 6411   * @ngdoc function\n 6412:  * @name ng.$parse\n 6413   * @function\n 6414   *\n ....\n 6418   *\n 6419   * <pre>\n 6420:  *   var getter = $parse('user.name');\n 6421   *   var setter = getter.assign;\n 6422:  *   var context = {user:{name:'angular'}};\n 6423:  *   var locals = {user:{name:'local'}};\n 6424   *\n 6425   *   expect(getter(context)).toEqual('angular');\n 6426   *   setter(context, 'newValue');\n 6427:  *   expect(context.user.name).toEqual('newValue');\n 6428   *   expect(getter(context, locals)).toEqual('local');\n 6429   * </pre>\n ....\n 6461  /**\n 6462   * @ngdoc service\n 6463:  * @name ng.$q\n 6464   * @requires $rootScope\n 6465   *\n ....\n 6478   *   // available in the current lexical scope (they could have been injected or passed in).\n 6479   *\n 6480:  *   function asyncGreet(name) {\n 6481   *     var deferred = $q.defer();\n 6482   *\n ....\n 6485   *       // our code into an $apply call so that the model changes are properly observed.\n 6486   *       scope.$apply(function() {\n 6487:  *         if (okToGreet(name)) {\n 6488:  *           deferred.resolve('Hello, ' + name + '!');\n 6489   *         } else {\n 6490:  *           deferred.reject('Greeting ' + name + ' is not allowed.');\n 6491   *         }\n 6492   *       });\n ....\n 6605    /**\n 6606     * @ngdoc\n 6607:    * @name ng.$q#defer\n 6608     * @methodOf ng.$q\n 6609     * @description\n ....\n 6695    /**\n 6696     * @ngdoc\n 6697:    * @name ng.$q#reject\n 6698     * @methodOf ng.$q\n 6699     * @description\n ....\n 6743    /**\n 6744     * @ngdoc\n 6745:    * @name ng.$q#when\n 6746     * @methodOf ng.$q\n 6747     * @description\n ....\n 6806    /**\n 6807     * @ngdoc\n 6808:    * @name ng.$q#all\n 6809     * @methodOf ng.$q\n 6810     * @description\n ....\n 6851  /**\n 6852   * @ngdoc object\n 6853:  * @name ng.$routeProvider\n 6854   * @function\n 6855   *\n ....\n 6863    /**\n 6864     * @ngdoc method\n 6865:    * @name ng.$routeProvider#when\n 6866     * @methodOf ng.$routeProvider\n 6867     *\n ....\n 6876     *\n 6877     *    - `controller` – `{(string|function()=}` – Controller fn that should be associated with newly\n 6878:    *      created scope or the name of a {@link angular.Module#controller registered controller}\n 6879     *      if passed as a string.\n 6880     *    - `template` – `{string=}` –  html template as a string that should be used by\n ....\n 6889     *      `$routeChangeSuccess` event is fired. The map object is:\n 6890     *\n 6891:    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n 6892     *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n 6893     *        Otherwise if function, then it is {@link api/AUTO.$injector#invoke injected}\n ....\n 6936    /**\n 6937     * @ngdoc method\n 6938:    * @name ng.$routeProvider#otherwise\n 6939     * @methodOf ng.$routeProvider\n 6940     *\n ....\n 6957      /**\n 6958       * @ngdoc object\n 6959:      * @name ng.$route\n 6960       * @requires $location\n 6961       * @requires $routeParams\n ....\n 6991  \n 6992       <example module=\"ngView\">\n 6993:        <file name=\"index.html\">\n 6994           <div ng-controller=\"MainCntl\">\n 6995             Choose:\n ....\n 7006             <pre>$route.current.templateUrl = {{$route.current.templateUrl}}</pre>\n 7007             <pre>$route.current.params = {{$route.current.params}}</pre>\n 7008:            <pre>$route.current.scope.name = {{$route.current.scope.name}}</pre>\n 7009             <pre>$routeParams = {{$routeParams}}</pre>\n 7010           </div>\n 7011         </file>\n 7012  \n 7013:        <file name=\"book.html\">\n 7014:          controller: {{name}}<br />\n 7015           Book Id: {{params.bookId}}<br />\n 7016         </file>\n 7017  \n 7018:        <file name=\"chapter.html\">\n 7019:          controller: {{name}}<br />\n 7020           Book Id: {{params.bookId}}<br />\n 7021           Chapter Id: {{params.chapterId}}\n 7022         </file>\n 7023  \n 7024:        <file name=\"script.js\">\n 7025           angular.module('ngView', [], function($routeProvider, $locationProvider) {\n 7026             $routeProvider.when('/Book/:bookId', {\n ....\n 7052  \n 7053           function BookCntl($scope, $routeParams) {\n 7054:            $scope.name = \"BookCntl\";\n 7055             $scope.params = $routeParams;\n 7056           }\n 7057  \n 7058           function ChapterCntl($scope, $routeParams) {\n 7059:            $scope.name = \"ChapterCntl\";\n 7060             $scope.params = $routeParams;\n 7061           }\n 7062         </file>\n 7063  \n 7064:        <file name=\"scenario.js\">\n 7065           it('should load and compile correct template', function() {\n 7066             element('a:contains(\"Moby: Ch1\")').click();\n ....\n 7082      /**\n 7083       * @ngdoc event\n 7084:      * @name ng.$route#$routeChangeStart\n 7085       * @eventOf ng.$route\n 7086       * @eventType broadcast on root scope\n ....\n 7098      /**\n 7099       * @ngdoc event\n 7100:      * @name ng.$route#$routeChangeSuccess\n 7101       * @eventOf ng.$route\n 7102       * @eventType broadcast on root scope\n ....\n 7112      /**\n 7113       * @ngdoc event\n 7114:      * @name ng.$route#$routeChangeError\n 7115       * @eventOf ng.$route\n 7116       * @eventType broadcast on root scope\n ....\n 7125      /**\n 7126       * @ngdoc event\n 7127:      * @name ng.$route#$routeUpdate\n 7128       * @eventOf ng.$route\n 7129       * @eventType broadcast on root scope\n ....\n 7141            /**\n 7142             * @ngdoc method\n 7143:            * @name ng.$route#reload\n 7144             * @methodOf ng.$route\n 7145             *\n ....\n 7180        var match = on.match(new RegExp(regex));\n 7181        if (match) {\n 7182:         forEach(params, function(name, index) {\n 7183:           dst[name] = match[index + 1];\n 7184          });\n 7185        }\n ....\n 7300  /**\n 7301   * @ngdoc object\n 7302:  * @name ng.$routeParams\n 7303   * @requires $route\n 7304   *\n ....\n 7308   * are extracted when the {@link ng.$route $route} path is matched.\n 7309   *\n 7310:  * In case of parameter name collision, `path` params take precedence over `search` params.\n 7311   *\n 7312   * The service guarantees that the identity of the `$routeParams` object will remain unchanged\n ....\n 7355  /**\n 7356   * @ngdoc object\n 7357:  * @name ng.$rootScopeProvider\n 7358   * @description\n 7359   *\n ....\n 7363  /**\n 7364   * @ngdoc function\n 7365:  * @name ng.$rootScopeProvider#digestTtl\n 7366   * @methodOf ng.$rootScopeProvider\n 7367   * @description\n ....\n 7378  /**\n 7379   * @ngdoc object\n 7380:  * @name ng.$rootScope\n 7381   * @description\n 7382   *\n ....\n 7400      /**\n 7401       * @ngdoc function\n 7402:      * @name ng.$rootScope.Scope\n 7403       *\n 7404       * @description\n ....\n 7413             var scope = $rootScope.$new();\n 7414             scope.salutation = 'Hello';\n 7415:            scope.name = 'World';\n 7416  \n 7417             expect(scope.greeting).toEqual(undefined);\n 7418  \n 7419:            scope.$watch('name', function() {\n 7420:              this.greeting = this.salutation + ' ' + this.name + '!';\n 7421             }); // initialize the watch\n 7422  \n 7423             expect(scope.greeting).toEqual(undefined);\n 7424:            scope.name = 'Misko';\n 7425             // still old value, since watches have not been called yet\n 7426             expect(scope.greeting).toEqual(undefined);\n ....\n 7438  \n 7439           parent.salutation = \"Hello\";\n 7440:          child.name = \"World\";\n 7441           expect(child.salutation).toEqual('Hello');\n 7442  \n ....\n 7467      /**\n 7468       * @ngdoc property\n 7469:      * @name ng.$rootScope.Scope#$id\n 7470       * @propertyOf ng.$rootScope.Scope\n 7471       * @returns {number} Unique scope ID (monotonically increasing alphanumeric sequence) useful for\n ....\n 7477        /**\n 7478         * @ngdoc function\n 7479:        * @name ng.$rootScope.Scope#$new\n 7480         * @methodOf ng.$rootScope.Scope\n 7481         * @function\n ....\n 7513          } else {\n 7514            Child = function() {}; // should be anonymous; This is so that when the minifier munges\n 7515:             // the name it does not become random set of chars. These will then show up as class\n 7516:             // name in the debugger.\n 7517            Child.prototype = this;\n 7518            child = new Child();\n ....\n 7536        /**\n 7537         * @ngdoc function\n 7538:        * @name ng.$rootScope.Scope#$watch\n 7539         * @methodOf ng.$rootScope.Scope\n 7540         * @function\n ....\n 7575             // let's assume that scope was dependency injected as the $rootScope\n 7576             var scope = $rootScope;\n 7577:            scope.name = 'misko';\n 7578             scope.counter = 0;\n 7579  \n 7580             expect(scope.counter).toEqual(0);\n 7581:            scope.$watch('name', function(newValue, oldValue) { counter = counter + 1; });\n 7582             expect(scope.counter).toEqual(0);\n 7583  \n ....\n 7586             expect(scope.counter).toEqual(0);\n 7587  \n 7588:            scope.name = 'adam';\n 7589             scope.$digest();\n 7590             expect(scope.counter).toEqual(1);\n ....\n 7640        /**\n 7641         * @ngdoc function\n 7642:        * @name ng.$rootScope.Scope#$digest\n 7643         * @methodOf ng.$rootScope.Scope\n 7644         * @function\n ....\n 7667         * <pre>\n 7668             var scope = ...;\n 7669:            scope.name = 'misko';\n 7670             scope.counter = 0;\n 7671  \n 7672             expect(scope.counter).toEqual(0);\n 7673:            scope.$watch('name', function(newValue, oldValue) {\n 7674               counter = counter + 1;\n 7675             });\n ....\n 7680             expect(scope.counter).toEqual(0);\n 7681  \n 7682:            scope.name = 'adam';\n 7683             scope.$digest();\n 7684             expect(scope.counter).toEqual(1);\n ....\n 7730                        if (!watchLog[logIdx]) watchLog[logIdx] = [];\n 7731                        logMsg = (isFunction(watch.exp))\n 7732:                           ? 'fn: ' + (watch.exp.name || watch.exp.toString())\n 7733                            : watch.exp;\n 7734                        logMsg += '; newVal: ' + toJson(value) + '; oldVal: ' + toJson(last);\n ....\n 7765        /**\n 7766         * @ngdoc event\n 7767:        * @name ng.$rootScope.Scope#$destroy\n 7768         * @eventOf ng.$rootScope.Scope\n 7769         * @eventType broadcast on scope being destroyed\n ....\n 7775        /**\n 7776         * @ngdoc function\n 7777:        * @name ng.$rootScope.Scope#$destroy\n 7778         * @methodOf ng.$rootScope.Scope\n 7779         * @function\n ....\n 7812        /**\n 7813         * @ngdoc function\n 7814:        * @name ng.$rootScope.Scope#$eval\n 7815         * @methodOf ng.$rootScope.Scope\n 7816         * @function\n ....\n 7843        /**\n 7844         * @ngdoc function\n 7845:        * @name ng.$rootScope.Scope#$evalAsync\n 7846         * @methodOf ng.$rootScope.Scope\n 7847         * @function\n ....\n 7871        /**\n 7872         * @ngdoc function\n 7873:        * @name ng.$rootScope.Scope#$apply\n 7874         * @methodOf ng.$rootScope.Scope\n 7875         * @function\n ....\n 7934        /**\n 7935         * @ngdoc function\n 7936:        * @name ng.$rootScope.Scope#$on\n 7937         * @methodOf ng.$rootScope.Scope\n 7938         * @function\n ....\n 7942         * event life cycle.\n 7943         *\n 7944:        * @param {string} name Event name to listen on.\n 7945         * @param {function(event)} listener Function to call when the event is emitted.\n 7946         * @returns {function()} Returns a deregistration function for this listener.\n ....\n 7951         *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or `$broadcast`-ed.\n 7952         *   - `currentScope` - `{Scope}`: the current scope which is handling the event.\n 7953:        *   - `name` - `{string}`: Name of the event.\n 7954         *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel further event\n 7955         *     propagation (available only for events that were `$emit`-ed).\n ....\n 7957         *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.\n 7958         */\n 7959:       $on: function(name, listener) {\n 7960:         var namedListeners = this.$$listeners[name];\n 7961:         if (!namedListeners) {\n 7962:           this.$$listeners[name] = namedListeners = [];\n 7963          }\n 7964:         namedListeners.push(listener);\n 7965  \n 7966          return function() {\n 7967:           namedListeners[indexOf(namedListeners, listener)] = null;\n 7968          };\n 7969        },\n ....\n 7972        /**\n 7973         * @ngdoc function\n 7974:        * @name ng.$rootScope.Scope#$emit\n 7975         * @methodOf ng.$rootScope.Scope\n 7976         * @function\n 7977         *\n 7978         * @description\n 7979:        * Dispatches an event `name` upwards through the scope hierarchy notifying the\n 7980         * registered {@link ng.$rootScope.Scope#$on} listeners.\n 7981         *\n 7982         * The event life cycle starts at the scope on which `$emit` was called. All\n 7983:        * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get notified.\n 7984         * Afterwards, the event traverses upwards toward the root scope and calls all registered\n 7985         * listeners along the way. The event will stop propagating if one of the listeners cancels it.\n ....\n 7988         * onto the {@link ng.$exceptionHandler $exceptionHandler} service.\n 7989         *\n 7990:        * @param {string} name Event name to emit.\n 7991         * @param {...*} args Optional set of arguments which will be passed onto the event listeners.\n 7992         * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}\n 7993         */\n 7994:       $emit: function(name, args) {\n 7995          var empty = [],\n 7996:             namedListeners,\n 7997              scope = this,\n 7998              stopPropagation = false,\n 7999              event = {\n 8000:               name: name,\n 8001                targetScope: scope,\n 8002                stopPropagation: function() {stopPropagation = true;},\n ....\n 8010  \n 8011          do {\n 8012:           namedListeners = scope.$$listeners[name] || empty;\n 8013            event.currentScope = scope;\n 8014:           for (i=0, length=namedListeners.length; i<length; i++) {\n 8015  \n 8016              // if listeners were deregistered, defragment the array\n 8017:             if (!namedListeners[i]) {\n 8018:               namedListeners.splice(i, 1);\n 8019                i--;\n 8020                length--;\n ....\n 8022              }\n 8023              try {\n 8024:               namedListeners[i].apply(null, listenerArgs);\n 8025                if (stopPropagation) return event;\n 8026              } catch (e) {\n ....\n 8038        /**\n 8039         * @ngdoc function\n 8040:        * @name ng.$rootScope.Scope#$broadcast\n 8041         * @methodOf ng.$rootScope.Scope\n 8042         * @function\n 8043         *\n 8044         * @description\n 8045:        * Dispatches an event `name` downwards to all child scopes (and their children) notifying the\n 8046         * registered {@link ng.$rootScope.Scope#$on} listeners.\n 8047         *\n 8048         * The event life cycle starts at the scope on which `$broadcast` was called. All\n 8049:        * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get notified.\n 8050         * Afterwards, the event propagates to all direct and indirect scopes of the current scope and\n 8051         * calls all registered listeners along the way. The event cannot be canceled.\n ....\n 8054         * onto the {@link ng.$exceptionHandler $exceptionHandler} service.\n 8055         *\n 8056:        * @param {string} name Event name to emit.\n 8057         * @param {...*} args Optional set of arguments which will be passed onto the event listeners.\n 8058         * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}\n 8059         */\n 8060:       $broadcast: function(name, args) {\n 8061          var target = this,\n 8062              current = target,\n 8063              next = target,\n 8064              event = {\n 8065:               name: name,\n 8066                targetScope: target,\n 8067                preventDefault: function() {\n ....\n 8077            current = next;\n 8078            event.currentScope = current;\n 8079:           listeners = current.$$listeners[name] || [];\n 8080            for (i=0, length = listeners.length; i<length; i++) {\n 8081              // if listeners were deregistered, defragment the array\n ....\n 8125      }\n 8126  \n 8127:     function compileToFn(exp, name) {\n 8128        var fn = $parse(exp);\n 8129:       assertArgFn(fn, name);\n 8130        return fn;\n 8131      }\n ....\n 8142   * !!! This is an undocumented \"private\" service !!!\n 8143   *\n 8144:  * @name ng.$sniffer\n 8145   * @requires $window\n 8146   *\n ....\n 8186  /**\n 8187   * @ngdoc object\n 8188:  * @name ng.$window\n 8189   *\n 8190   * @description\n ....\n 8255    var headersObj = isObject(headers) ? headers : undefined;\n 8256  \n 8257:   return function(name) {\n 8258      if (!headersObj) headersObj =  parseHeaders(headers);\n 8259  \n 8260:     if (name) {\n 8261:       return headersObj[lowercase(name)] || null;\n 8262      }\n 8263  \n ....\n 8346      /**\n 8347       * @ngdoc function\n 8348:      * @name ng.$http\n 8349       * @requires $httpBacked\n 8350       * @requires $browser\n ....\n 8431       * To add or overwrite these defaults, simply add or remove a property from this configuration\n 8432       * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object\n 8433:      * with name equal to the lower-cased http method name, e.g.\n 8434       * `$httpProvider.defaults.headers.get['My-Header']='value'`.\n 8435       *\n ....\n 8603       *   - **data** – `{string|Object}` – The response body transformed with the transform functions.\n 8604       *   - **status** – `{number}` – HTTP status code of the response.\n 8605:      *   - **headers** – `{function([headerName])}` – Header getter function.\n 8606       *   - **config** – `{Object}` – The configuration object that was used to generate the request.\n 8607       *\n ....\n 8612       * @example\n 8613        <example>\n 8614:         <file name=\"index.html\">\n 8615            <div ng-controller=\"FetchCtrl\">\n 8616              <select ng-model=\"method\">\n ....\n 8621              <button ng-click=\"fetch()\">fetch</button><br>\n 8622              <button ng-click=\"updateModel('GET', 'http-hello.html')\">Sample GET</button>\n 8623:             <button ng-click=\"updateModel('JSONP', 'http://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')\">Sample JSONP</button>\n 8624              <button ng-click=\"updateModel('JSONP', 'http://angularjs.org/doesntexist&callback=JSON_CALLBACK')\">Invalid JSONP</button>\n 8625              <pre>http status code: {{status}}</pre>\n ....\n 8627            </div>\n 8628          </file>\n 8629:         <file name=\"script.js\">\n 8630            function FetchCtrl($scope, $http, $templateCache) {\n 8631              $scope.method = 'GET';\n ....\n 8653            }\n 8654          </file>\n 8655:         <file name=\"http-hello.html\">\n 8656            Hello, $http!\n 8657          </file>\n 8658:         <file name=\"scenario.js\">\n 8659            it('should make an xhr GET request', function() {\n 8660              element(':button:contains(\"Sample GET\")').click();\n ....\n 8740      /**\n 8741       * @ngdoc method\n 8742:      * @name ng.$http#get\n 8743       * @methodOf ng.$http\n 8744       *\n ....\n 8753      /**\n 8754       * @ngdoc method\n 8755:      * @name ng.$http#delete\n 8756       * @methodOf ng.$http\n 8757       *\n ....\n 8766      /**\n 8767       * @ngdoc method\n 8768:      * @name ng.$http#head\n 8769       * @methodOf ng.$http\n 8770       *\n ....\n 8779      /**\n 8780       * @ngdoc method\n 8781:      * @name ng.$http#jsonp\n 8782       * @methodOf ng.$http\n 8783       *\n ....\n 8794      /**\n 8795       * @ngdoc method\n 8796:      * @name ng.$http#post\n 8797       * @methodOf ng.$http\n 8798       *\n ....\n 8808      /**\n 8809       * @ngdoc method\n 8810:      * @name ng.$http#put\n 8811       * @methodOf ng.$http\n 8812       *\n ....\n 8823          /**\n 8824           * @ngdoc property\n 8825:          * @name ng.$http#defaults\n 8826           * @propertyOf ng.$http\n 8827           *\n ....\n 8838  \n 8839  \n 8840:     function createShortMethods(names) {\n 8841:       forEach(arguments, function(name) {\n 8842:         $http[name] = function(url, config) {\n 8843            return $http(extend(config || {}, {\n 8844:             method: name,\n 8845              url: url\n 8846            }));\n ....\n 8850  \n 8851  \n 8852:     function createShortMethodsWithData(name) {\n 8853:       forEach(arguments, function(name) {\n 8854:         $http[name] = function(url, data, config) {\n 8855            return $http(extend(config || {}, {\n 8856:             method: name,\n 8857              url: url,\n 8858              data: data\n ....\n 8984  /**\n 8985   * @ngdoc object\n 8986:  * @name ng.$httpBackend\n 8987   * @requires $browser\n 8988   * @requires $window\n ....\n 9103  /**\n 9104   * @ngdoc object\n 9105:  * @name ng.$locale\n 9106   *\n 9107   * @description\n ....\n 9180       /**\n 9181        * @ngdoc function\n 9182:       * @name ng.$timeout\n 9183        * @requires $browser\n 9184        *\n ....\n 9234       /**\n 9235        * @ngdoc function\n 9236:       * @name ng.$timeout#cancel\n 9237        * @methodOf ng.$timeout\n 9238        *\n ....\n 9259  /**\n 9260   * @ngdoc object\n 9261:  * @name ng.$filterProvider\n 9262   * @description\n 9263   *\n ....\n 9270   *   function MyModule($provide, $filterProvider) {\n 9271   *     // create a service to demonstrate injection (not always needed)\n 9272:  *     $provide.value('greet', function(name){\n 9273:  *       return 'Hello ' + name + '!';\n 9274   *     });\n 9275   *\n ....\n 9287   * </pre>\n 9288   *\n 9289:  * The filter function is registered with the `$injector` under the filter name suffixe with `Filter`.\n 9290   * <pre>\n 9291   *   it('should be the same instance', inject(\n ....\n 9307  /**\n 9308   * @ngdoc method\n 9309:  * @name ng.$filterProvider#register\n 9310   * @methodOf ng.$filterProvider\n 9311   * @description\n 9312   * Register filter factory function.\n 9313   *\n 9314:  * @param {String} name Name of the filter.\n 9315   * @param {function} fn The filter factory function which is injectable.\n 9316   */\n ....\n 9319  /**\n 9320   * @ngdoc function\n 9321:  * @name ng.$filter\n 9322   * @function\n 9323   * @description\n ....\n 9326   * The general syntax in templates is as follows:\n 9327   *\n 9328:  *         {{ expression | [ filter_name ] }}\n 9329   *\n 9330:  * @param {String} name Name of the filter function to retrieve\n 9331   * @return {Function} the filter function\n 9332   */\n ....\n 9335    var suffix = 'Filter';\n 9336  \n 9337:   function register(name, factory) {\n 9338:     return $provide.factory(name + suffix, factory);\n 9339    }\n 9340    this.register = register;\n 9341  \n 9342    this.$get = ['$injector', function($injector) {\n 9343:     return function(name) {\n 9344:       return $injector.get(name + suffix);\n 9345      }\n 9346    }];\n ....\n 9361  /**\n 9362   * @ngdoc filter\n 9363:  * @name ng.filter:filter\n 9364   * @function\n 9365   *\n ....\n 9381   *\n 9382   *   - `Object`: A pattern object can be used to filter specific properties on objects contained\n 9383:  *     by `array`. For example `{name:\"M\", phone:\"1\"}` predicate will return an array of items\n 9384:  *     which have property `name` containing \"M\" and property `phone` containing \"1\". A special\n 9385:  *     property name `$` can be used (as in `{$:\"text\"}`) to accept a match against any\n 9386   *     property of the object. That's equivalent to the simple substring match with a `string`\n 9387   *     as described above.\n ....\n 9394     <doc:example>\n 9395       <doc:source>\n 9396:        <div ng-init=\"friends = [{name:'John', phone:'555-1276'},\n 9397:                                 {name:'Mary', phone:'800-BIG-MARY'},\n 9398:                                 {name:'Mike', phone:'555-4321'},\n 9399:                                 {name:'Adam', phone:'555-5678'},\n 9400:                                 {name:'Julie', phone:'555-8765'}]\"></div>\n 9401  \n 9402         Search: <input ng-model=\"searchText\">\n 9403         <table id=\"searchTextResults\">\n 9404:          <tr><th>Name</th><th>Phone</th><tr>\n 9405           <tr ng-repeat=\"friend in friends | filter:searchText\">\n 9406:            <td>{{friend.name}}</td>\n 9407             <td>{{friend.phone}}</td>\n 9408           <tr>\n ....\n 9410         <hr>\n 9411         Any: <input ng-model=\"search.$\"> <br>\n 9412:        Name only <input ng-model=\"search.name\"><br>\n 9413         Phone only <input ng-model=\"search.phone\"å><br>\n 9414         <table id=\"searchObjResults\">\n 9415:          <tr><th>Name</th><th>Phone</th><tr>\n 9416           <tr ng-repeat=\"friend in friends | filter:search\">\n 9417:            <td>{{friend.name}}</td>\n 9418             <td>{{friend.phone}}</td>\n 9419           <tr>\n ....\n 9423         it('should search across all fields when filtering with a string', function() {\n 9424           input('searchText').enter('m');\n 9425:          expect(repeater('#searchTextResults tr', 'friend in friends').column('friend.name')).\n 9426             toEqual(['Mary', 'Mike', 'Adam']);\n 9427  \n 9428           input('searchText').enter('76');\n 9429:          expect(repeater('#searchTextResults tr', 'friend in friends').column('friend.name')).\n 9430             toEqual(['John', 'Julie']);\n 9431         });\n ....\n 9433         it('should search in specific fields when filtering with a predicate object', function() {\n 9434           input('search.$').enter('i');\n 9435:          expect(repeater('#searchObjResults tr', 'friend in friends').column('friend.name')).\n 9436             toEqual(['Mary', 'Mike', 'Julie']);\n 9437         });\n ....\n 9524  /**\n 9525   * @ngdoc filter\n 9526:  * @name ng.filter:currency\n 9527   * @function\n 9528   *\n ....\n 9575  /**\n 9576   * @ngdoc filter\n 9577:  * @name ng.filter:number\n 9578   * @function\n 9579   *\n ....\n 9713  \n 9714  \n 9715: function dateGetter(name, size, offset, trim) {\n 9716    return function(date) {\n 9717:     var value = date['get' + name]();\n 9718      if (offset > 0 || value > -offset)\n 9719        value += offset;\n ....\n 9723  }\n 9724  \n 9725: function dateStrGetter(name, shortForm) {\n 9726    return function(date, formats) {\n 9727:     var value = date['get' + name]();\n 9728:     var get = uppercase(shortForm ? ('SHORT' + name) : name);\n 9729  \n 9730      return formats[get][value];\n ....\n 9770  /**\n 9771   * @ngdoc filter\n 9772:  * @name ng.filter:date\n 9773   * @function\n 9774   *\n ....\n 9917  /**\n 9918   * @ngdoc filter\n 9919:  * @name ng.filter:json\n 9920   * @function\n 9921   *\n ....\n 9933     <doc:example>\n 9934       <doc:source>\n 9935:        <pre>{{ {'name':'value'} | json }}</pre>\n 9936       </doc:source>\n 9937       <doc:scenario>\n 9938         it('should jsonify filtered objects', function() {\n 9939:          expect(binding(\"{'name':'value'}\")).toMatch(/\\{\\n  \"name\": ?\"value\"\\n}/);\n 9940         });\n 9941       </doc:scenario>\n ....\n 9952  /**\n 9953   * @ngdoc filter\n 9954:  * @name ng.filter:lowercase\n 9955   * @function\n 9956   * @description\n ....\n 9963  /**\n 9964   * @ngdoc filter\n 9965:  * @name ng.filter:uppercase\n 9966   * @function\n 9967   * @description\n ....\n 9973  /**\n 9974   * @ngdoc function\n 9975:  * @name ng.filter:limitTo\n 9976   * @function\n 9977   *\n ....\n 10059  /**\n 10060   * @ngdoc function\n 10061:  * @name ng.filter:orderBy\n 10062   * @function\n 10063   *\n .....\n 10076   *    - `function`: Getter function. The result of this function will be sorted using the\n 10077   *      `<`, `=`, `>` operator.\n 10078:  *    - `string`: An Angular expression which evaluates to an object to order by, such as 'name'\n 10079:  *      to sort by a property called 'name'. Optionally prefixed with `+` or `-` to control\n 10080:  *      ascending or descending sort order (for example, +name or -name).\n 10081   *    - `Array`: An array of function or string predicates. The first predicate in the array\n 10082   *      is used for sorting, but when two items are equivalent, the next predicate is used.\n .....\n 10091           function Ctrl($scope) {\n 10092             $scope.friends =\n 10093:                [{name:'John', phone:'555-1212', age:10},\n 10094:                 {name:'Mary', phone:'555-9876', age:19},\n 10095:                 {name:'Mike', phone:'555-4321', age:21},\n 10096:                 {name:'Adam', phone:'555-5678', age:35},\n 10097:                 {name:'Julie', phone:'555-8765', age:29}]\n 10098             $scope.predicate = '-age';\n 10099           }\n .....\n 10105           <table class=\"friend\">\n 10106             <tr>\n 10107:              <th><a href=\"\" ng-click=\"predicate = 'name'; reverse=false\">Name</a>\n 10108:                  (<a href ng-click=\"predicate = '-name'; reverse=false\">^</a>)</th>\n 10109               <th><a href=\"\" ng-click=\"predicate = 'phone'; reverse=!reverse\">Phone Number</a></th>\n 10110               <th><a href=\"\" ng-click=\"predicate = 'age'; reverse=!reverse\">Age</a></th>\n 10111             <tr>\n 10112             <tr ng-repeat=\"friend in friends | orderBy:predicate:reverse\">\n 10113:              <td>{{friend.name}}</td>\n 10114               <td>{{friend.phone}}</td>\n 10115               <td>{{friend.age}}</td>\n .....\n 10123           expect(repeater('table.friend', 'friend in friends').column('friend.age')).\n 10124             toEqual(['35', '29', '21', '19', '10']);\n 10125:          expect(repeater('table.friend', 'friend in friends').column('friend.name')).\n 10126             toEqual(['Adam', 'Julie', 'Mike', 'Mary', 'John']);\n 10127         });\n 10128  \n 10129         it('should reorder the table when user selects different predicate', function() {\n 10130:          element('.doc-example-live a:contains(\"Name\")').click();\n 10131:          expect(repeater('table.friend', 'friend in friends').column('friend.name')).\n 10132             toEqual(['Adam', 'John', 'Julie', 'Mary', 'Mike']);\n 10133           expect(repeater('table.friend', 'friend in friends').column('friend.age')).\n .....\n 10137           expect(repeater('table.friend', 'friend in friends').column('friend.phone')).\n 10138             toEqual(['555-9876', '555-8765', '555-5678', '555-4321', '555-1212']);\n 10139:          expect(repeater('table.friend', 'friend in friends').column('friend.name')).\n 10140             toEqual(['Mary', 'Julie', 'Adam', 'Mike', 'John']);\n 10141         });\n .....\n 10205  /**\n 10206   * @ngdoc directive\n 10207:  * @name ng.directive:a\n 10208   * @restrict E\n 10209   *\n .....\n 10220    compile: function(element, attr) {\n 10221      // turn <a href ng-click=\"..\">link</a> into a link in IE\n 10222:     // but only if it doesn't have name attribute, in which case it's an anchor\n 10223      if (!attr.href) {\n 10224        attr.$set('href', '');\n .....\n 10239  /**\n 10240   * @ngdoc directive\n 10241:  * @name ng.directive:ngHref\n 10242   * @restrict A\n 10243   *\n .....\n 10270          <a id=\"link-2\" href=\"\" ng-click=\"value = 2\">link 2</a> (link, don't reload)<br />\n 10271          <a id=\"link-3\" ng-href=\"/{{'123'}}\">link 3</a> (link, reload!)<br />\n 10272:         <a id=\"link-4\" href=\"\" name=\"xx\" ng-click=\"value = 4\">anchor</a> (link, don't reload)<br />\n 10273:         <a id=\"link-5\" name=\"xxx\" ng-click=\"value = 5\">anchor</a> (no link)<br />\n 10274          <a id=\"link-6\" ng-href=\"{{value}}\">link</a> (link, change location)\n 10275        </doc:source>\n .....\n 10294          });\n 10295  \n 10296:         it('should execute ng-click but not reload when href empty string and name specified', function() {\n 10297            element('#link-4').click();\n 10298            expect(input('value').val()).toEqual('4');\n .....\n 10300          });\n 10301  \n 10302:         it('should execute ng-click but not reload when no href but name specified', function() {\n 10303            element('#link-5').click();\n 10304            expect(input('value').val()).toEqual('5');\n .....\n 10319  /**\n 10320   * @ngdoc directive\n 10321:  * @name ng.directive:ngSrc\n 10322   * @restrict A\n 10323   *\n .....\n 10344  /**\n 10345   * @ngdoc directive\n 10346:  * @name ng.directive:ngDisabled\n 10347   * @restrict A\n 10348   *\n .....\n 10383  /**\n 10384   * @ngdoc directive\n 10385:  * @name ng.directive:ngChecked\n 10386   * @restrict A\n 10387   *\n .....\n 10413  /**\n 10414   * @ngdoc directive\n 10415:  * @name ng.directive:ngMultiple\n 10416   * @restrict A\n 10417   *\n .....\n 10449  /**\n 10450   * @ngdoc directive\n 10451:  * @name ng.directive:ngReadonly\n 10452   * @restrict A\n 10453   *\n .....\n 10479  /**\n 10480   * @ngdoc directive\n 10481:  * @name ng.directive:ngSelected\n 10482   * @restrict A\n 10483   *\n .....\n 10514  \n 10515  // boolean attrs are evaluated\n 10516: forEach(BOOLEAN_ATTR, function(propName, attrName) {\n 10517:   var normalized = directiveNormalize('ng-' + attrName);\n 10518    ngAttributeAliasDirectives[normalized] = function() {\n 10519      return {\n .....\n 10522          return function(scope, element, attr) {\n 10523            scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {\n 10524:             attr.$set(attrName, !!value);\n 10525            });\n 10526          };\n .....\n 10532  \n 10533  // ng-src, ng-href are interpolated\n 10534: forEach(['src', 'href'], function(attrName) {\n 10535:   var normalized = directiveNormalize('ng-' + attrName);\n 10536    ngAttributeAliasDirectives[normalized] = function() {\n 10537      return {\n .....\n 10542               return;\n 10543  \n 10544:           attr.$set(attrName, value);\n 10545  \n 10546            // on IE, if \"ng:src\" directive declaration is used and \"src\" attribute doesn't exist\n 10547            // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need\n 10548            // to set the property as well to achieve the desired effect\n 10549:           if (msie) element.prop(attrName, value);\n 10550          });\n 10551        }\n .....\n 10563  /**\n 10564   * @ngdoc object\n 10565:  * @name ng.directive:form.FormController\n 10566   *\n 10567   * @property {boolean} $pristine True if user has not interacted with the form yet.\n .....\n 10573   *  forms, where:\n 10574   *\n 10575:  *  - keys are validation tokens (error names) — such as `REQUIRED`, `URL` or `EMAIL`),\n 10576   *  - values are arrays of controls or forms that are invalid with given error.\n 10577   *\n .....\n 10593  \n 10594    // init state\n 10595:   form.$name = attrs.name;\n 10596    form.$dirty = false;\n 10597    form.$pristine = true;\n .....\n 10614  \n 10615    form.$addControl = function(control) {\n 10616:     if (control.$name && !form.hasOwnProperty(control.$name)) {\n 10617:       form[control.$name] = control;\n 10618      }\n 10619    };\n 10620  \n 10621    form.$removeControl = function(control) {\n 10622:     if (control.$name && form[control.$name] === control) {\n 10623:       delete form[control.$name];\n 10624      }\n 10625      forEach(errors, function(queue, validationToken) {\n .....\n 10678  /**\n 10679   * @ngdoc directive\n 10680:  * @name ng.directive:ngForm\n 10681   * @restrict EAC\n 10682   *\n .....\n 10686   * sub-group of controls needs to be determined.\n 10687   *\n 10688:  * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into\n 10689:  *                       related scope, under this name.\n 10690   *\n 10691   */\n .....\n 10693   /**\n 10694   * @ngdoc directive\n 10695:  * @name ng.directive:form\n 10696   * @restrict E\n 10697   *\n .....\n 10700   * {@link ng.directive:form.FormController FormController}.\n 10701   *\n 10702:  * If `name` attribute is specified, the form controller is published onto the current scope under\n 10703:  * this name.\n 10704   *\n 10705   * # Alias: {@link ng.directive:ngForm `ngForm`}\n .....\n 10746   * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)\n 10747   *\n 10748:  * @param {string=} name Name of the form. If specified, the form controller will be published into\n 10749:  *                       related scope, under this name.\n 10750   *\n 10751   * @example\n .....\n 10757           }\n 10758         </script>\n 10759:        <form name=\"myForm\" ng-controller=\"Ctrl\">\n 10760:          userType: <input name=\"input\" ng-model=\"userType\" required>\n 10761           <span class=\"error\" ng-show=\"myForm.input.$error.REQUIRED\">Required!</span><br>\n 10762           <tt>userType = {{userType}}</tt><br>\n .....\n 10784    return ['$timeout', function($timeout) {\n 10785      var formDirective = {\n 10786:       name: 'form',\n 10787        restrict: 'E',\n 10788        controller: FormController,\n .....\n 10815  \n 10816              var parentFormCtrl = formElement.parent().controller('form'),\n 10817:                 alias = attr.name || attr.ngForm;\n 10818  \n 10819              if (alias) {\n .....\n 10849    /**\n 10850     * @ngdoc inputType\n 10851:    * @name ng.directive:input.text\n 10852     *\n 10853     * @description\n .....\n 10855     *\n 10856     * @param {string} ngModel Assignable angular expression to data-bind to.\n 10857:    * @param {string=} name Property name of the form under which the control is published.\n 10858     * @param {string=} required Adds `required` validation error key if the value is not entered.\n 10859     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n .....\n 10879             }\n 10880           </script>\n 10881:          <form name=\"myForm\" ng-controller=\"Ctrl\">\n 10882:            Single word: <input type=\"text\" name=\"input\" ng-model=\"text\"\n 10883                                 ng-pattern=\"word\" required>\n 10884             <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n .....\n 10918    /**\n 10919     * @ngdoc inputType\n 10920:    * @name ng.directive:input.number\n 10921     *\n 10922     * @description\n .....\n 10925     *\n 10926     * @param {string} ngModel Assignable angular expression to data-bind to.\n 10927:    * @param {string=} name Property name of the form under which the control is published.\n 10928     * @param {string=} min Sets the `min` validation error key if the value entered is less then `min`.\n 10929     * @param {string=} max Sets the `max` validation error key if the value entered is greater then `min`.\n .....\n 10950             }\n 10951           </script>\n 10952:          <form name=\"myForm\" ng-controller=\"Ctrl\">\n 10953:            Number: <input type=\"number\" name=\"input\" ng-model=\"value\"\n 10954                            min=\"0\" max=\"99\" required>\n 10955             <span class=\"error\" ng-show=\"myForm.list.$error.required\">\n .....\n 10989    /**\n 10990     * @ngdoc inputType\n 10991:    * @name ng.directive:input.url\n 10992     *\n 10993     * @description\n .....\n 10996     *\n 10997     * @param {string} ngModel Assignable angular expression to data-bind to.\n 10998:    * @param {string=} name Property name of the form under which the control is published.\n 10999     * @param {string=} required Sets `required` validation error key if the value is not entered.\n 11000     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n .....\n 11019             }\n 11020           </script>\n 11021:          <form name=\"myForm\" ng-controller=\"Ctrl\">\n 11022:            URL: <input type=\"url\" name=\"input\" ng-model=\"text\" required>\n 11023             <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n 11024               Required!</span>\n .....\n 11057    /**\n 11058     * @ngdoc inputType\n 11059:    * @name ng.directive:input.email\n 11060     *\n 11061     * @description\n .....\n 11064     *\n 11065     * @param {string} ngModel Assignable angular expression to data-bind to.\n 11066:    * @param {string=} name Property name of the form under which the control is published.\n 11067     * @param {string=} required Sets `required` validation error key if the value is not entered.\n 11068     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n .....\n 11085             }\n 11086           </script>\n 11087:            <form name=\"myForm\" ng-controller=\"Ctrl\">\n 11088:              Email: <input type=\"email\" name=\"input\" ng-model=\"text\" required>\n 11089               <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n 11090                 Required!</span>\n .....\n 11123    /**\n 11124     * @ngdoc inputType\n 11125:    * @name ng.directive:input.radio\n 11126     *\n 11127     * @description\n .....\n 11130     * @param {string} ngModel Assignable angular expression to data-bind to.\n 11131     * @param {string} value The value to which the expression should be set when selected.\n 11132:    * @param {string=} name Property name of the form under which the control is published.\n 11133     * @param {string=} ngChange Angular expression to be executed when input changes due to user\n 11134     *    interaction with the input element.\n .....\n 11142             }\n 11143           </script>\n 11144:          <form name=\"myForm\" ng-controller=\"Ctrl\">\n 11145             <input type=\"radio\" ng-model=\"color\" value=\"red\">  Red <br/>\n 11146             <input type=\"radio\" ng-model=\"color\" value=\"green\"> Green <br/>\n .....\n 11164    /**\n 11165     * @ngdoc inputType\n 11166:    * @name ng.directive:input.checkbox\n 11167     *\n 11168     * @description\n .....\n 11170     *\n 11171     * @param {string} ngModel Assignable angular expression to data-bind to.\n 11172:    * @param {string=} name Property name of the form under which the control is published.\n 11173     * @param {string=} ngTrueValue The value to which the expression should be set when selected.\n 11174     * @param {string=} ngFalseValue The value to which the expression should be set when not selected.\n .....\n 11185             }\n 11186           </script>\n 11187:          <form name=\"myForm\" ng-controller=\"Ctrl\">\n 11188             Value1: <input type=\"checkbox\" ng-model=\"value1\"> <br/>\n 11189             Value2: <input type=\"checkbox\" ng-model=\"value2\"\n .....\n 11430  \n 11431  function radioInputType(scope, element, attr, ctrl) {\n 11432:   // make the name unique, if not defined\n 11433:   if (isUndefined(attr.name)) {\n 11434:     element.attr('name', nextUid());\n 11435    }\n 11436  \n .....\n 11480  /**\n 11481   * @ngdoc directive\n 11482:  * @name ng.directive:textarea\n 11483   * @restrict E\n 11484   *\n .....\n 11489   *\n 11490   * @param {string} ngModel Assignable angular expression to data-bind to.\n 11491:  * @param {string=} name Property name of the form under which the control is published.\n 11492   * @param {string=} required Sets `required` validation error key if the value is not entered.\n 11493   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n .....\n 11508  /**\n 11509   * @ngdoc directive\n 11510:  * @name ng.directive:input\n 11511   * @restrict E\n 11512   *\n .....\n 11516   *\n 11517   * @param {string} ngModel Assignable angular expression to data-bind to.\n 11518:  * @param {string=} name Property name of the form under which the control is published.\n 11519   * @param {string=} required Sets `required` validation error key if the value is not entered.\n 11520   * @param {boolean=} ngRequired Sets `required` attribute if set to true\n .....\n 11534         <script>\n 11535           function Ctrl($scope) {\n 11536:            $scope.user = {name: 'guest', last: 'visitor'};\n 11537           }\n 11538         </script>\n 11539         <div ng-controller=\"Ctrl\">\n 11540:          <form name=\"myForm\">\n 11541:            User name: <input type=\"text\" name=\"userName\" ng-model=\"user.name\" required>\n 11542:            <span class=\"error\" ng-show=\"myForm.userName.$error.required\">\n 11543               Required!</span><br>\n 11544:            Last name: <input type=\"text\" name=\"lastName\" ng-model=\"user.last\"\n 11545               ng-minlength=\"3\" ng-maxlength=\"10\">\n 11546:            <span class=\"error\" ng-show=\"myForm.lastName.$error.minlength\">\n 11547               Too short!</span>\n 11548:            <span class=\"error\" ng-show=\"myForm.lastName.$error.maxlength\">\n 11549               Too long!</span><br>\n 11550           </form>\n 11551           <hr>\n 11552           <tt>user = {{user}}</tt><br/>\n 11553:          <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br>\n 11554:          <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br>\n 11555:          <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br>\n 11556:          <tt>myForm.userName.$error = {{myForm.lastName.$error}}</tt><br>\n 11557           <tt>myForm.$valid = {{myForm.$valid}}</tt><br>\n 11558           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>\n .....\n 11563        <doc:scenario>\n 11564          it('should initialize to model', function() {\n 11565:           expect(binding('user')).toEqual('{\"name\":\"guest\",\"last\":\"visitor\"}');\n 11566:           expect(binding('myForm.userName.$valid')).toEqual('true');\n 11567            expect(binding('myForm.$valid')).toEqual('true');\n 11568          });\n 11569  \n 11570          it('should be invalid if empty when required', function() {\n 11571:           input('user.name').enter('');\n 11572            expect(binding('user')).toEqual('{\"last\":\"visitor\"}');\n 11573:           expect(binding('myForm.userName.$valid')).toEqual('false');\n 11574            expect(binding('myForm.$valid')).toEqual('false');\n 11575          });\n .....\n 11577          it('should be valid if empty when min length is set', function() {\n 11578            input('user.last').enter('');\n 11579:           expect(binding('user')).toEqual('{\"name\":\"guest\",\"last\":\"\"}');\n 11580:           expect(binding('myForm.lastName.$valid')).toEqual('true');\n 11581            expect(binding('myForm.$valid')).toEqual('true');\n 11582          });\n .....\n 11584          it('should be invalid if less than required min length', function() {\n 11585            input('user.last').enter('xx');\n 11586:           expect(binding('user')).toEqual('{\"name\":\"guest\"}');\n 11587:           expect(binding('myForm.lastName.$valid')).toEqual('false');\n 11588:           expect(binding('myForm.lastName.$error')).toMatch(/minlength/);\n 11589            expect(binding('myForm.$valid')).toEqual('false');\n 11590          });\n 11591  \n 11592          it('should be invalid if longer than max length', function() {\n 11593:           input('user.last').enter('some ridiculously long name');\n 11594            expect(binding('user'))\n 11595:             .toEqual('{\"name\":\"guest\"}');\n 11596:           expect(binding('myForm.lastName.$valid')).toEqual('false');\n 11597:           expect(binding('myForm.lastName.$error')).toMatch(/maxlength/);\n 11598            expect(binding('myForm.$valid')).toEqual('false');\n 11599          });\n .....\n 11621  /**\n 11622   * @ngdoc object\n 11623:  * @name ng.directive:ngModel.NgModelController\n 11624   *\n 11625   * @property {string} $viewValue Actual string value in the view.\n .....\n 11651   *\n 11652   * <example module=\"customControl\">\n 11653:     <file name=\"style.css\">\n 11654        [contenteditable] {\n 11655          border: 1px solid black;\n .....\n 11663  \n 11664      </file>\n 11665:     <file name=\"script.js\">\n 11666        angular.module('customControl', []).\n 11667          directive('contenteditable', function() {\n .....\n 11691          });\n 11692      </file>\n 11693:     <file name=\"index.html\">\n 11694:       <form name=\"myForm\">\n 11695         <div contenteditable\n 11696:             name=\"myWidget\" ng-model=\"userContent\"\n 11697              required>Change me!</div>\n 11698          <span ng-show=\"myForm.myWidget.$error.required\">Required!</span>\n .....\n 11701        </form>\n 11702      </file>\n 11703:     <file name=\"scenario.js\">\n 11704        it('should data-bind and become invalid', function() {\n 11705          var contentEditable = element('[contenteditable]');\n .....\n 11708          input('userContent').enter('');\n 11709          expect(contentEditable.text()).toEqual('');\n 11710:         expect(contentEditable.prop('className')).toMatch(/ng-invalid-required/);\n 11711        });\n 11712      </file>\n .....\n 11725    this.$valid = true;\n 11726    this.$invalid = false;\n 11727:   this.$name = $attr.name;\n 11728  \n 11729    var ngModelGet = $parse($attr.ngModel),\n .....\n 11737    /**\n 11738     * @ngdoc function\n 11739:    * @name ng.directive:ngModel.NgModelController#$render\n 11740     * @methodOf ng.directive:ngModel.NgModelController\n 11741     *\n .....\n 11765    /**\n 11766     * @ngdoc function\n 11767:    * @name ng.directive:ngModel.NgModelController#$setValidity\n 11768     * @methodOf ng.directive:ngModel.NgModelController\n 11769     *\n .....\n 11774     * This method should be called by validators - i.e. the parser or formatter functions.\n 11775     *\n 11776:    * @param {string} validationErrorKey Name of the validator. the `validationErrorKey` will assign\n 11777     *        to `$error[validationErrorKey]=isValid` so that it is available for data-binding.\n 11778     *        The `validationErrorKey` should be in camelCase and will get converted into dash-case\n 11779:    *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`\n 11780     *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .\n 11781     * @param {boolean} isValid Whether the current state is valid (true) or invalid (false).\n .....\n 11807    /**\n 11808     * @ngdoc function\n 11809:    * @name ng.directive:ngModel.NgModelController#$setViewValue\n 11810     * @methodOf ng.directive:ngModel.NgModelController\n 11811     *\n .....\n 11878  /**\n 11879   * @ngdoc directive\n 11880:  * @name ng.directive:ngModel\n 11881   *\n 11882   * @element input\n .....\n 11930  /**\n 11931   * @ngdoc directive\n 11932:  * @name ng.directive:ngChange\n 11933   * @restrict E\n 11934   *\n .....\n 12016  /**\n 12017   * @ngdoc directive\n 12018:  * @name ng.directive:ngList\n 12019   *\n 12020   * @description\n .....\n 12030         <script>\n 12031           function Ctrl($scope) {\n 12032:            $scope.names = ['igor', 'misko', 'vojta'];\n 12033           }\n 12034         </script>\n 12035:        <form name=\"myForm\" ng-controller=\"Ctrl\">\n 12036:          List: <input name=\"namesInput\" ng-model=\"names\" ng-list required>\n 12037           <span class=\"error\" ng-show=\"myForm.list.$error.required\">\n 12038             Required!</span>\n 12039:          <tt>names = {{names}}</tt><br/>\n 12040:          <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>\n 12041:          <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>\n 12042           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n 12043           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n .....\n 12046        <doc:scenario>\n 12047          it('should initialize to model', function() {\n 12048:           expect(binding('names')).toEqual('[\"igor\",\"misko\",\"vojta\"]');\n 12049:           expect(binding('myForm.namesInput.$valid')).toEqual('true');\n 12050          });\n 12051  \n 12052          it('should be invalid if empty', function() {\n 12053:           input('names').enter('');\n 12054:           expect(binding('names')).toEqual('[]');\n 12055:           expect(binding('myForm.namesInput.$valid')).toEqual('false');\n 12056          });\n 12057        </doc:scenario>\n .....\n 12113  /**\n 12114   * @ngdoc directive\n 12115:  * @name ng.directive:ngBind\n 12116   *\n 12117   * @description\n .....\n 12136   *\n 12137   * @example\n 12138:  * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.\n 12139     <doc:example>\n 12140       <doc:source>\n 12141         <script>\n 12142           function Ctrl($scope) {\n 12143:            $scope.name = 'Whirled';\n 12144           }\n 12145         </script>\n 12146         <div ng-controller=\"Ctrl\">\n 12147:          Enter name: <input type=\"text\" ng-model=\"name\"><br>\n 12148:          Hello <span ng-bind=\"name\"></span>!\n 12149         </div>\n 12150       </doc:source>\n 12151       <doc:scenario>\n 12152         it('should check ng-bind', function() {\n 12153:          expect(using('.doc-example-live').binding('name')).toBe('Whirled');\n 12154:          using('.doc-example-live').input('name').enter('world');\n 12155:          expect(using('.doc-example-live').binding('name')).toBe('world');\n 12156         });\n 12157       </doc:scenario>\n .....\n 12168  /**\n 12169   * @ngdoc directive\n 12170:  * @name ng.directive:ngBindTemplate\n 12171   *\n 12172   * @description\n .....\n 12175   * Unlike ngBind the ngBindTemplate can contain multiple `{{` `}}`\n 12176   * expressions. (This is required since some HTML elements\n 12177:  * can not have SPAN elements such as TITLE, or OPTION to name a few.)\n 12178   *\n 12179   * @element ANY\n .....\n 12188           function Ctrl($scope) {\n 12189             $scope.salutation = 'Hello';\n 12190:            $scope.name = 'World';\n 12191           }\n 12192         </script>\n 12193         <div ng-controller=\"Ctrl\">\n 12194          Salutation: <input type=\"text\" ng-model=\"salutation\"><br>\n 12195:         Name: <input type=\"text\" ng-model=\"name\"><br>\n 12196:         <pre ng-bind-template=\"{{salutation}} {{name}}!\"></pre>\n 12197         </div>\n 12198       </doc:source>\n .....\n 12201           expect(using('.doc-example-live').binding('salutation')).\n 12202             toBe('Hello');\n 12203:          expect(using('.doc-example-live').binding('name')).\n 12204             toBe('World');\n 12205           using('.doc-example-live').input('salutation').enter('Greetings');\n 12206:          using('.doc-example-live').input('name').enter('user');\n 12207           expect(using('.doc-example-live').binding('salutation')).\n 12208             toBe('Greetings');\n 12209:          expect(using('.doc-example-live').binding('name')).\n 12210             toBe('user');\n 12211         });\n .....\n 12227  /**\n 12228   * @ngdoc directive\n 12229:  * @name ng.directive:ngBindHtmlUnsafe\n 12230   *\n 12231   * @description\n .....\n 12249  }];\n 12250  \n 12251: function classDirective(name, selector) {\n 12252:   name = 'ngClass' + name;\n 12253    return ngDirective(function(scope, element, attr) {\n 12254  \n 12255:     scope.$watch(attr[name], ngClassWatchAction, true);\n 12256  \n 12257      attr.$observe('class', function(value) {\n 12258:       var ngClass = scope.$eval(attr[name]);\n 12259        ngClassWatchAction(ngClass, ngClass);\n 12260      });\n 12261  \n 12262  \n 12263:     if (name !== 'ngClass') {\n 12264        scope.$watch('$index', function($index, old$index) {\n 12265          var mod = $index % 2;\n 12266          if (mod !== old$index % 2) {\n 12267            if (mod == selector) {\n 12268:             addClass(scope.$eval(attr[name]));\n 12269            } else {\n 12270:             removeClass(scope.$eval(attr[name]));\n 12271            }\n 12272          }\n .....\n 12306  /**\n 12307   * @ngdoc directive\n 12308:  * @name ng.directive:ngClass\n 12309   *\n 12310   * @description\n .....\n 12320   * @param {expression} ngClass {@link guide/expression Expression} to eval. The result\n 12321   *   of the evaluation can be a string representing space delimited class\n 12322:  *   names, an array, or a map of class names to boolean values.\n 12323   *\n 12324   * @example\n 12325     <example>\n 12326:      <file name=\"index.html\">\n 12327        <input type=\"button\" value=\"set\" ng-click=\"myVar='my-class'\">\n 12328        <input type=\"button\" value=\"clear\" ng-click=\"myVar=''\">\n .....\n 12330        <span ng-class=\"myVar\">Sample Text</span>\n 12331       </file>\n 12332:      <file name=\"style.css\">\n 12333         .my-class {\n 12334           color: red;\n 12335         }\n 12336       </file>\n 12337:      <file name=\"scenario.js\">\n 12338         it('should check ng-class', function() {\n 12339:          expect(element('.doc-example-live span').prop('className')).not().\n 12340             toMatch(/my-class/);\n 12341  \n 12342           using('.doc-example-live').element(':button:first').click();\n 12343  \n 12344:          expect(element('.doc-example-live span').prop('className')).\n 12345             toMatch(/my-class/);\n 12346  \n 12347           using('.doc-example-live').element(':button:last').click();\n 12348  \n 12349:          expect(element('.doc-example-live span').prop('className')).not().\n 12350             toMatch(/my-class/);\n 12351         });\n .....\n 12357  /**\n 12358   * @ngdoc directive\n 12359:  * @name ng.directive:ngClassOdd\n 12360   *\n 12361   * @description\n .....\n 12369   * @element ANY\n 12370   * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result\n 12371:  *   of the evaluation can be a string representing space delimited class names or an array.\n 12372   *\n 12373   * @example\n 12374     <example>\n 12375:      <file name=\"index.html\">\n 12376:         <ol ng-init=\"names=['John', 'Mary', 'Cate', 'Suz']\">\n 12377:           <li ng-repeat=\"name in names\">\n 12378             <span ng-class-odd=\"'odd'\" ng-class-even=\"'even'\">\n 12379:              {{name}}\n 12380             </span>\n 12381            </li>\n 12382          </ol>\n 12383       </file>\n 12384:      <file name=\"style.css\">\n 12385         .odd {\n 12386           color: red;\n .....\n 12390         }\n 12391       </file>\n 12392:      <file name=\"scenario.js\">\n 12393         it('should check ng-class-odd and ng-class-even', function() {\n 12394:          expect(element('.doc-example-live li:first span').prop('className')).\n 12395             toMatch(/odd/);\n 12396:          expect(element('.doc-example-live li:last span').prop('className')).\n 12397             toMatch(/even/);\n 12398         });\n .....\n 12404  /**\n 12405   * @ngdoc directive\n 12406:  * @name ng.directive:ngClassEven\n 12407   *\n 12408   * @description\n .....\n 12416   * @element ANY\n 12417   * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The\n 12418:  *   result of the evaluation can be a string representing space delimited class names or an array.\n 12419   *\n 12420   * @example\n 12421     <example>\n 12422:      <file name=\"index.html\">\n 12423:         <ol ng-init=\"names=['John', 'Mary', 'Cate', 'Suz']\">\n 12424:           <li ng-repeat=\"name in names\">\n 12425             <span ng-class-odd=\"'odd'\" ng-class-even=\"'even'\">\n 12426:              {{name}} &nbsp; &nbsp; &nbsp;\n 12427             </span>\n 12428            </li>\n 12429          </ol>\n 12430       </file>\n 12431:      <file name=\"style.css\">\n 12432         .odd {\n 12433           color: red;\n .....\n 12437         }\n 12438       </file>\n 12439:      <file name=\"scenario.js\">\n 12440         it('should check ng-class-odd and ng-class-even', function() {\n 12441:          expect(element('.doc-example-live li:first span').prop('className')).\n 12442             toMatch(/odd/);\n 12443:          expect(element('.doc-example-live li:last span').prop('className')).\n 12444             toMatch(/even/);\n 12445         });\n .....\n 12451  /**\n 12452   * @ngdoc directive\n 12453:  * @name ng.directive:ngCloak\n 12454   *\n 12455   * @description\n .....\n 12511  /**\n 12512   * @ngdoc directive\n 12513:  * @name ng.directive:ngController\n 12514   *\n 12515   * @description\n .....\n 12529   * @element ANY\n 12530   * @scope\n 12531:  * @param {expression} ngController Name of a globally accessible constructor function or an\n 12532   *     {@link guide/expression expression} that on the current scope evaluates to a\n 12533   *     constructor function.\n .....\n 12544        <script>\n 12545          function SettingsController($scope) {\n 12546:           $scope.name = \"John Smith\";\n 12547            $scope.contacts = [\n 12548              {type:'phone', value:'408 555 1212'},\n .....\n 12550  \n 12551            $scope.greet = function() {\n 12552:            alert(this.name);\n 12553            };\n 12554  \n 12555            $scope.addContact = function() {\n 12556:            this.contacts.push({type:'email', value:'yourname@example.org'});\n 12557            };\n 12558  \n .....\n 12569        </script>\n 12570        <div ng-controller=\"SettingsController\">\n 12571:         Name: <input type=\"text\" ng-model=\"name\"/>\n 12572          [ <a href=\"\" ng-click=\"greet()\">greet</a> ]<br/>\n 12573          Contact:\n .....\n 12599           element('.doc-example-live li:last a:contains(\"add\")').click();\n 12600           expect(element('.doc-example-live li:nth-child(3) input').val())\n 12601:            .toBe('yourname@example.org');\n 12602         });\n 12603       </doc:scenario>\n .....\n 12613  /**\n 12614   * @ngdoc directive\n 12615:  * @name ng.directive:ngCsp\n 12616   * @priority 1000\n 12617   *\n .....\n 12639  /**\n 12640   * @ngdoc directive\n 12641:  * @name ng.directive:ngClick\n 12642   *\n 12643   * @description\n .....\n 12675  forEach(\n 12676    'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave'.split(' '),\n 12677:   function(name) {\n 12678:     var directiveName = directiveNormalize('ng-' + name);\n 12679:     ngEventDirectives[directiveName] = ['$parse', function($parse) {\n 12680        return function(scope, element, attr) {\n 12681:         var fn = $parse(attr[directiveName]);\n 12682:         element.bind(lowercase(name), function(event) {\n 12683            scope.$apply(function() {\n 12684              fn(scope, {$event:event});\n .....\n 12692  /**\n 12693   * @ngdoc directive\n 12694:  * @name ng.directive:ngDblclick\n 12695   *\n 12696   * @description\n .....\n 12708  /**\n 12709   * @ngdoc directive\n 12710:  * @name ng.directive:ngMousedown\n 12711   *\n 12712   * @description\n .....\n 12724  /**\n 12725   * @ngdoc directive\n 12726:  * @name ng.directive:ngMouseup\n 12727   *\n 12728   * @description\n .....\n 12739  /**\n 12740   * @ngdoc directive\n 12741:  * @name ng.directive:ngMouseover\n 12742   *\n 12743   * @description\n .....\n 12755  /**\n 12756   * @ngdoc directive\n 12757:  * @name ng.directive:ngMouseenter\n 12758   *\n 12759   * @description\n .....\n 12771  /**\n 12772   * @ngdoc directive\n 12773:  * @name ng.directive:ngMouseleave\n 12774   *\n 12775   * @description\n .....\n 12787  /**\n 12788   * @ngdoc directive\n 12789:  * @name ng.directive:ngMousemove\n 12790   *\n 12791   * @description\n .....\n 12803  /**\n 12804   * @ngdoc directive\n 12805:  * @name ng.directive:ngSubmit\n 12806   *\n 12807   * @description\n .....\n 12831        <form ng-submit=\"submit()\" ng-controller=\"Ctrl\">\n 12832          Enter text and hit enter:\n 12833:         <input type=\"text\" ng-model=\"text\" name=\"text\" />\n 12834          <input type=\"submit\" id=\"submit\" value=\"Submit\" />\n 12835          <pre>list={{list}}</pre>\n .....\n 12860  /**\n 12861   * @ngdoc directive\n 12862:  * @name ng.directive:ngInclude\n 12863   * @restrict ECA\n 12864   *\n .....\n 12885   * @example\n 12886    <example>\n 12887:     <file name=\"index.html\">\n 12888       <div ng-controller=\"Ctrl\">\n 12889:        <select ng-model=\"template\" ng-options=\"t.name for t in templates\">\n 12890          <option value=\"\">(blank)</option>\n 12891         </select>\n .....\n 12895       </div>\n 12896      </file>\n 12897:     <file name=\"script.js\">\n 12898        function Ctrl($scope) {\n 12899          $scope.templates =\n 12900:           [ { name: 'template1.html', url: 'template1.html'}\n 12901:           , { name: 'template2.html', url: 'template2.html'} ];\n 12902          $scope.template = $scope.templates[0];\n 12903        }\n 12904       </file>\n 12905:     <file name=\"template1.html\">\n 12906        Content of template1.html\n 12907      </file>\n 12908:     <file name=\"template2.html\">\n 12909        Content of template2.html\n 12910      </file>\n 12911:     <file name=\"scenario.js\">\n 12912        it('should load template1.html', function() {\n 12913         expect(element('.doc-example-live [ng-include]').text()).\n .....\n 12930  /**\n 12931   * @ngdoc event\n 12932:  * @name ng.directive:ngInclude#$includeContentLoaded\n 12933   * @eventOf ng.directive:ngInclude\n 12934   * @eventType emit on the current ngInclude scope\n .....\n 12990  /**\n 12991   * @ngdoc directive\n 12992:  * @name ng.directive:ngInit\n 12993   *\n 12994   * @description\n .....\n 13026  /**\n 13027   * @ngdoc directive\n 13028:  * @name ng.directive:ngNonBindable\n 13029   * @priority 1000\n 13030   *\n .....\n 13058  /**\n 13059   * @ngdoc directive\n 13060:  * @name ng.directive:ngPluralize\n 13061   * @restrict EA\n 13062   *\n .....\n 13212          });\n 13213  \n 13214:         it('should show data-binded names', function() {\n 13215            using('.doc-example-live').input('personCount').enter('4');\n 13216            expect(element('.doc-example-live ng-pluralize:last').text()).\n .....\n 13264  /**\n 13265   * @ngdoc directive\n 13266:  * @name ng.directive:ngRepeat\n 13267   *\n 13268   * @description\n .....\n 13293   *     and `expression` is the scope expression giving the collection to enumerate.\n 13294   *\n 13295:  *     For example: `(name, age) in {'adam':10, 'amalie':12}`.\n 13296   *\n 13297   * @example\n 13298:  * This example initializes the scope to a list of names and\n 13299   * then uses `ngRepeat` to display every person:\n 13300      <doc:example>\n 13301        <doc:source>\n 13302:         <div ng-init=\"friends = [{name:'John', age:25}, {name:'Mary', age:28}]\">\n 13303            I have {{friends.length}} friends. They are:\n 13304            <ul>\n 13305              <li ng-repeat=\"friend in friends\">\n 13306:               [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.\n 13307              </li>\n 13308            </ul>\n .....\n 13447  /**\n 13448   * @ngdoc directive\n 13449:  * @name ng.directive:ngShow\n 13450   *\n 13451   * @description\n .....\n 13487  /**\n 13488   * @ngdoc directive\n 13489:  * @name ng.directive:ngHide\n 13490   *\n 13491   * @description\n .....\n 13526  /**\n 13527   * @ngdoc directive\n 13528:  * @name ng.directive:ngStyle\n 13529   *\n 13530   * @description\n .....\n 13533   * @element ANY\n 13534   * @param {expression} ngStyle {@link guide/expression Expression} which evals to an\n 13535:  *      object whose keys are CSS style names and values are corresponding values for those CSS\n 13536   *      keys.\n 13537   *\n 13538   * @example\n 13539     <example>\n 13540:      <file name=\"index.html\">\n 13541          <input type=\"button\" value=\"set\" ng-click=\"myStyle={color:'red'}\">\n 13542          <input type=\"button\" value=\"clear\" ng-click=\"myStyle={}\">\n .....\n 13545          <pre>myStyle={{myStyle}}</pre>\n 13546       </file>\n 13547:      <file name=\"style.css\">\n 13548         span {\n 13549           color: black;\n 13550         }\n 13551       </file>\n 13552:      <file name=\"scenario.js\">\n 13553         it('should check ng-style', function() {\n 13554           expect(element('.doc-example-live span').css('color')).toBe('rgb(0, 0, 0)');\n .....\n 13572  /**\n 13573   * @ngdoc directive\n 13574:  * @name ng.directive:ngSwitch\n 13575   * @restrict EA\n 13576   *\n .....\n 13683  /**\n 13684   * @ngdoc directive\n 13685:  * @name ng.directive:ngTransclude\n 13686   *\n 13687   * @description\n .....\n 13740  /**\n 13741   * @ngdoc directive\n 13742:  * @name ng.directive:ngView\n 13743   * @restrict ECA\n 13744   *\n .....\n 13753   * @example\n 13754      <example module=\"ngView\">\n 13755:       <file name=\"index.html\">\n 13756          <div ng-controller=\"MainCntl\">\n 13757            Choose:\n .....\n 13768            <pre>$route.current.template = {{$route.current.template}}</pre>\n 13769            <pre>$route.current.params = {{$route.current.params}}</pre>\n 13770:           <pre>$route.current.scope.name = {{$route.current.scope.name}}</pre>\n 13771            <pre>$routeParams = {{$routeParams}}</pre>\n 13772          </div>\n 13773        </file>\n 13774  \n 13775:       <file name=\"book.html\">\n 13776:         controller: {{name}}<br />\n 13777          Book Id: {{params.bookId}}<br />\n 13778        </file>\n 13779  \n 13780:       <file name=\"chapter.html\">\n 13781:         controller: {{name}}<br />\n 13782          Book Id: {{params.bookId}}<br />\n 13783          Chapter Id: {{params.chapterId}}\n 13784        </file>\n 13785  \n 13786:       <file name=\"script.js\">\n 13787          angular.module('ngView', [], function($routeProvider, $locationProvider) {\n 13788            $routeProvider.when('/Book/:bookId', {\n .....\n 13806  \n 13807          function BookCntl($scope, $routeParams) {\n 13808:           $scope.name = \"BookCntl\";\n 13809            $scope.params = $routeParams;\n 13810          }\n 13811  \n 13812          function ChapterCntl($scope, $routeParams) {\n 13813:           $scope.name = \"ChapterCntl\";\n 13814            $scope.params = $routeParams;\n 13815          }\n 13816        </file>\n 13817  \n 13818:       <file name=\"scenario.js\">\n 13819          it('should load and compile correct template', function() {\n 13820            element('a:contains(\"Moby: Ch1\")').click();\n .....\n 13836  /**\n 13837   * @ngdoc event\n 13838:  * @name ng.directive:ngView#$viewContentLoaded\n 13839   * @eventOf ng.directive:ngView\n 13840   * @eventType emit on the current ngView scope\n .....\n 13904  /**\n 13905   * @ngdoc directive\n 13906:  * @name ng.directive:script\n 13907   *\n 13908   * @description\n .....\n 13949  /**\n 13950   * @ngdoc directive\n 13951:  * @name ng.directive:select\n 13952   * @restrict E\n 13953   *\n .....\n 13974   * be bound to string values only.\n 13975   *\n 13976:  * @param {string} name assignable expression to data-bind to.\n 13977   * @param {string=} required The control is considered valid only if value is entered.\n 13978   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n .....\n 13998   *   * `value`: local variable which will refer to each item in the `array` or each property value\n 13999   *      of `object` during iteration.\n 14000:  *   * `key`: local variable which will refer to a property name in `object` during iteration.\n 14001   *   * `label`: The result of this expression will be the label for `<option>` element. The\n 14002:  *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).\n 14003   *   * `select`: The result of this expression will be bound to the model of the parent `<select>`\n 14004   *      element. If not specified, `select` expression will default to `value`.\n .....\n 14012          function MyCntrl($scope) {\n 14013            $scope.colors = [\n 14014:             {name:'black', shade:'dark'},\n 14015:             {name:'white', shade:'light'},\n 14016:             {name:'red', shade:'dark'},\n 14017:             {name:'blue', shade:'dark'},\n 14018:             {name:'yellow', shade:'light'}\n 14019            ];\n 14020            $scope.color = $scope.colors[2]; // red\n .....\n 14024            <ul>\n 14025              <li ng-repeat=\"color in colors\">\n 14026:               Name: <input ng-model=\"color.name\">\n 14027                [<a href ng-click=\"colors.splice($index, 1)\">X</a>]\n 14028              </li>\n .....\n 14033            <hr/>\n 14034            Color (null not allowed):\n 14035:           <select ng-model=\"color\" ng-options=\"c.name for c in colors\"></select><br>\n 14036  \n 14037            Color (null allowed):\n 14038            <span  class=\"nullable\">\n 14039:             <select ng-model=\"color\" ng-options=\"c.name for c in colors\">\n 14040                <option value=\"\">-- chose color --</option>\n 14041              </select>\n .....\n 14043  \n 14044            Color grouped by shade:\n 14045:           <select ng-model=\"color\" ng-options=\"c.name group by c.shade for c in colors\">\n 14046            </select><br/>\n 14047  \n 14048  \n 14049:           Select <a href ng-click=\"color={name:'not in list'}\">bogus</a>.<br>\n 14050            <hr/>\n 14051            Currently selected: {{ {selected_color:color}  }}\n 14052            <div style=\"border:solid 1px black; height:20px\"\n 14053:                ng-style=\"{'background-color':color.name}\">\n 14054            </div>\n 14055          </div>\n .....\n 14249  \n 14250          var displayFn = $parse(match[2] || match[1]),\n 14251:             valueName = match[4] || match[6],\n 14252:             keyName = match[5],\n 14253              groupByFn = $parse(match[3] || ''),\n 14254:             valueFn = $parse(match[2] ? match[1] : valueName),\n 14255              valuesFn = $parse(match[7]),\n 14256              // This is an array of array of existing option groups in DOM. We try to reuse these if possible\n .....\n 14293                    if ((optionElement = optionGroup[index].element)[0].selected) {\n 14294                      key = optionElement.val();\n 14295:                     if (keyName) locals[keyName] = key;\n 14296:                     locals[valueName] = collection[key];\n 14297                      value.push(valueFn(scope, locals));\n 14298                    }\n .....\n 14306                  value = null;\n 14307                } else {\n 14308:                 locals[valueName] = collection[key];\n 14309:                 if (keyName) locals[keyName] = key;\n 14310                  value = valueFn(scope, locals);\n 14311                }\n .....\n 14322          function render() {\n 14323            var optionGroups = {'':[]}, // Temporary location for the option groups before we render them\n 14324:               optionGroupNames = [''],\n 14325:               optionGroupName,\n 14326                optionGroup,\n 14327                option,\n .....\n 14329                modelValue = ctrl.$modelValue,\n 14330                values = valuesFn(scope) || [],\n 14331:               keys = keyName ? sortedKeys(values) : values,\n 14332                groupLength, length,\n 14333                groupIndex, index,\n .....\n 14349            // We now build up the list of options we need (we merge later)\n 14350            for (index = 0; length = keys.length, index < length; index++) {\n 14351:                locals[valueName] = values[keyName ? locals[keyName]=keys[index]:index];\n 14352:                optionGroupName = groupByFn(scope, locals) || '';\n 14353:             if (!(optionGroup = optionGroups[optionGroupName])) {\n 14354:               optionGroup = optionGroups[optionGroupName] = [];\n 14355:               optionGroupNames.push(optionGroupName);\n 14356              }\n 14357              if (multiple) {\n .....\n 14364              label = label === undefined ? '' : label; // doing displayFn(scope, locals) || '' overwrites zero values\n 14365              optionGroup.push({\n 14366:               id: keyName ? keys[index] : index,   // either the index into array or key from object\n 14367                label: label,\n 14368                selected: selected                   // determine if we should be selected\n .....\n 14375  \n 14376            // Now we need to update the list of DOM nodes to match the optionGroups we computed above\n 14377:           for (groupIndex = 0, groupLength = optionGroupNames.length;\n 14378                 groupIndex < groupLength;\n 14379                 groupIndex++) {\n 14380:             // current option group name or '' if no group\n 14381:             optionGroupName = optionGroupNames[groupIndex];\n 14382  \n 14383              // list of options for that group. (first item has the parent)\n 14384:             optionGroup = optionGroups[optionGroupName];\n 14385  \n 14386              if (optionGroupsCache.length <= groupIndex) {\n 14387                // we need to grow the optionGroups\n 14388                existingParent = {\n 14389:                 element: optGroupTemplate.clone().attr('label', optionGroupName),\n 14390                  label: optionGroup.label\n 14391                };\n .....\n 14398  \n 14399                // update the OPTGROUP label if not the same.\n 14400:               if (existingParent.label != optionGroupName) {\n 14401:                 existingParent.element.attr('label', existingParent.label = optionGroupName);\n 14402                }\n 14403              }\n .....\n 14483  \n 14484        return function (scope, element, attr) {\n 14485:         var selectCtrlName = '$selectController',\n 14486              parent = element.parent(),\n 14487:             selectCtrl = parent.data(selectCtrlName) ||\n 14488:               parent.parent().data(selectCtrlName); // in case we are in optgroup\n 14489  \n 14490          if (selectCtrl && selectCtrl.databound) {\n\n/Users/pezillionaire/GitHub/simpllist/public/js/lib/angular/angular.min.js:\n    4   License: MIT\n    5  */\n    6: (function(U,ca,p){'use strict';function m(b,a,c){var d;if(b)if(N(b))for(d in b)d!=\"prototype\"&&d!=\"length\"&&d!=\"name\"&&b.hasOwnProperty(d)&&a.call(c,b[d],d);else if(b.forEach&&b.forEach!==m)b.forEach(a,c);else if(L(b)&&wa(b.length))for(d=0;d<b.length;d++)a.call(c,b[d],d);else for(d in b)b.hasOwnProperty(d)&&a.call(c,b[d],d);return b}function lb(b){var a=[],c;for(c in b)b.hasOwnProperty(c)&&a.push(c);return a.sort()}function ec(b,a,c){for(var d=lb(b),e=0;e<d.length;e++)a.call(c,b[d[e]],d[e]);return d}\n    7  function mb(b){return function(a,c){b(c,a)}}function xa(){for(var b=Z.length,a;b;){b--;a=Z[b].charCodeAt(0);if(a==57)return Z[b]=\"A\",Z.join(\"\");if(a==90)Z[b]=\"0\";else return Z[b]=String.fromCharCode(a+1),Z.join(\"\")}Z.unshift(\"0\");return Z.join(\"\")}function x(b){m(arguments,function(a){a!==b&&m(a,function(a,d){b[d]=a})});return b}function G(b){return parseInt(b,10)}function ya(b,a){return x(new (x(function(){},{prototype:b})),a)}function D(){}function ma(b){return b}function I(b){return function(){return b}}\n    8  function t(b){return typeof b==\"undefined\"}function v(b){return typeof b!=\"undefined\"}function L(b){return b!=null&&typeof b==\"object\"}function F(b){return typeof b==\"string\"}function wa(b){return typeof b==\"number\"}function na(b){return Sa.apply(b)==\"[object Date]\"}function J(b){return Sa.apply(b)==\"[object Array]\"}function N(b){return typeof b==\"function\"}function oa(b){return b&&b.document&&b.location&&b.alert&&b.setInterval}function R(b){return F(b)?b.replace(/^\\s*/,\"\").replace(/\\s*$/,\"\"):b}function fc(b){return b&&\n    9: (b.nodeName||b.bind&&b.find)}function Ta(b,a,c){var d=[];m(b,function(b,g,i){d.push(a.call(c,b,g,i))});return d}function gc(b,a){var c=0,d;if(J(b)||F(b))return b.length;else if(L(b))for(d in b)(!a||b.hasOwnProperty(d))&&c++;return c}function za(b,a){if(b.indexOf)return b.indexOf(a);for(var c=0;c<b.length;c++)if(a===b[c])return c;return-1}function Ua(b,a){var c=za(b,a);c>=0&&b.splice(c,1);return a}function V(b,a){if(oa(b)||b&&b.$evalAsync&&b.$watch)throw B(\"Can't copy Window or Scope\");if(a){if(b===\n   10  a)throw B(\"Can't copy equivalent objects or arrays\");if(J(b)){for(;a.length;)a.pop();for(var c=0;c<b.length;c++)a.push(V(b[c]))}else for(c in m(a,function(b,c){delete a[c]}),b)a[c]=V(b[c])}else(a=b)&&(J(b)?a=V(b,[]):na(b)?a=new Date(b.getTime()):L(b)&&(a=V(b,{})));return a}function hc(b,a){var a=a||{},c;for(c in b)b.hasOwnProperty(c)&&c.substr(0,2)!==\"$$\"&&(a[c]=b[c]);return a}function ha(b,a){if(b===a)return!0;if(b===null||a===null)return!1;if(b!==b&&a!==a)return!0;var c=typeof b,d;if(c==typeof a&&\n   11  c==\"object\")if(J(b)){if((c=b.length)==a.length){for(d=0;d<c;d++)if(!ha(b[d],a[d]))return!1;return!0}}else if(na(b))return na(a)&&b.getTime()==a.getTime();else{if(b&&b.$evalAsync&&b.$watch||a&&a.$evalAsync&&a.$watch||oa(b)||oa(a))return!1;c={};for(d in b){if(d.charAt(0)!==\"$\"&&!N(b[d])&&!ha(b[d],a[d]))return!1;c[d]=!0}for(d in a)if(!c[d]&&d.charAt(0)!==\"$\"&&!N(a[d]))return!1;return!0}return!1}function Va(b,a){var c=arguments.length>2?ia.call(arguments,2):[];return N(a)&&!(a instanceof RegExp)?c.length?\n   ..\n   13  return b}function pa(b){b=u(b).clone();try{b.html(\"\")}catch(a){}return u(\"<div>\").append(b).html().match(/^(<[^>]+>)/)[1].replace(/^<([\\w\\-]+)/,function(a,b){return\"<\"+E(b)})}function Xa(b){var a={},c,d;m((b||\"\").split(\"&\"),function(b){b&&(c=b.split(\"=\"),d=decodeURIComponent(c[0]),a[d]=v(c[1])?decodeURIComponent(c[1]):!0)});return a}function ob(b){var a=[];m(b,function(b,d){a.push(Ya(d,!0)+(b===!0?\"\":\"=\"+Ya(b,!0)))});return a.length?a.join(\"&\"):\"\"}function Za(b){return Ya(b,!0).replace(/%26/gi,\"&\").replace(/%3D/gi,\n   14  \"=\").replace(/%2B/gi,\"+\")}function Ya(b,a){return encodeURIComponent(b).replace(/%40/gi,\"@\").replace(/%3A/gi,\":\").replace(/%24/g,\"$\").replace(/%2C/gi,\",\").replace(a?null:/%20/g,\"+\")}function jc(b,a){function c(a){a&&d.push(a)}var d=[b],e,g,i=[\"ng:app\",\"ng-app\",\"x-ng-app\",\"data-ng-app\"],f=/\\sng[:\\-]app(:\\s*([\\w\\d_]+);?)?\\s/;m(i,function(a){i[a]=!0;c(ca.getElementById(a));a=a.replace(\":\",\"\\\\:\");b.querySelectorAll&&(m(b.querySelectorAll(\".\"+a),c),m(b.querySelectorAll(\".\"+a+\"\\\\:\"),c),m(b.querySelectorAll(\"[\"+\n   15: a+\"]\"),c))});m(d,function(a){if(!e){var b=f.exec(\" \"+a.className+\" \");b?(e=a,g=(b[2]||\"\").replace(/\\s+/g,\",\")):m(a.attributes,function(b){if(!e&&i[b.name])e=a,g=b.value})}});e&&a(e,g?[g]:[])}function pb(b,a){b=u(b);a=a||[];a.unshift([\"$provide\",function(a){a.value(\"$rootElement\",b)}]);a.unshift(\"ng\");var c=qb(a);c.invoke([\"$rootScope\",\"$rootElement\",\"$compile\",\"$injector\",function(a,b,c,i){a.$apply(function(){b.data(\"$injector\",i);c(b)(a)})}]);return c}function $a(b,a){a=a||\"_\";return b.replace(kc,\n   16: function(b,d){return(d?a:\"\")+b.toLowerCase()})}function qa(b,a,c){if(!b)throw new B(\"Argument '\"+(a||\"?\")+\"' is \"+(c||\"required\"));return b}function ra(b,a,c){c&&J(b)&&(b=b[b.length-1]);qa(N(b),a,\"not a function, got \"+(b&&typeof b==\"object\"?b.constructor.name||\"Object\":typeof b));return b}function lc(b){function a(a,b,e){return a[b]||(a[b]=e())}return a(a(b,\"angular\",Object),\"module\",function(){var b={};return function(d,e,g){e&&b.hasOwnProperty(d)&&(b[d]=null);return a(b,d,function(){function a(c,\n   17: d,e){return function(){b[e||\"push\"]([c,d,arguments]);return j}}if(!e)throw B(\"No module: \"+d);var b=[],c=[],k=a(\"$injector\",\"invoke\"),j={_invokeQueue:b,_runBlocks:c,requires:e,name:d,provider:a(\"$provide\",\"provider\"),factory:a(\"$provide\",\"factory\"),service:a(\"$provide\",\"service\"),value:a(\"$provide\",\"value\"),constant:a(\"$provide\",\"constant\",\"unshift\"),filter:a(\"$filterProvider\",\"register\"),controller:a(\"$controllerProvider\",\"register\"),directive:a(\"$compileProvider\",\"directive\"),config:k,run:function(a){c.push(a);\n   18  return this}};g&&k(g);return j})}})}function rb(b){return b.replace(mc,function(a,b,d,e){return e?d.toUpperCase():d}).replace(nc,\"Moz$1\")}function ab(b,a){function c(){var e;for(var b=[this],c=a,i,f,h,k,j,l;b.length;){i=b.shift();f=0;for(h=i.length;f<h;f++){k=u(i[f]);c?k.triggerHandler(\"$destroy\"):c=!c;j=0;for(e=(l=k.children()).length,k=e;j<k;j++)b.push(ja(l[j]))}}return d.apply(this,arguments)}var d=ja.fn[b],d=d.$original||d;c.$original=d;ja.fn[b]=c}function Q(b){if(b instanceof Q)return b;if(!(this instanceof\n   19  Q)){if(F(b)&&b.charAt(0)!=\"<\")throw B(\"selectors not implemented\");return new Q(b)}if(F(b)){var a=ca.createElement(\"div\");a.innerHTML=\"<div>&#160;</div>\"+b;a.removeChild(a.firstChild);bb(this,a.childNodes);this.remove()}else bb(this,b)}function cb(b){return b.cloneNode(!0)}function sa(b){sb(b);for(var a=0,b=b.childNodes||[];a<b.length;a++)sa(b[a])}function tb(b,a,c){var d=$(b,\"events\");$(b,\"handle\")&&(t(a)?m(d,function(a,c){db(b,c,a);delete d[c]}):t(c)?(db(b,a,d[a]),delete d[a]):Ua(d[a],c))}function sb(b){var a=\n   20: b[Aa],c=Ba[a];c&&(c.handle&&(c.events.$destroy&&c.handle({},\"$destroy\"),tb(b)),delete Ba[a],b[Aa]=p)}function $(b,a,c){var d=b[Aa],d=Ba[d||-1];if(v(c))d||(b[Aa]=d=++oc,d=Ba[d]={}),d[a]=c;else return d&&d[a]}function ub(b,a,c){var d=$(b,\"data\"),e=v(c),g=!e&&v(a),i=g&&!L(a);!d&&!i&&$(b,\"data\",d={});if(e)d[a]=c;else if(g)if(i)return d&&d[a];else x(d,a);else return d}function Ca(b,a){return(\" \"+b.className+\" \").replace(/[\\n\\t]/g,\" \").indexOf(\" \"+a+\" \")>-1}function vb(b,a){a&&m(a.split(\" \"),function(a){b.className=\n   21: R((\" \"+b.className+\" \").replace(/[\\n\\t]/g,\" \").replace(\" \"+R(a)+\" \",\" \"))})}function wb(b,a){a&&m(a.split(\" \"),function(a){if(!Ca(b,a))b.className=R(b.className+\" \"+R(a))})}function bb(b,a){if(a)for(var a=!a.nodeName&&v(a.length)&&!oa(a)?a:[a],c=0;c<a.length;c++)b.push(a[c])}function xb(b,a){return Da(b,\"$\"+(a||\"ngController\")+\"Controller\")}function Da(b,a,c){b=u(b);for(b[0].nodeType==9&&(b=b.find(\"html\"));b.length;){if(c=b.data(a))return c;b=b.parent()}}function yb(b,a){var c=Ea[a.toLowerCase()];\n   22: return c&&zb[b.nodeName]&&c}function pc(b,a){var c=function(c,e){if(!c.preventDefault)c.preventDefault=function(){c.returnValue=!1};if(!c.stopPropagation)c.stopPropagation=function(){c.cancelBubble=!0};if(!c.target)c.target=c.srcElement||ca;if(t(c.defaultPrevented)){var g=c.preventDefault;c.preventDefault=function(){c.defaultPrevented=!0;g.call(c)};c.defaultPrevented=!1}c.isDefaultPrevented=function(){return c.defaultPrevented};m(a[e||c.type],function(a){a.call(b,c)});aa<=8?(c.preventDefault=null,\n   23  c.stopPropagation=null,c.isDefaultPrevented=null):(delete c.preventDefault,delete c.stopPropagation,delete c.isDefaultPrevented)};c.elem=b;return c}function ga(b){var a=typeof b,c;if(a==\"object\"&&b!==null)if(typeof(c=b.$$hashKey)==\"function\")c=b.$$hashKey();else{if(c===p)c=b.$$hashKey=xa()}else c=b;return a+\":\"+c}function Fa(b){m(b,this.put,this)}function eb(){}function Ab(b){var a,c;if(typeof b==\"function\"){if(!(a=b.$inject))a=[],c=b.toString().replace(qc,\"\"),c=c.match(rc),m(c[1].split(sc),function(b){b.replace(tc,\n   24  function(b,c,d){a.push(d)})}),b.$inject=a}else J(b)?(c=b.length-1,ra(b[c],\"fn\"),a=b.slice(0,c)):ra(b,\"fn\",!0);return a}function qb(b){function a(a){return function(b,c){if(L(b))m(b,mb(a));else return a(b,c)}}function c(a,b){N(b)&&(b=l.instantiate(b));if(!b.$get)throw B(\"Provider \"+a+\" must define $get factory method.\");return j[a+f]=b}function d(a,b){return c(a,{$get:b})}function e(a){var b=[];m(a,function(a){if(!k.get(a))if(k.put(a,!0),F(a)){var c=ta(a);b=b.concat(e(c.requires)).concat(c._runBlocks);\n   25: try{for(var d=c._invokeQueue,c=0,f=d.length;c<f;c++){var h=d[c],g=h[0]==\"$injector\"?l:l.get(h[0]);g[h[1]].apply(g,h[2])}}catch(n){throw n.message&&(n.message+=\" from \"+a),n;}}else if(N(a))try{b.push(l.invoke(a))}catch(i){throw i.message&&(i.message+=\" from \"+a),i;}else if(J(a))try{b.push(l.invoke(a))}catch(j){throw j.message&&(j.message+=\" from \"+String(a[a.length-1])),j;}else ra(a,\"module\")});return b}function g(a,b){function c(d){if(typeof d!==\"string\")throw B(\"Service name expected\");if(a.hasOwnProperty(d)){if(a[d]===\n   26  i)throw B(\"Circular dependency: \"+h.join(\" <- \"));return a[d]}else try{return h.unshift(d),a[d]=i,a[d]=b(d)}finally{h.shift()}}function d(a,b,e){var f=[],k=Ab(a),g,n,i;n=0;for(g=k.length;n<g;n++)i=k[n],f.push(e&&e.hasOwnProperty(i)?e[i]:c(i,h));a.$inject||(a=a[g]);switch(b?-1:f.length){case 0:return a();case 1:return a(f[0]);case 2:return a(f[0],f[1]);case 3:return a(f[0],f[1],f[2]);case 4:return a(f[0],f[1],f[2],f[3]);case 5:return a(f[0],f[1],f[2],f[3],f[4]);case 6:return a(f[0],f[1],f[2],f[3],\n   27  f[4],f[5]);case 7:return a(f[0],f[1],f[2],f[3],f[4],f[5],f[6]);case 8:return a(f[0],f[1],f[2],f[3],f[4],f[5],f[6],f[7]);case 9:return a(f[0],f[1],f[2],f[3],f[4],f[5],f[6],f[7],f[8]);case 10:return a(f[0],f[1],f[2],f[3],f[4],f[5],f[6],f[7],f[8],f[9]);default:return a.apply(b,f)}}return{invoke:d,instantiate:function(a,b){var c=function(){},e;c.prototype=(J(a)?a[a.length-1]:a).prototype;c=new c;e=d(a,c,b);return L(e)?e:c},get:c,annotate:Ab}}var i={},f=\"Provider\",h=[],k=new Fa,j={$provide:{provider:a(c),\n   28  factory:a(d),service:a(function(a,b){return d(a,[\"$injector\",function(a){return a.instantiate(b)}])}),value:a(function(a,b){return d(a,I(b))}),constant:a(function(a,b){j[a]=b;o[a]=b}),decorator:function(a,b){var c=l.get(a+f),d=c.$get;c.$get=function(){var a=r.invoke(d,c);return r.invoke(b,null,{$delegate:a})}}}},l=g(j,function(){throw B(\"Unknown provider: \"+h.join(\" <- \"));}),o={},r=o.$injector=g(o,function(a){a=l.get(a+f);return r.invoke(a.$get,a)});m(e(b),function(a){r.invoke(a||D)});return r}function uc(){var b=\n   29: !0;this.disableAutoScrolling=function(){b=!1};this.$get=[\"$window\",\"$location\",\"$rootScope\",function(a,c,d){function e(a){var b=null;m(a,function(a){!b&&E(a.nodeName)===\"a\"&&(b=a)});return b}function g(){var b=c.hash(),d;b?(d=i.getElementById(b))?d.scrollIntoView():(d=e(i.getElementsByName(b)))?d.scrollIntoView():b===\"top\"&&a.scrollTo(0,0):a.scrollTo(0,0)}var i=a.document;b&&d.$watch(function(){return c.hash()},function(){d.$evalAsync(g)});return g}]}function vc(b,a,c,d){function e(a){try{a.apply(null,\n   30  ia.call(arguments,1))}finally{if(n--,n===0)for(;w.length;)try{w.pop()()}catch(b){c.error(b)}}}function g(a,b){(function ea(){m(q,function(a){a()});s=b(ea,a)})()}function i(){O!=f.url()&&(O=f.url(),m(A,function(a){a(f.url())}))}var f=this,h=a[0],k=b.location,j=b.history,l=b.setTimeout,o=b.clearTimeout,r={};f.isMock=!1;var n=0,w=[];f.$$completeOutstandingRequest=e;f.$$incOutstandingRequestCount=function(){n++};f.notifyWhenNoOutstandingRequests=function(a){m(q,function(a){a()});n===0?a():w.push(a)};\n   31  var q=[],s;f.addPollFn=function(a){t(s)&&g(100,l);q.push(a);return a};var O=k.href,C=a.find(\"base\");f.url=function(a,b){if(a){if(O!=a)return O=a,d.history?b?j.replaceState(null,\"\",a):(j.pushState(null,\"\",a),C.attr(\"href\",C.attr(\"href\"))):b?k.replace(a):k.href=a,f}else return k.href.replace(/%27/g,\"'\")};var A=[],K=!1;f.onUrlChange=function(a){K||(d.history&&u(b).bind(\"popstate\",i),d.hashchange?u(b).bind(\"hashchange\",i):f.addPollFn(i),K=!0);A.push(a);return a};f.baseHref=function(){var a=C.attr(\"href\");\n   ..\n   34  d){function e(a){if(a!=l){if(o){if(o==a)o=a.n}else o=a;g(a.n,a.p);g(a,l);l=a;l.n=null}}function g(a,b){if(a!=b){if(a)a.p=b;if(b)b.n=a}}if(b in a)throw B(\"cacheId \"+b+\" taken\");var i=0,f=x({},d,{id:b}),h={},k=d&&d.capacity||Number.MAX_VALUE,j={},l=null,o=null;return a[b]={put:function(a,b){var c=j[a]||(j[a]={key:a});e(c);t(b)||(a in h||i++,h[a]=b,i>k&&this.remove(o.key))},get:function(a){var b=j[a];if(b)return e(b),h[a]},remove:function(a){var b=j[a];if(b){if(b==l)l=b.p;if(b==o)o=b.n;g(b.n,b.p);delete j[a];\n   35  delete h[a];i--}},removeAll:function(){h={};i=0;j={};l=o=null},destroy:function(){j=f=h=null;delete a[b]},info:function(){return x({},f,{size:i})}}}var a={};b.info=function(){var b={};m(a,function(a,e){b[e]=a.info()});return b};b.get=function(b){return a[b]};return b}}function yc(){this.$get=[\"$cacheFactory\",function(b){return b(\"templates\")}]}function Bb(b){var a={},c=\"Directive\",d=/^\\s*directive\\:\\s*([\\d\\w\\-_]+)\\s+(.*)$/,e=/(([\\d\\w\\-_]+)(?:\\:([^;]+))?;?)/,g=\"Template must have exactly one root element. was: \";\n   36: this.directive=function f(d,e){F(d)?(qa(e,\"directive\"),a.hasOwnProperty(d)||(a[d]=[],b.factory(d+c,[\"$injector\",\"$exceptionHandler\",function(b,c){var e=[];m(a[d],function(a){try{var f=b.invoke(a);if(N(f))f={compile:I(f)};else if(!f.compile&&f.link)f.compile=I(f.link);f.priority=f.priority||0;f.name=f.name||d;f.require=f.require||f.controller&&f.name;f.restrict=f.restrict||\"A\";e.push(f)}catch(k){c(k)}});return e}])),a[d].push(e)):m(d,mb(f));return this};this.$get=[\"$injector\",\"$interpolate\",\"$exceptionHandler\",\n   37  \"$http\",\"$templateCache\",\"$parse\",\"$controller\",\"$rootScope\",function(b,h,k,j,l,o,r,n){function w(a,b,c){a instanceof u||(a=u(a));m(a,function(b,c){b.nodeType==3&&(a[c]=u(b).wrap(\"<span></span>\").parent()[0])});var d=s(a,b,a,c);return function(b,c){qa(b,\"scope\");var e=c?ua.clone.call(a):a;e.data(\"$scope\",b);q(e,\"ng-scope\");c&&c(e,b);d&&d(b,e,e);return e}}function q(a,b){try{a.addClass(b)}catch(c){}}function s(a,b,c,d){function e(a,c,d,k){for(var g,h,j,n,o,l=0,r=0,q=f.length;l<q;r++)j=c[r],g=f[l++],\n   38  h=f[l++],g?(g.scope?(n=a.$new(L(g.scope)),u(j).data(\"$scope\",n)):n=a,(o=g.transclude)||!k&&b?g(h,n,j,d,function(b){return function(c){var d=a.$new();return b(d,c).bind(\"$destroy\",Va(d,d.$destroy))}}(o||b)):g(h,n,j,p,k)):h&&h(a,j.childNodes,p,k)}for(var f=[],k,g,h,j=0;j<a.length;j++)g=new ea,k=O(a[j],[],g,d),g=(k=k.length?C(k,a[j],g,b,c):null)&&k.terminal||!a[j].childNodes.length?null:s(a[j].childNodes,k?k.transclude:b),f.push(k),f.push(g),h=h||k||g;return h?e:null}function O(a,b,c,f){var k=c.$attr,\n   39: g;switch(a.nodeType){case 1:A(b,fa(Cb(a).toLowerCase()),\"E\",f);var h,j,n;g=a.attributes;for(var o=0,l=g&&g.length;o<l;o++)if(h=g[o],h.specified)j=h.name,n=fa(j.toLowerCase()),k[n]=j,c[n]=h=R(aa&&j==\"href\"?decodeURIComponent(a.getAttribute(j,2)):h.value),yb(a,n)&&(c[n]=!0),X(a,b,h,n),A(b,n,\"A\",f);a=a.className;if(F(a)&&a!==\"\")for(;g=e.exec(a);)n=fa(g[2]),A(b,n,\"C\",f)&&(c[n]=R(g[3])),a=a.substr(g.index+g[0].length);break;case 3:H(b,a.nodeValue);break;case 8:try{if(g=d.exec(a.nodeValue))n=fa(g[1]),A(b,\n   40  n,\"M\",f)&&(c[n]=R(g[2]))}catch(r){}}b.sort(y);return b}function C(a,b,c,d,e){function f(a,b){if(a)a.require=z.require,l.push(a);if(b)b.require=z.require,ba.push(b)}function h(a,b){var c,d=\"data\",e=!1;if(F(a)){for(;(c=a.charAt(0))==\"^\"||c==\"?\";)a=a.substr(1),c==\"^\"&&(d=\"inheritedData\"),e=e||c==\"?\";c=b[d](\"$\"+a+\"Controller\");if(!c&&!e)throw B(\"No controller: \"+a);}else J(a)&&(c=[],m(a,function(a){c.push(h(a,b))}));return c}function j(a,d,e,f,g){var n,q,w,K,s;n=b===e?c:hc(c,new ea(u(e),c.$attr));q=n.$$element;\n   41: if(C){var zc=/^\\s*([@=&])\\s*(\\w*)\\s*$/,O=d.$parent||d;m(C.scope,function(a,b){var c=a.match(zc)||[],e=c[2]||b,f,g,k;switch(c[1]){case \"@\":n.$observe(e,function(a){d[b]=a});n.$$observers[e].$$scope=O;break;case \"=\":g=o(n[e]);k=g.assign||function(){f=d[b]=g(O);throw B(Db+n[e]+\" (directive: \"+C.name+\")\");};f=d[b]=g(O);d.$watch(function(){var a=g(O);a!==d[b]&&(a!==f?f=d[b]=a:k(O,a=f=d[b]));return a});break;case \"&\":g=o(n[e]);d[b]=function(a){return g(O,a)};break;default:throw B(\"Invalid isolate scope definition for directive \"+\n   42: C.name+\": \"+a);}})}t&&m(t,function(a){var b={$scope:d,$element:q,$attrs:n,$transclude:g};s=a.controller;s==\"@\"&&(s=n[a.name]);q.data(\"$\"+a.name+\"Controller\",r(s,b))});f=0;for(w=l.length;f<w;f++)try{K=l[f],K(d,q,n,K.require&&h(K.require,q))}catch(y){k(y,pa(q))}a&&a(d,e.childNodes,p,g);f=0;for(w=ba.length;f<w;f++)try{K=ba[f],K(d,q,n,K.require&&h(K.require,q))}catch(Ha){k(Ha,pa(q))}}for(var n=-Number.MAX_VALUE,l=[],ba=[],s=null,C=null,A=null,y=c.$$element=u(b),z,H,X,D,v=d,t,x,Y,E=0,G=a.length;E<G;E++){z=\n   43: a[E];X=p;if(n>z.priority)break;if(Y=z.scope)M(\"isolated scope\",C,z,y),L(Y)&&(q(y,\"ng-isolate-scope\"),C=z),q(y,\"ng-scope\"),s=s||z;H=z.name;if(Y=z.controller)t=t||{},M(\"'\"+H+\"' controller\",t[H],z,y),t[H]=z;if(Y=z.transclude)M(\"transclusion\",D,z,y),D=z,n=z.priority,Y==\"element\"?(X=u(b),y=c.$$element=u(\"<\\!-- \"+H+\": \"+c[H]+\" --\\>\"),b=y[0],Ga(e,u(X[0]),b),v=w(X,d,n)):(X=u(cb(b)).contents(),y.html(\"\"),v=w(X,d));if(Y=z.template)if(M(\"template\",A,z,y),A=z,Y=Ha(Y),z.replace){X=u(\"<div>\"+R(Y)+\"</div>\").contents();\n   44  b=X[0];if(X.length!=1||b.nodeType!==1)throw new B(g+Y);Ga(e,y,b);H={$attr:{}};a=a.concat(O(b,a.splice(E+1,a.length-(E+1)),H));K(c,H);G=a.length}else y.html(Y);if(z.templateUrl)M(\"template\",A,z,y),A=z,j=W(a.splice(E,a.length-E),j,y,c,e,z.replace,v),G=a.length;else if(z.compile)try{x=z.compile(y,c,v),N(x)?f(null,x):x&&f(x.pre,x.post)}catch(I){k(I,pa(y))}if(z.terminal)j.terminal=!0,n=Math.max(n,z.priority)}j.scope=s&&s.scope;j.transclude=D&&v;return j}function A(d,e,g,h){var j=!1;if(a.hasOwnProperty(e))for(var n,\n   45  e=b.get(e+c),o=0,l=e.length;o<l;o++)try{if(n=e[o],(h===p||h>n.priority)&&n.restrict.indexOf(g)!=-1)d.push(n),j=!0}catch(r){k(r)}return j}function K(a,b){var c=b.$attr,d=a.$attr,e=a.$$element;m(a,function(d,e){e.charAt(0)!=\"$\"&&(b[e]&&(d+=(e===\"style\"?\";\":\" \")+b[e]),a.$set(e,d,!0,c[e]))});m(b,function(b,f){f==\"class\"?(q(e,b),a[\"class\"]=(a[\"class\"]?a[\"class\"]+\" \":\"\")+b):f==\"style\"?e.attr(\"style\",e.attr(\"style\")+\";\"+b):f.charAt(0)!=\"$\"&&!a.hasOwnProperty(f)&&(a[f]=b,d[f]=c[f])})}function W(a,b,c,d,e,\n   46  f,k){var h=[],n,o,r=c[0],q=a.shift(),w=x({},q,{controller:null,templateUrl:null,transclude:null,scope:null});c.html(\"\");j.get(q.templateUrl,{cache:l}).success(function(j){var l,q,j=Ha(j);if(f){q=u(\"<div>\"+R(j)+\"</div>\").contents();l=q[0];if(q.length!=1||l.nodeType!==1)throw new B(g+j);j={$attr:{}};Ga(e,c,l);O(l,a,j);K(d,j)}else l=r,c.html(j);a.unshift(w);n=C(a,c,d,k);for(o=s(c.contents(),k);h.length;){var ba=h.pop(),j=h.pop();q=h.pop();var y=h.pop(),m=l;q!==r&&(m=cb(l),Ga(j,u(q),m));n(function(){b(o,\n   47: y,m,e,ba)},y,m,e,ba)}h=null}).error(function(a,b,c,d){throw B(\"Failed to load template: \"+d.url);});return function(a,c,d,e,f){h?(h.push(c),h.push(d),h.push(e),h.push(f)):n(function(){b(o,c,d,e,f)},c,d,e,f)}}function y(a,b){return b.priority-a.priority}function M(a,b,c,d){if(b)throw B(\"Multiple directives [\"+b.name+\", \"+c.name+\"] asking for \"+a+\" on: \"+pa(d));}function H(a,b){var c=h(b,!0);c&&a.push({priority:0,compile:I(function(a,b){var d=b.parent(),e=d.data(\"$binding\")||[];e.push(c);q(d.data(\"$binding\",\n   48  e),\"ng-binding\");a.$watch(c,function(a){b[0].nodeValue=a})})})}function X(a,b,c,d){var e=h(c,!0);e&&b.push({priority:100,compile:I(function(a,b,c){b=c.$$observers||(c.$$observers={});d===\"class\"&&(e=h(c[d],!0));c[d]=p;(b[d]||(b[d]=[])).$$inter=!0;(c.$$observers&&c.$$observers[d].$$scope||a).$watch(e,function(a){c.$set(d,a)})})})}function Ga(a,b,c){var d=b[0],e=d.parentNode,f,g;if(a){f=0;for(g=a.length;f<g;f++)if(a[f]==d){a[f]=c;break}}e&&e.replaceChild(c,d);c[u.expando]=d[u.expando];b[0]=c}var ea=\n   49  function(a,b){this.$$element=a;this.$attr=b||{}};ea.prototype={$normalize:fa,$set:function(a,b,c,d){var e=yb(this.$$element[0],a),f=this.$$observers;e&&(this.$$element.prop(a,b),d=e);this[a]=b;d?this.$attr[a]=d:(d=this.$attr[a])||(this.$attr[a]=d=$a(a,\"-\"));c!==!1&&(b===null||b===p?this.$$element.removeAttr(d):this.$$element.attr(d,b));f&&m(f[a],function(a){try{a(b)}catch(c){k(c)}})},$observe:function(a,b){var c=this,d=c.$$observers||(c.$$observers={}),e=d[a]||(d[a]=[]);e.push(b);n.$evalAsync(function(){e.$$inter||\n   ..\n   56  this.$$path=c[1]?(c[1].charAt(0)==\"/\"?\"\":\"/\")+decodeURIComponent(c[1]):\"\";this.$$search=Xa(c[3]);this.$$hash=c[5]&&decodeURIComponent(c[5])||\"\";this.$$compose()};this.$$compose=function(){var b=ob(this.$$search),c=this.$$hash?\"#\"+Za(this.$$hash):\"\";this.$$url=Eb(this.$$path)+(b?\"?\"+b:\"\")+c;this.$$absUrl=ka(this.$$protocol,this.$$host,this.$$port)+d+(this.$$url?\"#\"+a+this.$$url:\"\")};this.$$rewriteAppUrl=function(a){if(a.indexOf(c)==0)return a};this.$$parse(b)}function Hb(b,a,c,d){Ia.apply(this,arguments);\n   57  this.$$rewriteAppUrl=function(b){if(b.indexOf(c)==0)return c+d+\"#\"+a+b.substr(c.length)}}function Ja(b){return function(){return this[b]}}function Ib(b,a){return function(c){if(t(c))return this[b];this[b]=a(c);this.$$compose();return this}}function Ic(){var b=\"\",a=!1;this.hashPrefix=function(a){return v(a)?(b=a,this):b};this.html5Mode=function(b){return v(b)?(a=b,this):a};this.$get=[\"$rootScope\",\"$browser\",\"$sniffer\",\"$rootElement\",function(c,d,e,g){function i(a){c.$broadcast(\"$locationChangeSuccess\",\n   58: f.absUrl(),a)}var f,h,k,j=d.url(),l=va(j);a?(h=d.baseHref()||\"/\",k=h.substr(0,h.lastIndexOf(\"/\")),l=ka(l.protocol,l.host,l.port)+k+\"/\",f=e.history?new gb(Fc(j,h,b),k,l):new Hb(Gc(j,h,b),b,l,h.substr(k.length+1))):(l=ka(l.protocol,l.host,l.port)+(l.path||\"\")+(l.search?\"?\"+l.search:\"\")+\"#\"+b+\"/\",f=new Ia(j,b,l));g.bind(\"click\",function(a){if(!a.ctrlKey&&!(a.metaKey||a.which==2)){for(var b=u(a.target);E(b[0].nodeName)!==\"a\";)if(b[0]===g[0]||!(b=b.parent())[0])return;var d=b.prop(\"href\"),e=f.$$rewriteAppUrl(d);\n   59  d&&!b.attr(\"target\")&&e&&(f.$$parse(e),c.$apply(),a.preventDefault(),U.angular[\"ff-684208-preventDefault\"]=!0)}});f.absUrl()!=j&&d.url(f.absUrl(),!0);d.onUrlChange(function(a){f.absUrl()!=a&&(c.$evalAsync(function(){var b=f.absUrl();f.$$parse(a);i(b)}),c.$$phase||c.$digest())});var o=0;c.$watch(function(){var a=d.url(),b=f.$$replace;if(!o||a!=f.absUrl())o++,c.$evalAsync(function(){c.$broadcast(\"$locationChangeStart\",f.absUrl(),a).defaultPrevented?f.$$parse(a):(d.url(f.absUrl(),b),i(a))});f.$$replace=\n   60  !1;return o});return f}]}function Jc(){this.$get=[\"$window\",function(b){function a(a){a instanceof B&&(a.stack?a=a.message&&a.stack.indexOf(a.message)===-1?\"Error: \"+a.message+\"\\n\"+a.stack:a.stack:a.sourceURL&&(a=a.message+\"\\n\"+a.sourceURL+\":\"+a.line));return a}function c(c){var e=b.console||{},g=e[c]||e.log||D;return g.apply?function(){var b=[];m(arguments,function(c){b.push(a(c))});return g.apply(e,b)}:function(a,b){g(a,b)}}return{log:c(\"log\"),warn:c(\"warn\"),info:c(\"info\"),error:c(\"error\")}}]}function Kc(b,\n   ..\n   82  10;this.digestTtl=function(a){arguments.length&&(b=a);return b};this.$get=[\"$injector\",\"$exceptionHandler\",\"$parse\",function(a,c,d){function e(){this.$id=xa();this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null;this[\"this\"]=this.$root=this;this.$$asyncQueue=[];this.$$listeners={}}function g(a){if(h.$$phase)throw B(h.$$phase+\" already in progress\");h.$$phase=a}function i(a,b){var c=d(a);ra(c,b);return c}function f(){}e.prototype={$new:function(a){if(N(a))throw B(\"API-CHANGE: Use $controller to instantiate controllers.\");\n   83  a?(a=new e,a.$root=this.$root):(a=function(){},a.prototype=this,a=new a,a.$id=xa());a[\"this\"]=a;a.$$listeners={};a.$parent=this;a.$$asyncQueue=[];a.$$watchers=a.$$nextSibling=a.$$childHead=a.$$childTail=null;a.$$prevSibling=this.$$childTail;this.$$childHead?this.$$childTail=this.$$childTail.$$nextSibling=a:this.$$childHead=this.$$childTail=a;return a},$watch:function(a,b,c){var d=i(a,\"watch\"),e=this.$$watchers,g={fn:b,last:f,get:d,exp:a,eq:!!c};if(!N(b)){var h=i(b||D,\"listener\");g.fn=function(a,b,\n   84: c){h(c)}}if(!e)e=this.$$watchers=[];e.unshift(g);return function(){Ua(e,g)}},$digest:function(){var a,d,e,i,r,n,m,q=b,s,p=[],C,A;g(\"$digest\");do{m=!1;s=this;do{for(r=s.$$asyncQueue;r.length;)try{s.$eval(r.shift())}catch(K){c(K)}if(i=s.$$watchers)for(n=i.length;n--;)try{if(a=i[n],(d=a.get(s))!==(e=a.last)&&!(a.eq?ha(d,e):typeof d==\"number\"&&typeof e==\"number\"&&isNaN(d)&&isNaN(e)))m=!0,a.last=a.eq?V(d):d,a.fn(d,e===f?d:e,s),q<5&&(C=4-q,p[C]||(p[C]=[]),A=N(a.exp)?\"fn: \"+(a.exp.name||a.exp.toString()):\n   85  a.exp,A+=\"; newVal: \"+da(d)+\"; oldVal: \"+da(e),p[C].push(A))}catch(W){c(W)}if(!(i=s.$$childHead||s!==this&&s.$$nextSibling))for(;s!==this&&!(i=s.$$nextSibling);)s=s.$parent}while(s=i);if(m&&!q--)throw h.$$phase=null,B(b+\" $digest() iterations reached. Aborting!\\nWatchers fired in the last 5 iterations: \"+da(p));}while(m||r.length);h.$$phase=null},$destroy:function(){if(h!=this){var a=this.$parent;this.$broadcast(\"$destroy\");if(a.$$childHead==this)a.$$childHead=this.$$nextSibling;if(a.$$childTail==\n   86  this)a.$$childTail=this.$$prevSibling;if(this.$$prevSibling)this.$$prevSibling.$$nextSibling=this.$$nextSibling;if(this.$$nextSibling)this.$$nextSibling.$$prevSibling=this.$$prevSibling;this.$parent=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null}},$eval:function(a,b){return d(a)(this,b)},$evalAsync:function(a){this.$$asyncQueue.push(a)},$apply:function(a){try{return g(\"$apply\"),this.$eval(a)}catch(b){c(b)}finally{h.$$phase=null;try{h.$digest()}catch(d){throw c(d),d;}}},\n   87: $on:function(a,b){var c=this.$$listeners[a];c||(this.$$listeners[a]=c=[]);c.push(b);return function(){c[za(c,b)]=null}},$emit:function(a,b){var d=[],e,f=this,g=!1,h={name:a,targetScope:f,stopPropagation:function(){g=!0},preventDefault:function(){h.defaultPrevented=!0},defaultPrevented:!1},i=[h].concat(ia.call(arguments,1)),m,p;do{e=f.$$listeners[a]||d;h.currentScope=f;m=0;for(p=e.length;m<p;m++)if(e[m])try{if(e[m].apply(null,i),g)return h}catch(C){c(C)}else e.splice(m,1),m--,p--;f=f.$parent}while(f);\n   88: return h},$broadcast:function(a,b){var d=this,e=this,f={name:a,targetScope:this,preventDefault:function(){f.defaultPrevented=!0},defaultPrevented:!1},g=[f].concat(ia.call(arguments,1)),h,i;do{d=e;f.currentScope=d;e=d.$$listeners[a]||[];h=0;for(i=e.length;h<i;h++)if(e[h])try{e[h].apply(null,g)}catch(m){c(m)}else e.splice(h,1),h--,i--;if(!(e=d.$$childHead||d!==this&&d.$$nextSibling))for(;d!==this&&!(e=d.$$nextSibling);)d=d.$parent}while(d=e);return f}};var h=new e;return h}]}function Tc(){this.$get=\n   89  [\"$window\",function(b){var a={},c=G((/android (\\d+)/.exec(E(b.navigator.userAgent))||[])[1]);return{history:!(!b.history||!b.history.pushState||c<4),hashchange:\"onhashchange\"in b&&(!b.document.documentMode||b.document.documentMode>7),hasEvent:function(c){if(c==\"input\"&&aa==9)return!1;if(t(a[c])){var e=b.document.createElement(\"div\");a[c]=\"on\"+c in e}return a[c]},csp:!1}}]}function Uc(){this.$get=I(U)}function Mb(b){var a={},c,d,e;if(!b)return a;m(b.split(\"\\n\"),function(b){e=b.indexOf(\":\");c=E(R(b.substr(0,\n   90  e)));d=R(b.substr(e+1));c&&(a[c]?a[c]+=\", \"+d:a[c]=d)});return a}function Nb(b){var a=L(b)?b:p;return function(c){a||(a=Mb(b));return c?a[E(c)]||null:a}}function Ob(b,a,c){if(N(c))return c(b,a);m(c,function(c){b=c(b,a)});return b}function Vc(){var b=/^\\s*(\\[|\\{[^\\{])/,a=/[\\}\\]]\\s*$/,c=/^\\)\\]\\}',?\\n/,d=this.defaults={transformResponse:[function(d){F(d)&&(d=d.replace(c,\"\"),b.test(d)&&a.test(d)&&(d=nb(d,!0)));return d}],transformRequest:[function(a){return L(a)&&Sa.apply(a)!==\"[object File]\"?da(a):a}],\n   ..\n  106  1)),e=i.pop()):(i.push(e),e=null);m(i,function(a){f=hd[a];g+=f?f(c,b.DATETIME_FORMATS):a.replace(/(^'|'$)/g,\"\").replace(/''/g,\"'\")});return g}}function bd(){return function(b){return da(b,!0)}}function cd(){return function(b,a){if(!(b instanceof Array))return b;var a=G(a),c=[],d,e;if(!b||!(b instanceof Array))return c;a>b.length?a=b.length:a<-b.length&&(a=-b.length);a>0?(d=0,e=a):(d=b.length+a,e=b.length);for(;d<e;d++)c.push(b[d]);return c}}function Tb(b){return function(a,c,d){function e(a,b){return Wa(b)?\n  107  function(b,c){return a(c,b)}:a}if(!(a instanceof Array))return a;if(!c)return a;for(var c=J(c)?c:[c],c=Ta(c,function(a){var c=!1,d=a||ma;if(F(a)){if(a.charAt(0)==\"+\"||a.charAt(0)==\"-\")c=a.charAt(0)==\"-\",a=a.substring(1);d=b(a)}return e(function(a,b){var c;c=d(a);var e=d(b),f=typeof c,g=typeof e;f==g?(f==\"string\"&&(c=c.toLowerCase()),f==\"string\"&&(e=e.toLowerCase()),c=c===e?0:c<e?-1:1):c=f<g?-1:1;return c},c)}),g=[],i=0;i<a.length;i++)g.push(a[i]);return g.sort(e(function(a,b){for(var d=0;d<c.length;d++){var e=\n  108: c[d](a,b);if(e!==0)return e}return 0},d))}}function S(b){N(b)&&(b={link:b});b.restrict=b.restrict||\"AC\";return I(b)}function Wb(b,a){function c(a,c){c=c?\"-\"+$a(c,\"-\"):\"\";b.removeClass((a?Ma:Na)+c).addClass((a?Na:Ma)+c)}var d=this,e=b.parent().controller(\"form\")||Oa,g=0,i=d.$error={};d.$name=a.name;d.$dirty=!1;d.$pristine=!0;d.$valid=!0;d.$invalid=!1;e.$addControl(d);b.addClass(Pa);c(!0);d.$addControl=function(a){a.$name&&!d.hasOwnProperty(a.$name)&&(d[a.$name]=a)};d.$removeControl=function(a){a.$name&&\n  109: d[a.$name]===a&&delete d[a.$name];m(i,function(b,c){d.$setValidity(c,!0,a)})};d.$setValidity=function(a,b,k){var j=i[a];if(b){if(j&&(Ua(j,k),!j.length)){g--;if(!g)c(b),d.$valid=!0,d.$invalid=!1;i[a]=!1;c(!0,a);e.$setValidity(a,!0,d)}}else{g||c(b);if(j){if(za(j,k)!=-1)return}else i[a]=j=[],g++,c(!1,a),e.$setValidity(a,!1,d);j.push(k);d.$valid=!1;d.$invalid=!0}};d.$setDirty=function(){b.removeClass(Pa).addClass(Xb);d.$dirty=!0;d.$pristine=!1;e.$setDirty()}}function T(b){return t(b)||b===\"\"||b===null||\n  110  b!==b}function Qa(b,a,c,d,e,g){var i=function(){var c=R(a.val());d.$viewValue!==c&&b.$apply(function(){d.$setViewValue(c)})};if(e.hasEvent(\"input\"))a.bind(\"input\",i);else{var f;a.bind(\"keydown\",function(a){a=a.keyCode;a===91||15<a&&a<19||37<=a&&a<=40||f||(f=g.defer(function(){i();f=null}))});a.bind(\"change\",i)}d.$render=function(){a.val(T(d.$viewValue)?\"\":d.$viewValue)};var h=c.ngPattern,k=function(a,b){return T(b)||a.test(b)?(d.$setValidity(\"pattern\",!0),b):(d.$setValidity(\"pattern\",!1),p)};h&&(h.match(/^\\/(.*)\\/$/)?\n  111  (h=RegExp(h.substr(1,h.length-2)),e=function(a){return k(h,a)}):e=function(a){var c=b.$eval(h);if(!c||!c.test)throw new B(\"Expected \"+h+\" to be a RegExp but was \"+c);return k(c,a)},d.$formatters.push(e),d.$parsers.push(e));if(c.ngMinlength){var j=G(c.ngMinlength),e=function(a){return!T(a)&&a.length<j?(d.$setValidity(\"minlength\",!1),p):(d.$setValidity(\"minlength\",!0),a)};d.$parsers.push(e);d.$formatters.push(e)}if(c.ngMaxlength){var l=G(c.ngMaxlength),c=function(a){return!T(a)&&a.length>l?(d.$setValidity(\"maxlength\",\n  112  !1),p):(d.$setValidity(\"maxlength\",!0),a)};d.$parsers.push(c);d.$formatters.push(c)}}function jb(b,a){b=\"ngClass\"+b;return S(function(c,d,e){function g(b,d){if(a===!0||c.$index%2===a)d&&b!==d&&i(d),f(b)}function i(a){L(a)&&!J(a)&&(a=Ta(a,function(a,b){if(a)return b}));d.removeClass(J(a)?a.join(\" \"):a)}function f(a){L(a)&&!J(a)&&(a=Ta(a,function(a,b){if(a)return b}));a&&d.addClass(J(a)?a.join(\" \"):a)}c.$watch(e[b],g,!0);e.$observe(\"class\",function(){var a=c.$eval(e[b]);g(a,a)});b!==\"ngClass\"&&c.$watch(\"$index\",\n  113: function(d,g){var j=d%2;j!==g%2&&(j==a?f(c.$eval(e[b])):i(c.$eval(e[b])))})})}var E=function(b){return F(b)?b.toLowerCase():b},la=function(b){return F(b)?b.toUpperCase():b},B=U.Error,aa=G((/msie (\\d+)/.exec(E(navigator.userAgent))||[])[1]),u,ja,ia=[].slice,Ra=[].push,Sa=Object.prototype.toString,Yb=U.angular||(U.angular={}),ta,Cb,Z=[\"0\",\"0\",\"0\"];D.$inject=[];ma.$inject=[];Cb=aa<9?function(b){b=b.nodeName?b:b[0];return b.scopeName&&b.scopeName!=\"HTML\"?la(b.scopeName+\":\"+b.nodeName):b.nodeName}:function(b){return b.nodeName?\n  114: b.nodeName:b[0].nodeName};var kc=/[A-Z]/g,id={full:\"1.0.3\",major:1,minor:0,dot:3,codeName:\"bouncy-thunder\"},Ba=Q.cache={},Aa=Q.expando=\"ng-\"+(new Date).getTime(),oc=1,Zb=U.document.addEventListener?function(b,a,c){b.addEventListener(a,c,!1)}:function(b,a,c){b.attachEvent(\"on\"+a,c)},db=U.document.removeEventListener?function(b,a,c){b.removeEventListener(a,c,!1)}:function(b,a,c){b.detachEvent(\"on\"+a,c)},mc=/([\\:\\-\\_]+(.))/g,nc=/^moz([A-Z])/,ua=Q.prototype={ready:function(b){function a(){c||(c=!0,b())}\n  115  var c=!1;this.bind(\"DOMContentLoaded\",a);Q(U).bind(\"load\",a)},toString:function(){var b=[];m(this,function(a){b.push(\"\"+a)});return\"[\"+b.join(\", \")+\"]\"},eq:function(b){return b>=0?u(this[b]):u(this[this.length+b])},length:0,push:Ra,sort:[].sort,splice:[].splice},Ea={};m(\"multiple,selected,checked,disabled,readOnly,required\".split(\",\"),function(b){Ea[E(b)]=b});var zb={};m(\"input,select,option,textarea,button,form\".split(\",\"),function(b){zb[la(b)]=!0});m({data:ub,inheritedData:Da,scope:function(b){return Da(b,\n  116: \"$scope\")},controller:xb,injector:function(b){return Da(b,\"$injector\")},removeAttr:function(b,a){b.removeAttribute(a)},hasClass:Ca,css:function(b,a,c){a=rb(a);if(v(c))b.style[a]=c;else{var d;aa<=8&&(d=b.currentStyle&&b.currentStyle[a],d===\"\"&&(d=\"auto\"));d=d||b.style[a];aa<=8&&(d=d===\"\"?p:d);return d}},attr:function(b,a,c){var d=E(a);if(Ea[d])if(v(c))c?(b[a]=!0,b.setAttribute(a,d)):(b[a]=!1,b.removeAttribute(d));else return b[a]||(b.attributes.getNamedItem(a)||D).specified?d:p;else if(v(c))b.setAttribute(a,\n  117  c);else if(b.getAttribute)return b=b.getAttribute(a,2),b===null?p:b},prop:function(b,a,c){if(v(c))b[a]=c;else return b[a]},text:x(aa<9?function(b,a){if(b.nodeType==1){if(t(a))return b.innerText;b.innerText=a}else{if(t(a))return b.nodeValue;b.nodeValue=a}}:function(b,a){if(t(a))return b.textContent;b.textContent=a},{$dv:\"\"}),val:function(b,a){if(t(a))return b.value;b.value=a},html:function(b,a){if(t(a))return b.innerHTML;for(var c=0,d=b.childNodes;c<d.length;c++)sa(d[c]);b.innerHTML=a}},function(b,\n  118  a){Q.prototype[a]=function(a,d){var e,g;if((b.length==2&&b!==Ca&&b!==xb?a:d)===p)if(L(a)){for(e=0;e<this.length;e++)if(b===ub)b(this[e],a);else for(g in a)b(this[e],g,a[g]);return this}else{if(this.length)return b(this[0],a,d)}else{for(e=0;e<this.length;e++)b(this[e],a,d);return this}return b.$dv}});m({removeData:sb,dealoc:sa,bind:function a(c,d,e){var g=$(c,\"events\"),i=$(c,\"handle\");g||$(c,\"events\",g={});i||$(c,\"handle\",i=pc(c,g));m(d.split(\" \"),function(d){var h=g[d];if(!h){if(d==\"mouseenter\"||\n  119: d==\"mouseleave\"){var k=0;g.mouseenter=[];g.mouseleave=[];a(c,\"mouseover\",function(a){k++;k==1&&i(a,\"mouseenter\")});a(c,\"mouseout\",function(a){k--;k==0&&i(a,\"mouseleave\")})}else Zb(c,d,i),g[d]=[];h=g[d]}h.push(e)})},unbind:tb,replaceWith:function(a,c){var d,e=a.parentNode;sa(a);m(new Q(c),function(c){d?e.insertBefore(c,d.nextSibling):e.replaceChild(c,a);d=c})},children:function(a){var c=[];m(a.childNodes,function(a){a.nodeName!=\"#text\"&&c.push(a)});return c},contents:function(a){return a.childNodes},\n  120  append:function(a,c){m(new Q(c),function(c){a.nodeType===1&&a.appendChild(c)})},prepend:function(a,c){if(a.nodeType===1){var d=a.firstChild;m(new Q(c),function(c){d?a.insertBefore(c,d):(a.appendChild(c),d=c)})}},wrap:function(a,c){var c=u(c)[0],d=a.parentNode;d&&d.replaceChild(c,a);c.appendChild(a)},remove:function(a){sa(a);var c=a.parentNode;c&&c.removeChild(a)},after:function(a,c){var d=a,e=a.parentNode;m(new Q(c),function(a){e.insertBefore(a,d.nextSibling);d=a})},addClass:wb,removeClass:vb,toggleClass:function(a,\n  121: c,d){t(d)&&(d=!Ca(a,c));(d?wb:vb)(a,c)},parent:function(a){return(a=a.parentNode)&&a.nodeType!==11?a:null},next:function(a){return a.nextSibling},find:function(a,c){return a.getElementsByTagName(c)},clone:cb,triggerHandler:function(a,c){var d=($(a,\"events\")||{})[c];m(d,function(c){c.call(a,null)})}},function(a,c){Q.prototype[c]=function(c,e){for(var g,i=0;i<this.length;i++)g==p?(g=a(this[i],c,e),g!==p&&(g=u(g))):bb(g,a(this[i],c,e));return g==p?this:g}});Fa.prototype={put:function(a,c){this[ga(a)]=\n  122  c},get:function(a){return this[ga(a)]},remove:function(a){var c=this[a=ga(a)];delete this[a];return c}};eb.prototype={push:function(a,c){var d=this[a=ga(a)];d?d.push(c):this[a]=[c]},shift:function(a){var c=this[a=ga(a)];if(c)return c.length==1?(delete this[a],c[0]):c.shift()},peek:function(a){if(a=this[ga(a)])return a[0]}};var rc=/^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m,sc=/,/,tc=/^\\s*(_?)(\\S+?)\\1\\s*$/,qc=/((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg,Db=\"Non-assignable model expression: \";Bb.$inject=[\"$provide\"];\n  123  var Ac=/^(x[\\:\\-_]|data[\\:\\-_])/i,Fb=/^([^:]+):\\/\\/(\\w+:{0,1}\\w*@)?([\\w\\.-]*)(:([0-9]+))?(\\/[^\\?#]*)?(\\?([^#]*))?(#(.*))?$/,$b=/^([^\\?#]*)?(\\?([^#]*))?(#(.*))?$/,Hc=$b,Gb={http:80,https:443,ftp:21};gb.prototype={$$replace:!1,absUrl:Ja(\"$$absUrl\"),url:function(a,c){if(t(a))return this.$$url;var d=$b.exec(a);d[1]&&this.path(decodeURIComponent(d[1]));if(d[2]||d[1])this.search(d[3]||\"\");this.hash(d[5]||\"\",c);return this},protocol:Ja(\"$$protocol\"),host:Ja(\"$$host\"),port:Ja(\"$$port\"),path:Ib(\"$$path\",function(a){return a.charAt(0)==\n  ...\n  127  };Pb.$inject=[\"$provide\"];Qb.$inject=[\"$locale\"];Sb.$inject=[\"$locale\"];var Vb=\".\",hd={yyyy:P(\"FullYear\",4),yy:P(\"FullYear\",2,0,!0),y:P(\"FullYear\",1),MMMM:La(\"Month\"),MMM:La(\"Month\",!0),MM:P(\"Month\",2,1),M:P(\"Month\",1,1),dd:P(\"Date\",2),d:P(\"Date\",1),HH:P(\"Hours\",2),H:P(\"Hours\",1),hh:P(\"Hours\",2,-12),h:P(\"Hours\",1,-12),mm:P(\"Minutes\",2),m:P(\"Minutes\",1),ss:P(\"Seconds\",2),s:P(\"Seconds\",1),EEEE:La(\"Day\"),EEE:La(\"Day\",!0),a:function(a,c){return a.getHours()<12?c.AMPMS[0]:c.AMPMS[1]},Z:function(a){a=a.getTimezoneOffset();\n  128  return ib(a/60,2)+ib(Math.abs(a%60),2)}},gd=/((?:[^yMdHhmsaZE']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z))(.*)/,fd=/^\\d+$/;Rb.$inject=[\"$locale\"];var dd=I(E),ed=I(la);Tb.$inject=[\"$parse\"];var jd=I({restrict:\"E\",compile:function(a,c){c.href||c.$set(\"href\",\"\");return function(a,c){c.bind(\"click\",function(a){if(!c.attr(\"href\"))return a.preventDefault(),!1})}}}),kb={};m(Ea,function(a,c){var d=fa(\"ng-\"+c);kb[d]=function(){return{priority:100,compile:function(){return function(a,g,i){a.$watch(i[d],\n  129: function(a){i.$set(c,!!a)})}}}}});m([\"src\",\"href\"],function(a){var c=fa(\"ng-\"+a);kb[c]=function(){return{priority:99,link:function(d,e,g){g.$observe(c,function(c){c&&(g.$set(a,c),aa&&e.prop(a,c))})}}}});var Oa={$addControl:D,$removeControl:D,$setValidity:D,$setDirty:D};Wb.$inject=[\"$element\",\"$attrs\",\"$scope\"];var Ra=function(a){return[\"$timeout\",function(c){var d={name:\"form\",restrict:\"E\",controller:Wb,compile:function(){return{pre:function(a,d,i,f){if(!i.action){var h=function(a){a.preventDefault?\n  130: a.preventDefault():a.returnValue=!1};Zb(d[0],\"submit\",h);d.bind(\"$destroy\",function(){c(function(){db(d[0],\"submit\",h)},0,!1)})}var k=d.parent().controller(\"form\"),j=i.name||i.ngForm;j&&(a[j]=f);k&&d.bind(\"$destroy\",function(){k.$removeControl(f);j&&(a[j]=p);x(f,Oa)})}}}};return a?x(V(d),{restrict:\"EAC\"}):d}]},kd=Ra(),ld=Ra(!0),md=/^(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?$/,nd=/^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}$/,od=/^\\s*(\\-|\\+)?(\\d+|(\\d*(\\.\\d*)))\\s*$/,\n  131  ac={text:Qa,number:function(a,c,d,e,g,i){Qa(a,c,d,e,g,i);e.$parsers.push(function(a){var c=T(a);return c||od.test(a)?(e.$setValidity(\"number\",!0),a===\"\"?null:c?a:parseFloat(a)):(e.$setValidity(\"number\",!1),p)});e.$formatters.push(function(a){return T(a)?\"\":\"\"+a});if(d.min){var f=parseFloat(d.min),a=function(a){return!T(a)&&a<f?(e.$setValidity(\"min\",!1),p):(e.$setValidity(\"min\",!0),a)};e.$parsers.push(a);e.$formatters.push(a)}if(d.max){var h=parseFloat(d.max),d=function(a){return!T(a)&&a>h?(e.$setValidity(\"max\",\n  132  !1),p):(e.$setValidity(\"max\",!0),a)};e.$parsers.push(d);e.$formatters.push(d)}e.$formatters.push(function(a){return T(a)||wa(a)?(e.$setValidity(\"number\",!0),a):(e.$setValidity(\"number\",!1),p)})},url:function(a,c,d,e,g,i){Qa(a,c,d,e,g,i);a=function(a){return T(a)||md.test(a)?(e.$setValidity(\"url\",!0),a):(e.$setValidity(\"url\",!1),p)};e.$formatters.push(a);e.$parsers.push(a)},email:function(a,c,d,e,g,i){Qa(a,c,d,e,g,i);a=function(a){return T(a)||nd.test(a)?(e.$setValidity(\"email\",!0),a):(e.$setValidity(\"email\",\n  133: !1),p)};e.$formatters.push(a);e.$parsers.push(a)},radio:function(a,c,d,e){t(d.name)&&c.attr(\"name\",xa());c.bind(\"click\",function(){c[0].checked&&a.$apply(function(){e.$setViewValue(d.value)})});e.$render=function(){c[0].checked=d.value==e.$viewValue};d.$observe(\"value\",e.$render)},checkbox:function(a,c,d,e){var g=d.ngTrueValue,i=d.ngFalseValue;F(g)||(g=!0);F(i)||(i=!1);c.bind(\"click\",function(){a.$apply(function(){e.$setViewValue(c[0].checked)})});e.$render=function(){c[0].checked=e.$viewValue};e.$formatters.push(function(a){return a===\n  134  g});e.$parsers.push(function(a){return a?g:i})},hidden:D,button:D,submit:D,reset:D},bc=[\"$browser\",\"$sniffer\",function(a,c){return{restrict:\"E\",require:\"?ngModel\",link:function(d,e,g,i){i&&(ac[E(g.type)]||ac.text)(d,e,g,i,c,a)}}}],Na=\"ng-valid\",Ma=\"ng-invalid\",Pa=\"ng-pristine\",Xb=\"ng-dirty\",pd=[\"$scope\",\"$exceptionHandler\",\"$attrs\",\"$element\",\"$parse\",function(a,c,d,e,g){function i(a,c){c=c?\"-\"+$a(c,\"-\"):\"\";e.removeClass((a?Ma:Na)+c).addClass((a?Na:Ma)+c)}this.$modelValue=this.$viewValue=Number.NaN;\n  135: this.$parsers=[];this.$formatters=[];this.$viewChangeListeners=[];this.$pristine=!0;this.$dirty=!1;this.$valid=!0;this.$invalid=!1;this.$name=d.name;var f=g(d.ngModel),h=f.assign;if(!h)throw B(Db+d.ngModel+\" (\"+pa(e)+\")\");this.$render=D;var k=e.inheritedData(\"$formController\")||Oa,j=0,l=this.$error={};e.addClass(Pa);i(!0);this.$setValidity=function(a,c){if(l[a]!==!c){if(c){if(l[a]&&j--,!j)i(!0),this.$valid=!0,this.$invalid=!1}else i(!1),this.$invalid=!0,this.$valid=!1,j++;l[a]=!c;i(c,a);k.$setValidity(a,\n  136  c,this)}};this.$setViewValue=function(d){this.$viewValue=d;if(this.$pristine)this.$dirty=!0,this.$pristine=!1,e.removeClass(Pa).addClass(Xb),k.$setDirty();m(this.$parsers,function(a){d=a(d)});if(this.$modelValue!==d)this.$modelValue=d,h(a,d),m(this.$viewChangeListeners,function(a){try{a()}catch(d){c(d)}})};var o=this;a.$watch(function(){var c=f(a);if(o.$modelValue!==c){var d=o.$formatters,e=d.length;for(o.$modelValue=c;e--;)c=d[e](c);if(o.$viewValue!==c)o.$viewValue=c,o.$render()}})}],qd=function(){return{require:[\"ngModel\",\n  137  \"^?form\"],controller:pd,link:function(a,c,d,e){var g=e[0],i=e[1]||Oa;i.$addControl(g);c.bind(\"$destroy\",function(){i.$removeControl(g)})}}},rd=I({require:\"ngModel\",link:function(a,c,d,e){e.$viewChangeListeners.push(function(){a.$eval(d.ngChange)})}}),cc=function(){return{require:\"?ngModel\",link:function(a,c,d,e){if(e){d.required=!0;var g=function(a){if(d.required&&(T(a)||a===!1))e.$setValidity(\"required\",!1);else return e.$setValidity(\"required\",!0),a};e.$formatters.push(g);e.$parsers.unshift(g);\n\n/Users/pezillionaire/GitHub/simpllist/routes/api.js:\n    3   */\n    4  \n    5: exports.name = function (req, res) {\n    6    res.json({\n    7:   	name: 'Bob'\n    8    });\n    9  };\n\n/Users/pezillionaire/GitHub/simpllist/routes/index.js:\n    9  \n   10  exports.partials = function (req, res) {\n   11:   var name = req.params.name;\n   12:   res.render('partials/' + name);\n   13  };\n\n/Users/pezillionaire/GitHub/simpllist/routes/lists.js:\n   90      var lists = [\n   91      {\n   92:         name: \"my first list\",\n   93          createdBy: \"Pez\",\n   94          dateCreated: \"01/01/2013\",\n   ..\n   97      },\n   98      {\n   99:         name: \"my second list\",\n  100          createdBy: \"Pez\",\n  101          dateCreated: \"02/10/2013\",\n\n/Users/pezillionaire/GitHub/simpllist/views/index.jade:\n    3  block body\n    4    div(ng-controller='AppCtrl')\n    5:     h2 Hello {{name}}\n    6      ul.menu\n    7        li\n\n2924 matches across 99 files\n",
			"settings":
			{
				"buffer_size": 448601,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 267.0,
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"add",
				"Package Control: Add Repository"
			],
			[
				"intall",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 146.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/pezillionaire/GitHub/simpllist/routes/index.js",
		"/Users/pezillionaire/GitHub/simpllist/views/layout.jade",
		"/Users/pezillionaire/GitHub/simpllist/routes/api.js",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/modules/_headings.scss",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/themes/_cat_convo.scss",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/layouts/_columns.scss",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/javascripts/components/tics.js.coffee",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/javascripts/components/image_upload.js.coffee",
		"/Users/pezillionaire/GitHub/tictalking/app/views/conversations/_form.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/modules/_images.scss",
		"/Users/pezillionaire/GitHub/tictalking/app/views/conversations/new.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/themes/_forms.scss",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/base/_typography.scss",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/javascripts/components/inputs.js.coffee",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/javascripts/components/set_conversation_category.js.coffee",
		"/Users/pezillionaire/GitHub/tictalking/app/models/topic.rb",
		"/Users/pezillionaire/GitHub/tictalking/app/views/conversations/_conversation_card.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/contexts/start_new_conversation.rb",
		"/Users/pezillionaire/GitHub/tictalking/app/views/devise/sign_up/_auth_service.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/views/conversations/show.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/views/conversations/create.js.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/javascripts/components/tags.js.coffee",
		"/Users/pezillionaire/GitHub/tictalking/app/controllers/conversations_controller.rb",
		"/Users/pezillionaire/GitHub/tictalking/app/views/layouts/_header.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/views/comments/_comment.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/javascripts/components/toggles.js.coffee",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/javascripts/components/subnav.js.coffee",
		"/Users/pezillionaire/GitHub/tictalking/app/views/layouts/_topic_menu.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/base/_variables.scss",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/layouts/_header.scss",
		"/Users/pezillionaire/GitHub/tictalking/app/helpers/application_helper.rb",
		"/Users/pezillionaire/GitHub/tictalking/app/controllers/application_controller.rb",
		"/Users/pezillionaire/GitHub/tictalking/app/views/conversations/_image_icon.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/views/profile_avatars/_avatar.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/views/member_profiles/show.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/views/member_profiles/edit.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/base/_main.scss",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/themes/_home.scss",
		"/Users/pezillionaire/GitHub/tictalking/app/views/topics/show.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/views/topics/favourites.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/views/explore/show.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/views/legal/privacy.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/views/legal/terms.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/themes/_profile.scss",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/modules/_topics.scss",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/modules/_tics.scss",
		"/Users/pezillionaire/GitHub/tictalking/app/views/member_profiles/tics.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/views/member_profiles/topics.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/views/search/show.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/layouts/_containers.scss",
		"/Users/pezillionaire/GitHub/tictalking/app/views/conversations/_cover_upload.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/views/home/index.html.haml",
		"/Users/pezillionaire/GitHub/trailcheckin/package.json",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/javascripts/application.js",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/javascripts/components/google_search_api.js.coffee",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/modules/_notices.scss",
		"/Users/pezillionaire/GitHub/tictalking/app/views/devise/sign_up/_email.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/themes/_buttons.scss",
		"/Users/pezillionaire/GitHub/tictalking/app/views/following_conversations/index.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/views/topics/index.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/views/member_profiles/_setup_notice.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/views/comments/_add.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/modules/_forms.scss",
		"/Users/pezillionaire/GitHub/tictalking/app/views/tics/_image_upload.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/views/tics/_add_form.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/views/tics/_list.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/views/tics/_tic_details.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/javascripts/components/autocomplete.js.coffee",
		"/Users/pezillionaire/GitHub/tictalking/app/views/tics/_tic.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/views/tics/_search.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/lib/tasks/reprocess_topic_cover_images.rake",
		"/Users/pezillionaire/GitHub/tictalking/app/uploaders/member_cover_uploader.rb",
		"/Users/pezillionaire/GitHub/tictalking/app/models/tic.rb",
		"/Users/pezillionaire/GitHub/tictalking/app/uploaders/topic_cover_uploader.rb",
		"/Users/pezillionaire/GitHub/tictalking/app/views/shared/_google_search_script.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/modules/_results.scss",
		"/Users/pezillionaire/GitHub/tictalking/app/views/member_profiles/_profile_header.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/modules/_lists.scss",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/base/_icons.scss",
		"/Users/pezillionaire/GitHub/tictalking/app/views/profile_avatars/_source_list.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/modules/_tabs.scss",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/modules/_radio.scss",
		"/Users/pezillionaire/GitHub/tictalking/app/views/user_settings/linked_accounts.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/modules/_avatars.scss",
		"/Users/pezillionaire/GitHub/tictalking/vendor/assets/stylesheets/ss-social.css",
		"/Users/pezillionaire/GitHub/tictalking/vendor/assets/stylesheets/ss-standard.css",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/application.css.scss",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/_themes.scss",
		"/Users/pezillionaire/GitHub/tictalking/app/views/shared/_toggle_follow.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/controllers/member_profiles_controller.rb",
		"/Users/pezillionaire/GitHub/tictalking/config/routes.rb",
		"/Users/pezillionaire/GitHub/tictalking/app/models/user.rb",
		"/Users/pezillionaire/GitHub/tictalking/app/controllers/tic_controller.rb",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/modules/_meta.scss",
		"/Users/pezillionaire/GitHub/tictalking/app/controllers/explore_controller.rb",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/modules/_search.scss",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/base/_mixins.scss",
		"/Users/pezillionaire/GitHub/tictalking/app/views/layouts/application.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/layouts/_modal.scss",
		"/Users/pezillionaire/GitHub/tictalking/app/views/layouts/_home_header.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/views/devise/sessions/new.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/views/devise/registrations/new.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/views/layouts/_slider_menu.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/layouts/_menu.scss",
		"/Users/pezillionaire/GitHub/tictalking/app/views/layouts/_public_header.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/modules/_buttons.scss",
		"/Users/pezillionaire/GitHub/tictalking/app/views/feedbacks/_form.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/spec/models/feedback_spec.rb",
		"/Users/pezillionaire/GitHub/tictalking/app/views/feedbacks/new.js.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/views/feedbacks/new.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/controllers/feedbacks_controller.rb",
		"/Users/pezillionaire/GitHub/tictalking/app/views/feedbacks/_modal.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/controllers/engage_controller.rb",
		"/Users/pezillionaire/GitHub/tictalking/app/views/user_settings/notifications.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/views/user_settings/show.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/views/feedbacks/_body.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/views/feedbacks/create.js.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/views/user_settings/translation.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/views/feedbacks/_header.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/mailers/feedback_mailer.rb",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/javascripts/components/radio.js.coffee",
		"/Users/pezillionaire/GitHub/tictalking/app/views/devise/sessions/_form.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/models/feedback.rb",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/stylesheets/modules/_tooltip.scss",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/javascripts/components/truncate.js",
		"/Users/pezillionaire/GitHub/tictalking/app/views/searches/_search_form.html.haml",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/javascripts/components/comments.js.coffee",
		"/Users/pezillionaire/GitHub/tictalking/app/assets/javascripts/components/flag_conversation.js.coffee"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"/Users/pezillionaire/GitHub/simpllist",
			"/Users/pezillionaire/GitHub/tictalking/",
			"/Users/pezillionaire/GitHub/tictalking/app/assets/images",
			"/Users/pezillionaire/GitHub/tictalking/app"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"name",
			"wine",
			"p",
			"file",
			"dropzone",
			"data-upload-cover",
			"=render",
			"upload",
			"get_first_error",
			"topic_id",
			"set-category",
			"categorize",
			"categorize_conversation",
			"categorize_conversation_path",
			"#start-convo-form",
			"explore",
			"expo",
			"menu_link",
			"simpleGray",
			"data-state-change",
			"state-change",
			"data-state-chang",
			".group",
			".document",
			"document",
			"Customize Your Categories",
			"    =render 'topic_feed'\n    =render 'topic_feed'\nCustomize Your Categories",
			"article",
			".feed",
			"new-convo-main",
			".modal",
			"#modal",
			".notice",
			"sign up now",
			"margin",
			"ellipsis",
			"mentionsInput",
			"search-tics",
			".tic-search-box",
			"280",
			"cover_image",
			"topic_cover_images",
			"topic_cover\n\n\ntopic_cover_images",
			"topic_cover\n\n\ntopic_cover",
			"topic_cover_images",
			"MemberCoverUploader",
			"has_cover?",
			".has_cover?",
			"reprocess_topic_cover_images",
			".select-topic",
			"icon-fb",
			".icon-facebook",
			"avatar-list",
			".social-list",
			".avatar-list",
			".edit-cover",
			"Import from Facebook",
			"ss-standard",
			".ss-calendar",
			"following_topics",
			"topics feed",
			"topic feed",
			"#feedback_button",
			"feedback",
			"#login",
			"Feedbacks",
			"Feedback",
			"feedbacks",
			"be blank",
			"Type can't",
			"feedbackModal",
			"create",
			"new.js",
			"FeedbackMailer",
			"#notices",
			"#feedbackModalForm",
			"#feedbackModalBody",
			".modal",
			".general-settings",
			"radio-group",
			".radio-group",
			"type",
			"super user",
			"remember_me",
			"remember",
			"check_box",
			"bug_report",
			"check",
			"%a",
			"feedback",
			".tooltip",
			"menu-btn",
			"science-and-health",
			":after",
			".sidebar-show",
			".sidebar-show ",
			"#slider-menu",
			".original_talker",
			"topic-colours",
			"Leave Conversation",
			"menu_link",
			"=menu_link",
			"@member_profile",
			"jasmine",
			".user",
			"ellipsis",
			"elipse",
			".select-topic",
			".btn-toggle-follow",
			"Conversation",
			"TopicSearch",
			"TopicSubscription",
			"browser",
			"jr_inner",
			"jr_wrap",
			"subscribed",
			"Test::Unit",
			"at_exit",
			"following_topics",
			"subscribed_topics",
			"data-api",
			"togglesubscribe",
			"follow_",
			"follow_topic",
			"follow topic",
			"transition",
			"loader.gif",
			"loader.gig"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"data-topic",
			"$blue",
			"/=render \"searches/search_form\"",
			"#page"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "app.js",
					"settings":
					{
						"buffer_size": 1234,
						"regions":
						{
						},
						"selection":
						[
							[
								954,
								954
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "README.md",
					"settings":
					{
						"buffer_size": 3048,
						"regions":
						{
						},
						"selection":
						[
							[
								149,
								149
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "routes/lists.js",
					"settings":
					{
						"buffer_size": 3310,
						"regions":
						{
						},
						"selection":
						[
							[
								2732,
								2732
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 788.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"settings":
					{
						"buffer_size": 448601,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										150,
										154
									],
									[
										330,
										334
									],
									[
										467,
										471
									],
									[
										548,
										552
									],
									[
										559,
										563
									],
									[
										775,
										779
									],
									[
										789,
										793
									],
									[
										1255,
										1259
									],
									[
										1317,
										1321
									],
									[
										1635,
										1639
									],
									[
										1649,
										1653
									],
									[
										1905,
										1909
									],
									[
										2115,
										2119
									],
									[
										2181,
										2185
									],
									[
										2489,
										2493
									],
									[
										2503,
										2507
									],
									[
										2963,
										2967
									],
									[
										3181,
										3185
									],
									[
										3237,
										3241
									],
									[
										3508,
										3512
									],
									[
										3708,
										3712
									],
									[
										3717,
										3721
									],
									[
										4208,
										4212
									],
									[
										4413,
										4417
									],
									[
										4716,
										4720
									],
									[
										4857,
										4861
									],
									[
										5101,
										5105
									],
									[
										5390,
										5394
									],
									[
										5781,
										5785
									],
									[
										5791,
										5795
									],
									[
										6080,
										6084
									],
									[
										6298,
										6302
									],
									[
										6670,
										6674
									],
									[
										6680,
										6684
									],
									[
										6878,
										6882
									],
									[
										7157,
										7161
									],
									[
										7379,
										7383
									],
									[
										7597,
										7601
									],
									[
										7844,
										7848
									],
									[
										8068,
										8072
									],
									[
										8338,
										8342
									],
									[
										8521,
										8525
									],
									[
										8794,
										8798
									],
									[
										9060,
										9064
									],
									[
										9430,
										9434
									],
									[
										9440,
										9444
									],
									[
										9619,
										9623
									],
									[
										9856,
										9860
									],
									[
										10145,
										10149
									],
									[
										10161,
										10165
									],
									[
										10416,
										10420
									],
									[
										10523,
										10527
									],
									[
										10582,
										10586
									],
									[
										10597,
										10601
									],
									[
										10659,
										10663
									],
									[
										10676,
										10680
									],
									[
										10898,
										10902
									],
									[
										11306,
										11310
									],
									[
										11337,
										11341
									],
									[
										11353,
										11357
									],
									[
										11404,
										11408
									],
									[
										11447,
										11451
									],
									[
										11515,
										11519
									],
									[
										11533,
										11537
									],
									[
										11596,
										11600
									],
									[
										11663,
										11667
									],
									[
										11713,
										11717
									],
									[
										11800,
										11804
									],
									[
										11872,
										11876
									],
									[
										11940,
										11944
									],
									[
										12096,
										12100
									],
									[
										12522,
										12526
									],
									[
										12542,
										12546
									],
									[
										12560,
										12564
									],
									[
										12588,
										12592
									],
									[
										12630,
										12634
									],
									[
										12659,
										12663
									],
									[
										12682,
										12686
									],
									[
										12797,
										12801
									],
									[
										12825,
										12829
									],
									[
										12910,
										12914
									],
									[
										13030,
										13034
									],
									[
										13110,
										13114
									],
									[
										13123,
										13127
									],
									[
										13347,
										13351
									],
									[
										13365,
										13369
									],
									[
										13374,
										13378
									],
									[
										13487,
										13491
									],
									[
										13525,
										13529
									],
									[
										13533,
										13537
									],
									[
										13590,
										13594
									],
									[
										13677,
										13681
									],
									[
										13723,
										13727
									],
									[
										13732,
										13736
									],
									[
										13925,
										13929
									],
									[
										13960,
										13964
									],
									[
										13970,
										13974
									],
									[
										14100,
										14104
									],
									[
										14120,
										14124
									],
									[
										14138,
										14142
									],
									[
										14166,
										14170
									],
									[
										14208,
										14212
									],
									[
										14237,
										14241
									],
									[
										14260,
										14264
									],
									[
										14375,
										14379
									],
									[
										14403,
										14407
									],
									[
										14608,
										14612
									],
									[
										15050,
										15054
									],
									[
										15489,
										15493
									],
									[
										15509,
										15513
									],
									[
										15527,
										15531
									],
									[
										15555,
										15559
									],
									[
										15597,
										15601
									],
									[
										15626,
										15630
									],
									[
										15649,
										15653
									],
									[
										15764,
										15768
									],
									[
										15792,
										15796
									],
									[
										15927,
										15931
									],
									[
										16080,
										16084
									],
									[
										16243,
										16247
									],
									[
										16424,
										16428
									],
									[
										16554,
										16558
									],
									[
										16989,
										16993
									],
									[
										17171,
										17175
									],
									[
										17858,
										17862
									],
									[
										17997,
										18001
									],
									[
										18281,
										18285
									],
									[
										18566,
										18570
									],
									[
										18713,
										18717
									],
									[
										18756,
										18760
									],
									[
										18769,
										18773
									],
									[
										18910,
										18914
									],
									[
										19475,
										19479
									],
									[
										19525,
										19529
									],
									[
										19555,
										19559
									],
									[
										19781,
										19785
									],
									[
										19933,
										19937
									],
									[
										20498,
										20502
									],
									[
										20548,
										20552
									],
									[
										20578,
										20582
									],
									[
										20741,
										20745
									],
									[
										20950,
										20954
									],
									[
										21083,
										21087
									],
									[
										21489,
										21493
									],
									[
										21549,
										21553
									],
									[
										21555,
										21559
									],
									[
										21728,
										21732
									],
									[
										21944,
										21948
									],
									[
										22124,
										22128
									],
									[
										22151,
										22155
									],
									[
										22179,
										22183
									],
									[
										22471,
										22475
									],
									[
										22602,
										22606
									],
									[
										22647,
										22651
									],
									[
										22683,
										22687
									],
									[
										22712,
										22716
									],
									[
										22768,
										22772
									],
									[
										22784,
										22788
									],
									[
										22909,
										22913
									],
									[
										23062,
										23066
									],
									[
										23270,
										23274
									],
									[
										23516,
										23520
									],
									[
										24025,
										24029
									],
									[
										24228,
										24232
									],
									[
										24375,
										24379
									],
									[
										24583,
										24587
									],
									[
										24726,
										24730
									],
									[
										24930,
										24934
									],
									[
										25156,
										25160
									],
									[
										25303,
										25307
									],
									[
										25320,
										25324
									],
									[
										25470,
										25474
									],
									[
										25501,
										25505
									],
									[
										25738,
										25742
									],
									[
										25788,
										25792
									],
									[
										26081,
										26085
									],
									[
										26333,
										26337
									],
									[
										26363,
										26367
									],
									[
										26573,
										26577
									],
									[
										26772,
										26776
									],
									[
										26959,
										26963
									],
									[
										27132,
										27136
									],
									[
										27274,
										27278
									],
									[
										27584,
										27588
									],
									[
										27789,
										27793
									],
									[
										27850,
										27854
									],
									[
										27933,
										27937
									],
									[
										27974,
										27978
									],
									[
										27999,
										28003
									],
									[
										28039,
										28043
									],
									[
										28055,
										28059
									],
									[
										28150,
										28154
									],
									[
										28349,
										28353
									],
									[
										28402,
										28406
									],
									[
										28514,
										28518
									],
									[
										28571,
										28575
									],
									[
										28622,
										28626
									],
									[
										28640,
										28644
									],
									[
										28672,
										28676
									],
									[
										28700,
										28704
									],
									[
										28727,
										28731
									],
									[
										28772,
										28776
									],
									[
										28797,
										28801
									],
									[
										29019,
										29023
									],
									[
										29037,
										29041
									],
									[
										29277,
										29281
									],
									[
										29317,
										29321
									],
									[
										29333,
										29337
									],
									[
										29450,
										29454
									],
									[
										29702,
										29706
									],
									[
										29951,
										29955
									],
									[
										30155,
										30159
									],
									[
										30297,
										30301
									],
									[
										30320,
										30324
									],
									[
										30342,
										30346
									],
									[
										30380,
										30384
									],
									[
										30479,
										30483
									],
									[
										30502,
										30506
									],
									[
										30549,
										30553
									],
									[
										30561,
										30565
									],
									[
										30657,
										30661
									],
									[
										30675,
										30679
									],
									[
										30764,
										30768
									],
									[
										30917,
										30921
									],
									[
										31002,
										31006
									],
									[
										31044,
										31048
									],
									[
										31241,
										31245
									],
									[
										31252,
										31256
									],
									[
										31305,
										31309
									],
									[
										31426,
										31430
									],
									[
										31445,
										31449
									],
									[
										31540,
										31544
									],
									[
										31593,
										31597
									],
									[
										31708,
										31712
									],
									[
										31845,
										31849
									],
									[
										32082,
										32086
									],
									[
										32121,
										32125
									],
									[
										32209,
										32213
									],
									[
										32446,
										32450
									],
									[
										32832,
										32836
									],
									[
										33117,
										33121
									],
									[
										33246,
										33250
									],
									[
										33263,
										33267
									],
									[
										33516,
										33520
									],
									[
										33532,
										33536
									],
									[
										33547,
										33551
									],
									[
										33906,
										33910
									],
									[
										34154,
										34158
									],
									[
										34231,
										34235
									],
									[
										34529,
										34533
									],
									[
										34628,
										34632
									],
									[
										34645,
										34649
									],
									[
										34919,
										34923
									],
									[
										35108,
										35112
									],
									[
										35185,
										35189
									],
									[
										35477,
										35481
									],
									[
										35570,
										35574
									],
									[
										35587,
										35591
									],
									[
										35910,
										35914
									],
									[
										36151,
										36155
									],
									[
										36163,
										36167
									],
									[
										36178,
										36182
									],
									[
										36474,
										36478
									],
									[
										36677,
										36681
									],
									[
										36754,
										36758
									],
									[
										37039,
										37043
									],
									[
										37395,
										37399
									],
									[
										37679,
										37683
									],
									[
										37847,
										37851
									],
									[
										37864,
										37868
									],
									[
										38156,
										38160
									],
									[
										38172,
										38176
									],
									[
										38187,
										38191
									],
									[
										38563,
										38567
									],
									[
										38701,
										38705
									],
									[
										38904,
										38908
									],
									[
										38981,
										38985
									],
									[
										39269,
										39273
									],
									[
										39567,
										39571
									],
									[
										39855,
										39859
									],
									[
										39958,
										39962
									],
									[
										39975,
										39979
									],
									[
										40224,
										40228
									],
									[
										40236,
										40240
									],
									[
										40251,
										40255
									],
									[
										40585,
										40589
									],
									[
										40851,
										40855
									],
									[
										40928,
										40932
									],
									[
										41170,
										41174
									],
									[
										41180,
										41184
									],
									[
										41202,
										41206
									],
									[
										41272,
										41276
									],
									[
										41353,
										41357
									],
									[
										41363,
										41367
									],
									[
										41426,
										41430
									],
									[
										41569,
										41573
									],
									[
										41627,
										41631
									],
									[
										41726,
										41730
									],
									[
										41826,
										41830
									],
									[
										41934,
										41938
									],
									[
										42115,
										42119
									],
									[
										42345,
										42349
									],
									[
										42477,
										42481
									],
									[
										42655,
										42659
									],
									[
										42910,
										42914
									],
									[
										42938,
										42942
									],
									[
										43263,
										43267
									],
									[
										43280,
										43284
									],
									[
										43529,
										43533
									],
									[
										43938,
										43942
									],
									[
										44177,
										44181
									],
									[
										44263,
										44267
									],
									[
										44434,
										44438
									],
									[
										44585,
										44589
									],
									[
										44808,
										44812
									],
									[
										45014,
										45018
									],
									[
										45031,
										45035
									],
									[
										45228,
										45232
									],
									[
										45541,
										45545
									],
									[
										45655,
										45659
									],
									[
										45711,
										45715
									],
									[
										45968,
										45972
									],
									[
										45986,
										45990
									],
									[
										46439,
										46443
									],
									[
										46460,
										46464
									],
									[
										47060,
										47064
									],
									[
										47341,
										47345
									],
									[
										47514,
										47518
									],
									[
										47580,
										47584
									],
									[
										47771,
										47775
									],
									[
										47960,
										47964
									],
									[
										48016,
										48020
									],
									[
										48163,
										48167
									],
									[
										48287,
										48291
									],
									[
										48295,
										48299
									],
									[
										48481,
										48485
									],
									[
										48671,
										48675
									],
									[
										48735,
										48739
									],
									[
										48782,
										48786
									],
									[
										48801,
										48805
									],
									[
										48945,
										48949
									],
									[
										48977,
										48981
									],
									[
										49001,
										49005
									],
									[
										49082,
										49086
									],
									[
										49103,
										49107
									],
									[
										49137,
										49141
									],
									[
										49162,
										49166
									],
									[
										49365,
										49369
									],
									[
										49505,
										49509
									],
									[
										49604,
										49608
									],
									[
										49810,
										49814
									],
									[
										50013,
										50017
									],
									[
										50249,
										50253
									],
									[
										50452,
										50456
									],
									[
										50741,
										50745
									],
									[
										50940,
										50944
									],
									[
										51162,
										51166
									],
									[
										51424,
										51428
									],
									[
										51669,
										51673
									],
									[
										51799,
										51803
									],
									[
										51858,
										51862
									],
									[
										51932,
										51936
									],
									[
										52102,
										52106
									],
									[
										52225,
										52229
									],
									[
										52315,
										52319
									],
									[
										52364,
										52368
									],
									[
										52450,
										52454
									],
									[
										52499,
										52503
									],
									[
										52653,
										52657
									],
									[
										52668,
										52672
									],
									[
										52794,
										52798
									],
									[
										53210,
										53214
									],
									[
										53508,
										53512
									],
									[
										53694,
										53698
									],
									[
										53931,
										53935
									],
									[
										54168,
										54172
									],
									[
										54325,
										54329
									],
									[
										54348,
										54352
									],
									[
										54357,
										54361
									],
									[
										54598,
										54602
									],
									[
										54695,
										54699
									],
									[
										54844,
										54848
									],
									[
										54891,
										54895
									],
									[
										55319,
										55323
									],
									[
										55338,
										55342
									],
									[
										55366,
										55370
									],
									[
										55688,
										55692
									],
									[
										55709,
										55713
									],
									[
										55726,
										55730
									],
									[
										55877,
										55881
									],
									[
										55919,
										55923
									],
									[
										55933,
										55937
									],
									[
										55972,
										55976
									],
									[
										56022,
										56026
									],
									[
										56046,
										56050
									],
									[
										56069,
										56073
									],
									[
										56114,
										56118
									],
									[
										56245,
										56249
									],
									[
										56405,
										56409
									],
									[
										56618,
										56622
									],
									[
										56797,
										56801
									],
									[
										56810,
										56814
									],
									[
										57007,
										57011
									],
									[
										57437,
										57441
									],
									[
										57442,
										57446
									],
									[
										57638,
										57642
									],
									[
										57726,
										57730
									],
									[
										57846,
										57850
									],
									[
										57861,
										57865
									],
									[
										58116,
										58120
									],
									[
										58146,
										58150
									],
									[
										58159,
										58163
									],
									[
										58293,
										58297
									],
									[
										58306,
										58310
									],
									[
										58341,
										58345
									],
									[
										58386,
										58390
									],
									[
										58431,
										58435
									],
									[
										58476,
										58480
									],
									[
										58653,
										58657
									],
									[
										58716,
										58720
									],
									[
										58944,
										58948
									],
									[
										59010,
										59014
									],
									[
										59044,
										59048
									],
									[
										59227,
										59231
									],
									[
										59236,
										59240
									],
									[
										59403,
										59407
									],
									[
										59648,
										59652
									],
									[
										59938,
										59942
									],
									[
										59959,
										59963
									],
									[
										60378,
										60382
									],
									[
										60445,
										60449
									],
									[
										60488,
										60492
									],
									[
										60504,
										60508
									],
									[
										60642,
										60646
									],
									[
										60669,
										60673
									],
									[
										60692,
										60696
									],
									[
										60712,
										60716
									],
									[
										60735,
										60739
									],
									[
										60928,
										60932
									],
									[
										61054,
										61058
									],
									[
										61169,
										61173
									],
									[
										61239,
										61243
									],
									[
										61308,
										61312
									],
									[
										61366,
										61370
									],
									[
										61387,
										61391
									],
									[
										61715,
										61719
									],
									[
										61838,
										61842
									],
									[
										61865,
										61869
									],
									[
										62031,
										62035
									],
									[
										62201,
										62205
									],
									[
										62234,
										62238
									],
									[
										62285,
										62289
									],
									[
										62312,
										62316
									],
									[
										62470,
										62474
									],
									[
										62743,
										62747
									],
									[
										62769,
										62773
									],
									[
										62793,
										62797
									],
									[
										62889,
										62893
									],
									[
										62919,
										62923
									],
									[
										63028,
										63032
									],
									[
										63155,
										63159
									],
									[
										63720,
										63724
									],
									[
										63740,
										63744
									],
									[
										64175,
										64179
									],
									[
										64392,
										64396
									],
									[
										64408,
										64412
									],
									[
										64618,
										64622
									],
									[
										64785,
										64789
									],
									[
										64994,
										64998
									],
									[
										65212,
										65216
									],
									[
										65242,
										65246
									],
									[
										65473,
										65477
									],
									[
										65499,
										65503
									],
									[
										65755,
										65759
									],
									[
										65983,
										65987
									],
									[
										66169,
										66173
									],
									[
										66370,
										66374
									],
									[
										66379,
										66383
									],
									[
										66565,
										66569
									],
									[
										66869,
										66873
									],
									[
										67102,
										67106
									],
									[
										67324,
										67328
									],
									[
										67506,
										67510
									],
									[
										67676,
										67680
									],
									[
										68235,
										68239
									],
									[
										68244,
										68248
									],
									[
										68447,
										68451
									],
									[
										68697,
										68701
									],
									[
										68961,
										68965
									],
									[
										68971,
										68975
									],
									[
										68988,
										68992
									],
									[
										69254,
										69258
									],
									[
										69272,
										69276
									],
									[
										69448,
										69452
									],
									[
										69472,
										69476
									],
									[
										69622,
										69626
									],
									[
										69785,
										69789
									],
									[
										69941,
										69945
									],
									[
										70500,
										70504
									],
									[
										70509,
										70513
									],
									[
										70943,
										70947
									],
									[
										71216,
										71220
									],
									[
										71226,
										71230
									],
									[
										71243,
										71247
									],
									[
										71407,
										71411
									],
									[
										71425,
										71429
									],
									[
										71483,
										71487
									],
									[
										71678,
										71682
									],
									[
										72243,
										72247
									],
									[
										72263,
										72267
									],
									[
										72723,
										72727
									],
									[
										72937,
										72941
									],
									[
										72966,
										72970
									],
									[
										72982,
										72986
									],
									[
										73191,
										73195
									],
									[
										73212,
										73216
									],
									[
										73235,
										73239
									],
									[
										73515,
										73519
									],
									[
										73685,
										73689
									],
									[
										73947,
										73951
									],
									[
										74262,
										74266
									],
									[
										74573,
										74577
									],
									[
										74590,
										74594
									],
									[
										74787,
										74791
									],
									[
										74796,
										74800
									],
									[
										75227,
										75231
									],
									[
										75448,
										75452
									],
									[
										75618,
										75622
									],
									[
										75736,
										75740
									],
									[
										75832,
										75836
									],
									[
										75876,
										75880
									],
									[
										75929,
										75933
									],
									[
										76248,
										76252
									],
									[
										76372,
										76376
									],
									[
										76595,
										76599
									],
									[
										76679,
										76683
									],
									[
										77014,
										77018
									],
									[
										77579,
										77583
									],
									[
										77629,
										77633
									],
									[
										77659,
										77663
									],
									[
										77793,
										77797
									],
									[
										77798,
										77802
									],
									[
										78081,
										78085
									],
									[
										78387,
										78391
									],
									[
										78616,
										78620
									],
									[
										78749,
										78753
									],
									[
										79314,
										79318
									],
									[
										79364,
										79368
									],
									[
										79394,
										79398
									],
									[
										79678,
										79682
									],
									[
										79683,
										79687
									],
									[
										79966,
										79970
									],
									[
										80232,
										80236
									],
									[
										80280,
										80284
									],
									[
										80308,
										80312
									],
									[
										80480,
										80484
									],
									[
										80617,
										80621
									],
									[
										80918,
										80922
									],
									[
										81071,
										81075
									],
									[
										81189,
										81193
									],
									[
										81315,
										81319
									],
									[
										81324,
										81328
									],
									[
										81416,
										81420
									],
									[
										81421,
										81425
									],
									[
										81829,
										81833
									],
									[
										81840,
										81844
									],
									[
										81944,
										81948
									],
									[
										81955,
										81959
									],
									[
										82174,
										82178
									],
									[
										82183,
										82187
									],
									[
										82559,
										82563
									],
									[
										82659,
										82663
									],
									[
										82985,
										82989
									],
									[
										82994,
										82998
									],
									[
										83464,
										83468
									],
									[
										83620,
										83624
									],
									[
										83649,
										83653
									],
									[
										83869,
										83873
									],
									[
										83903,
										83907
									],
									[
										83926,
										83930
									],
									[
										84106,
										84110
									],
									[
										84141,
										84145
									],
									[
										84190,
										84194
									],
									[
										84202,
										84206
									],
									[
										84218,
										84222
									],
									[
										84363,
										84367
									],
									[
										84500,
										84504
									],
									[
										84931,
										84935
									],
									[
										85204,
										85208
									],
									[
										85320,
										85324
									],
									[
										85395,
										85399
									],
									[
										85449,
										85453
									],
									[
										85458,
										85462
									],
									[
										85511,
										85515
									],
									[
										85707,
										85711
									],
									[
										85930,
										85934
									],
									[
										85971,
										85975
									],
									[
										85991,
										85995
									],
									[
										86172,
										86176
									],
									[
										86455,
										86459
									],
									[
										86704,
										86708
									],
									[
										86988,
										86992
									],
									[
										87197,
										87201
									],
									[
										87216,
										87220
									],
									[
										87489,
										87493
									],
									[
										87587,
										87591
									],
									[
										87738,
										87742
									],
									[
										87759,
										87763
									],
									[
										87872,
										87876
									],
									[
										87893,
										87897
									],
									[
										88032,
										88036
									],
									[
										88043,
										88047
									],
									[
										88079,
										88083
									],
									[
										88149,
										88153
									],
									[
										88175,
										88179
									],
									[
										88375,
										88379
									],
									[
										88386,
										88390
									],
									[
										88501,
										88505
									],
									[
										88549,
										88553
									],
									[
										88768,
										88772
									],
									[
										88782,
										88786
									],
									[
										88840,
										88844
									],
									[
										89019,
										89023
									],
									[
										89034,
										89038
									],
									[
										89400,
										89404
									],
									[
										89610,
										89614
									],
									[
										89856,
										89860
									],
									[
										89878,
										89882
									],
									[
										90115,
										90119
									],
									[
										90131,
										90135
									],
									[
										90327,
										90331
									],
									[
										90336,
										90340
									],
									[
										90886,
										90890
									],
									[
										91350,
										91354
									],
									[
										91494,
										91498
									],
									[
										91731,
										91735
									],
									[
										91883,
										91887
									],
									[
										91914,
										91918
									],
									[
										91953,
										91957
									],
									[
										92000,
										92004
									],
									[
										92125,
										92129
									],
									[
										92134,
										92138
									],
									[
										92393,
										92397
									],
									[
										92625,
										92629
									],
									[
										92865,
										92869
									],
									[
										92874,
										92878
									],
									[
										93118,
										93122
									],
									[
										93359,
										93363
									],
									[
										93614,
										93618
									],
									[
										93624,
										93628
									],
									[
										93629,
										93633
									],
									[
										94032,
										94036
									],
									[
										94228,
										94232
									],
									[
										94311,
										94315
									],
									[
										94380,
										94384
									],
									[
										94547,
										94551
									],
									[
										94873,
										94877
									],
									[
										94905,
										94909
									],
									[
										94921,
										94925
									],
									[
										95020,
										95024
									],
									[
										95056,
										95060
									],
									[
										95072,
										95076
									],
									[
										95275,
										95279
									],
									[
										95741,
										95745
									],
									[
										95750,
										95754
									],
									[
										95926,
										95930
									],
									[
										95964,
										95968
									],
									[
										96100,
										96104
									],
									[
										96482,
										96486
									],
									[
										96519,
										96523
									],
									[
										96537,
										96541
									],
									[
										96679,
										96683
									],
									[
										96724,
										96728
									],
									[
										96746,
										96750
									],
									[
										96879,
										96883
									],
									[
										96928,
										96932
									],
									[
										96958,
										96962
									],
									[
										97087,
										97091
									],
									[
										97132,
										97136
									],
									[
										97154,
										97158
									],
									[
										97306,
										97310
									],
									[
										97658,
										97662
									],
									[
										97900,
										97904
									],
									[
										98181,
										98185
									],
									[
										98297,
										98301
									],
									[
										98343,
										98347
									],
									[
										98537,
										98541
									],
									[
										98730,
										98734
									],
									[
										98973,
										98977
									],
									[
										99159,
										99163
									],
									[
										99470,
										99474
									],
									[
										99661,
										99665
									],
									[
										99735,
										99739
									],
									[
										99857,
										99861
									],
									[
										100022,
										100026
									],
									[
										100238,
										100242
									],
									[
										100264,
										100268
									],
									[
										100610,
										100614
									],
									[
										100653,
										100657
									],
									[
										100679,
										100683
									],
									[
										100764,
										100768
									],
									[
										100807,
										100811
									],
									[
										100833,
										100837
									],
									[
										100942,
										100946
									],
									[
										100985,
										100989
									],
									[
										101011,
										101015
									],
									[
										101112,
										101116
									],
									[
										101155,
										101159
									],
									[
										101181,
										101185
									],
									[
										101261,
										101265
									],
									[
										101304,
										101308
									],
									[
										101330,
										101334
									],
									[
										101573,
										101577
									],
									[
										101616,
										101620
									],
									[
										101642,
										101646
									],
									[
										101785,
										101789
									],
									[
										101828,
										101832
									],
									[
										101854,
										101858
									],
									[
										101979,
										101983
									],
									[
										102022,
										102026
									],
									[
										102048,
										102052
									],
									[
										102189,
										102193
									],
									[
										102232,
										102236
									],
									[
										102258,
										102262
									],
									[
										102562,
										102566
									],
									[
										102605,
										102609
									],
									[
										102631,
										102635
									],
									[
										102934,
										102938
									],
									[
										102977,
										102981
									],
									[
										103003,
										103007
									],
									[
										103258,
										103262
									],
									[
										103301,
										103305
									],
									[
										103327,
										103331
									],
									[
										103735,
										103739
									],
									[
										103778,
										103782
									],
									[
										103804,
										103808
									],
									[
										103914,
										103918
									],
									[
										103957,
										103961
									],
									[
										103983,
										103987
									],
									[
										104174,
										104178
									],
									[
										104217,
										104221
									],
									[
										104243,
										104247
									],
									[
										104578,
										104582
									],
									[
										104705,
										104709
									],
									[
										104748,
										104752
									],
									[
										104774,
										104778
									],
									[
										105005,
										105009
									],
									[
										105048,
										105052
									],
									[
										105074,
										105078
									],
									[
										105352,
										105356
									],
									[
										105395,
										105399
									],
									[
										105421,
										105425
									],
									[
										105804,
										105808
									],
									[
										105847,
										105851
									],
									[
										105873,
										105877
									],
									[
										106244,
										106248
									],
									[
										106287,
										106291
									],
									[
										106313,
										106317
									],
									[
										106581,
										106585
									],
									[
										106624,
										106628
									],
									[
										106650,
										106654
									],
									[
										106894,
										106898
									],
									[
										107170,
										107174
									],
									[
										107219,
										107223
									],
									[
										107260,
										107264
									],
									[
										107555,
										107559
									],
									[
										107604,
										107608
									],
									[
										107649,
										107653
									],
									[
										107945,
										107949
									],
									[
										107994,
										107998
									],
									[
										108039,
										108043
									],
									[
										108343,
										108347
									],
									[
										108392,
										108396
									],
									[
										108437,
										108441
									],
									[
										108727,
										108731
									],
									[
										108776,
										108780
									],
									[
										108819,
										108823
									],
									[
										109097,
										109101
									],
									[
										109146,
										109150
									],
									[
										109187,
										109191
									],
									[
										109454,
										109458
									],
									[
										109503,
										109507
									],
									[
										109544,
										109548
									],
									[
										109774,
										109778
									],
									[
										109823,
										109827
									],
									[
										109866,
										109870
									],
									[
										110139,
										110143
									],
									[
										110188,
										110192
									],
									[
										110231,
										110235
									],
									[
										110505,
										110509
									],
									[
										110554,
										110558
									],
									[
										110597,
										110601
									],
									[
										110873,
										110877
									],
									[
										110922,
										110926
									],
									[
										110965,
										110969
									],
									[
										111290,
										111294
									],
									[
										111339,
										111343
									],
									[
										111382,
										111386
									],
									[
										111658,
										111662
									],
									[
										111707,
										111711
									],
									[
										111750,
										111754
									],
									[
										112048,
										112052
									],
									[
										112097,
										112101
									],
									[
										112142,
										112146
									],
									[
										112426,
										112430
									],
									[
										112475,
										112479
									],
									[
										112520,
										112524
									],
									[
										112800,
										112804
									],
									[
										112849,
										112853
									],
									[
										112892,
										112896
									],
									[
										113168,
										113172
									],
									[
										113217,
										113221
									],
									[
										113260,
										113264
									],
									[
										113536,
										113540
									],
									[
										113585,
										113589
									],
									[
										113628,
										113632
									],
									[
										113857,
										113861
									],
									[
										114098,
										114102
									],
									[
										114147,
										114151
									],
									[
										114190,
										114194
									],
									[
										114520,
										114524
									],
									[
										114569,
										114573
									],
									[
										114851,
										114855
									],
									[
										114900,
										114904
									],
									[
										114943,
										114947
									],
									[
										115231,
										115235
									],
									[
										115280,
										115284
									],
									[
										115325,
										115329
									],
									[
										115609,
										115613
									],
									[
										115658,
										115662
									],
									[
										115703,
										115707
									],
									[
										115931,
										115935
									],
									[
										115964,
										115968
									],
									[
										116296,
										116300
									],
									[
										116579,
										116583
									],
									[
										116954,
										116958
									],
									[
										117177,
										117181
									],
									[
										117479,
										117483
									],
									[
										117665,
										117669
									],
									[
										117820,
										117824
									],
									[
										117981,
										117985
									],
									[
										118314,
										118318
									],
									[
										118602,
										118606
									],
									[
										118927,
										118931
									],
									[
										119116,
										119120
									],
									[
										119352,
										119356
									],
									[
										119718,
										119722
									],
									[
										120062,
										120066
									],
									[
										120225,
										120229
									],
									[
										120368,
										120372
									],
									[
										120666,
										120670
									],
									[
										120827,
										120831
									],
									[
										120931,
										120935
									],
									[
										121210,
										121214
									],
									[
										121371,
										121375
									],
									[
										121519,
										121523
									],
									[
										121594,
										121598
									],
									[
										121728,
										121732
									],
									[
										121862,
										121866
									],
									[
										121887,
										121891
									],
									[
										121992,
										121996
									],
									[
										122110,
										122114
									],
									[
										122187,
										122191
									],
									[
										122267,
										122271
									],
									[
										122279,
										122283
									],
									[
										122430,
										122434
									],
									[
										122626,
										122630
									],
									[
										122663,
										122667
									],
									[
										123016,
										123020
									],
									[
										123233,
										123237
									],
									[
										123566,
										123570
									],
									[
										123779,
										123783
									],
									[
										123910,
										123914
									],
									[
										124142,
										124146
									],
									[
										124306,
										124310
									],
									[
										124446,
										124450
									],
									[
										124766,
										124770
									],
									[
										124863,
										124867
									],
									[
										124874,
										124878
									],
									[
										124920,
										124924
									],
									[
										124984,
										124988
									],
									[
										125167,
										125171
									],
									[
										125224,
										125228
									],
									[
										125354,
										125358
									],
									[
										125509,
										125513
									],
									[
										125785,
										125789
									],
									[
										125879,
										125883
									],
									[
										126044,
										126048
									],
									[
										126188,
										126192
									],
									[
										126413,
										126417
									],
									[
										126451,
										126455
									],
									[
										126745,
										126749
									],
									[
										127068,
										127072
									],
									[
										127363,
										127367
									],
									[
										127585,
										127589
									],
									[
										128055,
										128059
									],
									[
										128305,
										128309
									],
									[
										128332,
										128336
									],
									[
										128521,
										128525
									],
									[
										128566,
										128570
									],
									[
										128701,
										128705
									],
									[
										128824,
										128828
									],
									[
										129071,
										129075
									],
									[
										129171,
										129175
									],
									[
										129198,
										129202
									],
									[
										129254,
										129258
									],
									[
										129284,
										129288
									],
									[
										129388,
										129392
									],
									[
										129502,
										129506
									],
									[
										129517,
										129521
									],
									[
										129590,
										129594
									],
									[
										129670,
										129674
									],
									[
										129851,
										129855
									],
									[
										129967,
										129971
									],
									[
										130363,
										130367
									],
									[
										130635,
										130639
									],
									[
										130872,
										130876
									],
									[
										130979,
										130983
									],
									[
										131010,
										131014
									],
									[
										131082,
										131086
									],
									[
										131116,
										131120
									],
									[
										131186,
										131190
									],
									[
										131438,
										131442
									],
									[
										131609,
										131613
									],
									[
										131725,
										131729
									],
									[
										132040,
										132044
									],
									[
										132095,
										132099
									],
									[
										132438,
										132442
									],
									[
										132670,
										132674
									],
									[
										132686,
										132690
									],
									[
										132827,
										132831
									],
									[
										133000,
										133004
									],
									[
										133181,
										133185
									],
									[
										133358,
										133362
									],
									[
										133531,
										133535
									],
									[
										133709,
										133713
									],
									[
										133889,
										133893
									],
									[
										134069,
										134073
									],
									[
										134255,
										134259
									],
									[
										134436,
										134440
									],
									[
										134722,
										134726
									],
									[
										134749,
										134753
									],
									[
										134977,
										134981
									],
									[
										135186,
										135190
									],
									[
										135396,
										135400
									],
									[
										135688,
										135692
									],
									[
										135749,
										135753
									],
									[
										136229,
										136233
									],
									[
										136264,
										136268
									],
									[
										136632,
										136636
									],
									[
										136709,
										136713
									],
									[
										136892,
										136896
									],
									[
										137090,
										137094
									],
									[
										137306,
										137310
									],
									[
										137332,
										137336
									],
									[
										137678,
										137682
									],
									[
										137721,
										137725
									],
									[
										137747,
										137751
									],
									[
										137832,
										137836
									],
									[
										137875,
										137879
									],
									[
										137901,
										137905
									],
									[
										138010,
										138014
									],
									[
										138053,
										138057
									],
									[
										138079,
										138083
									],
									[
										138180,
										138184
									],
									[
										138223,
										138227
									],
									[
										138249,
										138253
									],
									[
										138329,
										138333
									],
									[
										138372,
										138376
									],
									[
										138398,
										138402
									],
									[
										138641,
										138645
									],
									[
										138684,
										138688
									],
									[
										138710,
										138714
									],
									[
										138853,
										138857
									],
									[
										138896,
										138900
									],
									[
										138922,
										138926
									],
									[
										139047,
										139051
									],
									[
										139090,
										139094
									],
									[
										139116,
										139120
									],
									[
										139257,
										139261
									],
									[
										139300,
										139304
									],
									[
										139326,
										139330
									],
									[
										139630,
										139634
									],
									[
										139673,
										139677
									],
									[
										139699,
										139703
									],
									[
										140002,
										140006
									],
									[
										140045,
										140049
									],
									[
										140071,
										140075
									],
									[
										140326,
										140330
									],
									[
										140369,
										140373
									],
									[
										140395,
										140399
									],
									[
										140803,
										140807
									],
									[
										140846,
										140850
									],
									[
										140872,
										140876
									],
									[
										140982,
										140986
									],
									[
										141025,
										141029
									],
									[
										141051,
										141055
									],
									[
										141242,
										141246
									],
									[
										141285,
										141289
									],
									[
										141311,
										141315
									],
									[
										141646,
										141650
									],
									[
										141773,
										141777
									],
									[
										141816,
										141820
									],
									[
										141842,
										141846
									],
									[
										142073,
										142077
									],
									[
										142116,
										142120
									],
									[
										142142,
										142146
									],
									[
										142420,
										142424
									],
									[
										142463,
										142467
									],
									[
										142489,
										142493
									],
									[
										142872,
										142876
									],
									[
										142915,
										142919
									],
									[
										142941,
										142945
									],
									[
										143312,
										143316
									],
									[
										143355,
										143359
									],
									[
										143381,
										143385
									],
									[
										143649,
										143653
									],
									[
										143692,
										143696
									],
									[
										143718,
										143722
									],
									[
										143962,
										143966
									],
									[
										144238,
										144242
									],
									[
										144287,
										144291
									],
									[
										144328,
										144332
									],
									[
										144623,
										144627
									],
									[
										144672,
										144676
									],
									[
										144717,
										144721
									],
									[
										145013,
										145017
									],
									[
										145062,
										145066
									],
									[
										145107,
										145111
									],
									[
										145411,
										145415
									],
									[
										145460,
										145464
									],
									[
										145505,
										145509
									],
									[
										145795,
										145799
									],
									[
										145844,
										145848
									],
									[
										145887,
										145891
									],
									[
										146165,
										146169
									],
									[
										146214,
										146218
									],
									[
										146255,
										146259
									],
									[
										146522,
										146526
									],
									[
										146571,
										146575
									],
									[
										146612,
										146616
									],
									[
										146842,
										146846
									],
									[
										146891,
										146895
									],
									[
										146934,
										146938
									],
									[
										147207,
										147211
									],
									[
										147256,
										147260
									],
									[
										147299,
										147303
									],
									[
										147573,
										147577
									],
									[
										147622,
										147626
									],
									[
										147665,
										147669
									],
									[
										147941,
										147945
									],
									[
										147990,
										147994
									],
									[
										148033,
										148037
									],
									[
										148358,
										148362
									],
									[
										148407,
										148411
									],
									[
										148450,
										148454
									],
									[
										148726,
										148730
									],
									[
										148775,
										148779
									],
									[
										148818,
										148822
									],
									[
										149116,
										149120
									],
									[
										149165,
										149169
									],
									[
										149210,
										149214
									],
									[
										149494,
										149498
									],
									[
										149543,
										149547
									],
									[
										149588,
										149592
									],
									[
										149868,
										149872
									],
									[
										149917,
										149921
									],
									[
										149960,
										149964
									],
									[
										150236,
										150240
									],
									[
										150285,
										150289
									],
									[
										150328,
										150332
									],
									[
										150604,
										150608
									],
									[
										150653,
										150657
									],
									[
										150696,
										150700
									],
									[
										150925,
										150929
									],
									[
										151166,
										151170
									],
									[
										151215,
										151219
									],
									[
										151258,
										151262
									],
									[
										151588,
										151592
									],
									[
										151637,
										151641
									],
									[
										151919,
										151923
									],
									[
										151968,
										151972
									],
									[
										152011,
										152015
									],
									[
										152299,
										152303
									],
									[
										152348,
										152352
									],
									[
										152393,
										152397
									],
									[
										152677,
										152681
									],
									[
										152726,
										152730
									],
									[
										152771,
										152775
									],
									[
										152999,
										153003
									],
									[
										153032,
										153036
									],
									[
										153364,
										153368
									],
									[
										153647,
										153651
									],
									[
										154022,
										154026
									],
									[
										154245,
										154249
									],
									[
										154547,
										154551
									],
									[
										154733,
										154737
									],
									[
										154888,
										154892
									],
									[
										155049,
										155053
									],
									[
										155382,
										155386
									],
									[
										155670,
										155674
									],
									[
										155995,
										155999
									],
									[
										156184,
										156188
									],
									[
										156420,
										156424
									],
									[
										156786,
										156790
									],
									[
										157130,
										157134
									],
									[
										157293,
										157297
									],
									[
										157436,
										157440
									],
									[
										157734,
										157738
									],
									[
										157895,
										157899
									],
									[
										157999,
										158003
									],
									[
										158278,
										158282
									],
									[
										158439,
										158443
									],
									[
										158587,
										158591
									],
									[
										158662,
										158666
									],
									[
										158796,
										158800
									],
									[
										159022,
										159026
									],
									[
										159047,
										159051
									],
									[
										159152,
										159156
									],
									[
										159270,
										159274
									],
									[
										159347,
										159351
									],
									[
										159427,
										159431
									],
									[
										159439,
										159443
									],
									[
										159590,
										159594
									],
									[
										159884,
										159888
									],
									[
										159921,
										159925
									],
									[
										160368,
										160372
									],
									[
										160580,
										160584
									],
									[
										160755,
										160759
									],
									[
										160967,
										160971
									],
									[
										161362,
										161366
									],
									[
										161690,
										161694
									],
									[
										161894,
										161898
									],
									[
										162124,
										162128
									],
									[
										162237,
										162241
									],
									[
										162406,
										162410
									],
									[
										162633,
										162637
									],
									[
										162711,
										162715
									],
									[
										163005,
										163009
									],
									[
										163228,
										163232
									],
									[
										163244,
										163248
									],
									[
										163485,
										163489
									],
									[
										163501,
										163505
									],
									[
										163700,
										163704
									],
									[
										163873,
										163877
									],
									[
										164001,
										164005
									],
									[
										164271,
										164275
									],
									[
										164464,
										164468
									],
									[
										164491,
										164495
									],
									[
										164503,
										164507
									],
									[
										164619,
										164623
									],
									[
										164745,
										164749
									],
									[
										164854,
										164858
									],
									[
										164939,
										164943
									],
									[
										165099,
										165103
									],
									[
										165179,
										165183
									],
									[
										165241,
										165245
									],
									[
										165369,
										165373
									],
									[
										165535,
										165539
									],
									[
										165565,
										165569
									],
									[
										165572,
										165576
									],
									[
										165589,
										165593
									],
									[
										165629,
										165633
									],
									[
										165835,
										165839
									],
									[
										165889,
										165893
									],
									[
										165940,
										165944
									],
									[
										165998,
										166002
									],
									[
										166100,
										166104
									],
									[
										166265,
										166269
									],
									[
										166420,
										166424
									],
									[
										166608,
										166612
									],
									[
										166735,
										166739
									],
									[
										166921,
										166925
									],
									[
										167123,
										167127
									],
									[
										167290,
										167294
									],
									[
										167549,
										167553
									],
									[
										167663,
										167667
									],
									[
										167880,
										167884
									],
									[
										168064,
										168068
									],
									[
										168359,
										168363
									],
									[
										168664,
										168668
									],
									[
										168850,
										168854
									],
									[
										169038,
										169042
									],
									[
										169363,
										169367
									],
									[
										169534,
										169538
									],
									[
										169900,
										169904
									],
									[
										169924,
										169928
									],
									[
										170221,
										170225
									],
									[
										170572,
										170576
									],
									[
										170596,
										170600
									],
									[
										171050,
										171054
									],
									[
										171180,
										171184
									],
									[
										171442,
										171446
									],
									[
										171466,
										171470
									],
									[
										171759,
										171763
									],
									[
										171970,
										171974
									],
									[
										171994,
										171998
									],
									[
										172026,
										172030
									],
									[
										172308,
										172312
									],
									[
										172321,
										172325
									],
									[
										172353,
										172357
									],
									[
										172367,
										172371
									],
									[
										172400,
										172404
									],
									[
										172414,
										172418
									],
									[
										173121,
										173125
									],
									[
										173805,
										173809
									],
									[
										174050,
										174054
									],
									[
										174277,
										174281
									],
									[
										174700,
										174704
									],
									[
										174837,
										174841
									],
									[
										175115,
										175119
									],
									[
										175147,
										175151
									],
									[
										175402,
										175406
									],
									[
										175780,
										175784
									],
									[
										175803,
										175807
									],
									[
										176074,
										176078
									],
									[
										176113,
										176117
									],
									[
										176499,
										176503
									],
									[
										176531,
										176535
									],
									[
										176548,
										176552
									],
									[
										176715,
										176719
									],
									[
										176769,
										176773
									],
									[
										176937,
										176941
									],
									[
										176961,
										176965
									],
									[
										176993,
										176997
									],
									[
										177305,
										177309
									],
									[
										177486,
										177490
									],
									[
										177666,
										177670
									],
									[
										177779,
										177783
									],
									[
										177919,
										177923
									],
									[
										178036,
										178040
									],
									[
										178287,
										178291
									],
									[
										178582,
										178586
									],
									[
										178813,
										178817
									],
									[
										179082,
										179086
									],
									[
										179114,
										179118
									],
									[
										179383,
										179387
									],
									[
										179555,
										179559
									],
									[
										179625,
										179629
									],
									[
										179687,
										179691
									],
									[
										179752,
										179756
									],
									[
										179830,
										179834
									],
									[
										179923,
										179927
									],
									[
										180188,
										180192
									],
									[
										180258,
										180262
									],
									[
										180454,
										180458
									],
									[
										180652,
										180656
									],
									[
										180711,
										180715
									],
									[
										180778,
										180782
									],
									[
										180839,
										180843
									],
									[
										180909,
										180913
									],
									[
										181152,
										181156
									],
									[
										181228,
										181232
									],
									[
										181254,
										181258
									],
									[
										181436,
										181440
									],
									[
										181513,
										181517
									],
									[
										181539,
										181543
									],
									[
										181746,
										181750
									],
									[
										181867,
										181871
									],
									[
										181947,
										181951
									],
									[
										181959,
										181963
									],
									[
										182368,
										182372
									],
									[
										182649,
										182653
									],
									[
										182789,
										182793
									],
									[
										182856,
										182860
									],
									[
										182922,
										182926
									],
									[
										182996,
										183000
									],
									[
										183080,
										183084
									],
									[
										183123,
										183127
									],
									[
										183285,
										183289
									],
									[
										183514,
										183518
									],
									[
										183714,
										183718
									],
									[
										183875,
										183879
									],
									[
										184015,
										184019
									],
									[
										184219,
										184223
									],
									[
										184316,
										184320
									],
									[
										184465,
										184469
									],
									[
										184555,
										184559
									],
									[
										184592,
										184596
									],
									[
										184748,
										184752
									],
									[
										184888,
										184892
									],
									[
										184909,
										184913
									],
									[
										185069,
										185073
									],
									[
										185172,
										185176
									],
									[
										185263,
										185267
									],
									[
										185410,
										185414
									],
									[
										185456,
										185460
									],
									[
										185493,
										185497
									],
									[
										185561,
										185565
									],
									[
										185688,
										185692
									],
									[
										185800,
										185804
									],
									[
										185923,
										185927
									],
									[
										185928,
										185932
									],
									[
										185977,
										185981
									],
									[
										185992,
										185996
									],
									[
										186077,
										186081
									],
									[
										186089,
										186093
									],
									[
										186135,
										186139
									],
									[
										186151,
										186155
									],
									[
										186251,
										186255
									],
									[
										186349,
										186353
									],
									[
										186391,
										186395
									],
									[
										186425,
										186429
									],
									[
										186444,
										186448
									],
									[
										186582,
										186586
									],
									[
										186737,
										186741
									],
									[
										186866,
										186870
									],
									[
										186936,
										186940
									],
									[
										187054,
										187058
									],
									[
										187173,
										187177
									],
									[
										187205,
										187209
									],
									[
										187256,
										187260
									],
									[
										187280,
										187284
									],
									[
										187462,
										187466
									],
									[
										187511,
										187515
									],
									[
										187633,
										187637
									],
									[
										187844,
										187848
									],
									[
										187886,
										187890
									],
									[
										187952,
										187956
									],
									[
										188000,
										188004
									],
									[
										188042,
										188046
									],
									[
										188137,
										188141
									],
									[
										188348,
										188352
									],
									[
										188685,
										188689
									],
									[
										188698,
										188702
									],
									[
										188867,
										188871
									],
									[
										189018,
										189022
									],
									[
										189062,
										189066
									],
									[
										189077,
										189081
									],
									[
										189138,
										189142
									],
									[
										189164,
										189168
									],
									[
										189373,
										189377
									],
									[
										189421,
										189425
									],
									[
										189532,
										189536
									],
									[
										189685,
										189689
									],
									[
										189883,
										189887
									],
									[
										190026,
										190030
									],
									[
										190080,
										190084
									],
									[
										190219,
										190223
									],
									[
										190368,
										190372
									],
									[
										190451,
										190455
									],
									[
										190505,
										190509
									],
									[
										190610,
										190614
									],
									[
										190629,
										190633
									],
									[
										190677,
										190681
									],
									[
										190782,
										190786
									],
									[
										190885,
										190889
									],
									[
										190898,
										190902
									],
									[
										190946,
										190950
									],
									[
										190980,
										190984
									],
									[
										191160,
										191164
									],
									[
										191287,
										191291
									],
									[
										191324,
										191328
									],
									[
										191468,
										191472
									],
									[
										191511,
										191515
									],
									[
										191548,
										191552
									],
									[
										191693,
										191697
									],
									[
										191887,
										191891
									],
									[
										192138,
										192142
									],
									[
										192236,
										192240
									],
									[
										192433,
										192437
									],
									[
										192745,
										192749
									],
									[
										192967,
										192971
									],
									[
										193131,
										193135
									],
									[
										193271,
										193275
									],
									[
										193595,
										193599
									],
									[
										193692,
										193696
									],
									[
										193703,
										193707
									],
									[
										193749,
										193753
									],
									[
										193813,
										193817
									],
									[
										193996,
										194000
									],
									[
										194053,
										194057
									],
									[
										194183,
										194187
									],
									[
										194338,
										194342
									],
									[
										194614,
										194618
									],
									[
										194708,
										194712
									],
									[
										194873,
										194877
									],
									[
										195017,
										195021
									],
									[
										195257,
										195261
									],
									[
										195392,
										195396
									],
									[
										195620,
										195624
									],
									[
										195658,
										195662
									],
									[
										195952,
										195956
									],
									[
										196275,
										196279
									],
									[
										196570,
										196574
									],
									[
										196792,
										196796
									],
									[
										197274,
										197278
									],
									[
										197773,
										197777
									],
									[
										197835,
										197839
									],
									[
										197959,
										197963
									],
									[
										198070,
										198074
									],
									[
										198081,
										198085
									],
									[
										198212,
										198216
									],
									[
										198406,
										198410
									],
									[
										198456,
										198460
									],
									[
										198615,
										198619
									],
									[
										198695,
										198699
									],
									[
										198879,
										198883
									],
									[
										198951,
										198955
									],
									[
										198962,
										198966
									],
									[
										199181,
										199185
									],
									[
										199482,
										199486
									],
									[
										199720,
										199724
									],
									[
										199939,
										199943
									],
									[
										200103,
										200107
									],
									[
										200121,
										200125
									],
									[
										200209,
										200213
									],
									[
										200241,
										200245
									],
									[
										200412,
										200416
									],
									[
										200613,
										200617
									],
									[
										200643,
										200647
									],
									[
										200920,
										200924
									],
									[
										201200,
										201204
									],
									[
										201504,
										201508
									],
									[
										201628,
										201632
									],
									[
										201804,
										201808
									],
									[
										201839,
										201843
									],
									[
										201928,
										201932
									],
									[
										201959,
										201963
									],
									[
										202056,
										202060
									],
									[
										202077,
										202081
									],
									[
										202218,
										202222
									],
									[
										202230,
										202234
									],
									[
										202408,
										202412
									],
									[
										202435,
										202439
									],
									[
										202699,
										202703
									],
									[
										202741,
										202745
									],
									[
										202790,
										202794
									],
									[
										202812,
										202816
									],
									[
										202923,
										202927
									],
									[
										203050,
										203054
									],
									[
										203147,
										203151
									],
									[
										203319,
										203323
									],
									[
										203751,
										203755
									],
									[
										203968,
										203972
									],
									[
										203995,
										203999
									],
									[
										204298,
										204302
									],
									[
										204443,
										204447
									],
									[
										204585,
										204589
									],
									[
										204784,
										204788
									],
									[
										204818,
										204822
									],
									[
										205016,
										205020
									],
									[
										205133,
										205137
									],
									[
										205223,
										205227
									],
									[
										205270,
										205274
									],
									[
										205315,
										205319
									],
									[
										205331,
										205335
									],
									[
										205501,
										205505
									],
									[
										205517,
										205521
									],
									[
										205692,
										205696
									],
									[
										205841,
										205845
									],
									[
										205857,
										205861
									],
									[
										205966,
										205970
									],
									[
										206048,
										206052
									],
									[
										206068,
										206072
									],
									[
										206114,
										206118
									],
									[
										206191,
										206195
									],
									[
										206208,
										206212
									],
									[
										206240,
										206244
									],
									[
										206261,
										206265
									],
									[
										206447,
										206451
									],
									[
										206464,
										206468
									],
									[
										206504,
										206508
									],
									[
										206535,
										206539
									],
									[
										206575,
										206579
									],
									[
										206618,
										206622
									],
									[
										206647,
										206651
									],
									[
										206860,
										206864
									],
									[
										207050,
										207054
									],
									[
										207151,
										207155
									],
									[
										207177,
										207181
									],
									[
										207370,
										207374
									],
									[
										207393,
										207397
									],
									[
										207450,
										207454
									],
									[
										207476,
										207480
									],
									[
										207560,
										207564
									],
									[
										207624,
										207628
									],
									[
										207662,
										207666
									],
									[
										207831,
										207835
									],
									[
										207853,
										207857
									],
									[
										207909,
										207913
									],
									[
										207923,
										207927
									],
									[
										207941,
										207945
									],
									[
										207985,
										207989
									],
									[
										207990,
										207994
									],
									[
										208058,
										208062
									],
									[
										208096,
										208100
									],
									[
										208242,
										208246
									],
									[
										208398,
										208402
									],
									[
										208414,
										208418
									],
									[
										208445,
										208449
									],
									[
										208461,
										208465
									],
									[
										208597,
										208601
									],
									[
										208634,
										208638
									],
									[
										208715,
										208719
									],
									[
										208912,
										208916
									],
									[
										208938,
										208942
									],
									[
										208990,
										208994
									],
									[
										209079,
										209083
									],
									[
										209096,
										209100
									],
									[
										209151,
										209155
									],
									[
										209338,
										209342
									],
									[
										209669,
										209673
									],
									[
										209686,
										209690
									],
									[
										209730,
										209734
									],
									[
										209761,
										209765
									],
									[
										209797,
										209801
									],
									[
										209814,
										209818
									],
									[
										209858,
										209862
									],
									[
										209889,
										209893
									],
									[
										210194,
										210198
									],
									[
										210252,
										210256
									],
									[
										210285,
										210289
									],
									[
										210339,
										210343
									],
									[
										210399,
										210403
									],
									[
										210434,
										210438
									],
									[
										210697,
										210701
									],
									[
										210872,
										210876
									],
									[
										210911,
										210915
									],
									[
										210941,
										210945
									],
									[
										211084,
										211088
									],
									[
										211162,
										211166
									],
									[
										211240,
										211244
									],
									[
										211312,
										211316
									],
									[
										211441,
										211445
									],
									[
										211455,
										211459
									],
									[
										211471,
										211475
									],
									[
										211564,
										211568
									],
									[
										211748,
										211752
									],
									[
										211771,
										211775
									],
									[
										211936,
										211940
									],
									[
										212020,
										212024
									],
									[
										212104,
										212108
									],
									[
										212329,
										212333
									],
									[
										212349,
										212353
									],
									[
										212422,
										212426
									],
									[
										212569,
										212573
									],
									[
										212589,
										212593
									],
									[
										212608,
										212612
									],
									[
										212628,
										212632
									],
									[
										212744,
										212748
									],
									[
										212782,
										212786
									],
									[
										212937,
										212941
									],
									[
										213367,
										213371
									],
									[
										213660,
										213664
									],
									[
										213687,
										213691
									],
									[
										214012,
										214016
									],
									[
										214308,
										214312
									],
									[
										214676,
										214680
									],
									[
										214742,
										214746
									],
									[
										215057,
										215061
									],
									[
										215077,
										215081
									],
									[
										215363,
										215367
									],
									[
										215767,
										215771
									],
									[
										215796,
										215800
									],
									[
										216018,
										216022
									],
									[
										216292,
										216296
									],
									[
										216561,
										216565
									],
									[
										216588,
										216592
									],
									[
										216982,
										216986
									],
									[
										217272,
										217276
									],
									[
										217299,
										217303
									],
									[
										217655,
										217659
									],
									[
										217993,
										217997
									],
									[
										218193,
										218197
									],
									[
										218248,
										218252
									],
									[
										218292,
										218296
									],
									[
										218358,
										218362
									],
									[
										218392,
										218396
									],
									[
										218439,
										218443
									],
									[
										218628,
										218632
									],
									[
										218791,
										218795
									],
									[
										219019,
										219023
									],
									[
										219217,
										219221
									],
									[
										219264,
										219268
									],
									[
										219442,
										219446
									],
									[
										219783,
										219787
									],
									[
										220002,
										220006
									],
									[
										220057,
										220061
									],
									[
										220101,
										220105
									],
									[
										220167,
										220171
									],
									[
										220201,
										220205
									],
									[
										220248,
										220252
									],
									[
										220474,
										220478
									],
									[
										220503,
										220507
									],
									[
										220655,
										220659
									],
									[
										220929,
										220933
									],
									[
										221127,
										221131
									],
									[
										221174,
										221178
									],
									[
										221277,
										221281
									],
									[
										221537,
										221541
									],
									[
										221731,
										221735
									],
									[
										221786,
										221790
									],
									[
										221830,
										221834
									],
									[
										221896,
										221900
									],
									[
										221930,
										221934
									],
									[
										221977,
										221981
									],
									[
										222203,
										222207
									],
									[
										222232,
										222236
									],
									[
										222346,
										222350
									],
									[
										222646,
										222650
									],
									[
										222821,
										222825
									],
									[
										222876,
										222880
									],
									[
										222920,
										222924
									],
									[
										222986,
										222990
									],
									[
										223020,
										223024
									],
									[
										223067,
										223071
									],
									[
										223326,
										223330
									],
									[
										223572,
										223576
									],
									[
										223810,
										223814
									],
									[
										224002,
										224006
									],
									[
										224120,
										224124
									],
									[
										224303,
										224307
									],
									[
										224509,
										224513
									],
									[
										224774,
										224778
									],
									[
										225006,
										225010
									],
									[
										225239,
										225243
									],
									[
										225435,
										225439
									],
									[
										225617,
										225621
									],
									[
										225848,
										225852
									],
									[
										226053,
										226057
									],
									[
										226276,
										226280
									],
									[
										226445,
										226449
									],
									[
										226579,
										226583
									],
									[
										226684,
										226688
									],
									[
										226858,
										226862
									],
									[
										226885,
										226889
									],
									[
										227236,
										227240
									],
									[
										227560,
										227564
									],
									[
										227737,
										227741
									],
									[
										227914,
										227918
									],
									[
										228113,
										228117
									],
									[
										228363,
										228367
									],
									[
										228536,
										228540
									],
									[
										228568,
										228572
									],
									[
										228609,
										228613
									],
									[
										228639,
										228643
									],
									[
										228691,
										228695
									],
									[
										228711,
										228715
									],
									[
										228872,
										228876
									],
									[
										228966,
										228970
									],
									[
										229126,
										229130
									],
									[
										229306,
										229310
									],
									[
										229406,
										229410
									],
									[
										229622,
										229626
									],
									[
										229655,
										229659
									],
									[
										229846,
										229850
									],
									[
										230121,
										230125
									],
									[
										230317,
										230321
									],
									[
										230513,
										230517
									],
									[
										230759,
										230763
									],
									[
										231054,
										231058
									],
									[
										231274,
										231278
									],
									[
										231470,
										231474
									],
									[
										231502,
										231506
									],
									[
										231543,
										231547
									],
									[
										231573,
										231577
									],
									[
										231625,
										231629
									],
									[
										231645,
										231649
									],
									[
										231809,
										231813
									],
									[
										231824,
										231828
									],
									[
										232085,
										232089
									],
									[
										232252,
										232256
									],
									[
										232370,
										232374
									],
									[
										232553,
										232557
									],
									[
										232759,
										232763
									],
									[
										233020,
										233024
									],
									[
										233252,
										233256
									],
									[
										233485,
										233489
									],
									[
										233681,
										233685
									],
									[
										233863,
										233867
									],
									[
										234094,
										234098
									],
									[
										234299,
										234303
									],
									[
										234522,
										234526
									],
									[
										234691,
										234695
									],
									[
										234825,
										234829
									],
									[
										234938,
										234942
									],
									[
										235121,
										235125
									],
									[
										235148,
										235152
									],
									[
										235462,
										235466
									],
									[
										235743,
										235747
									],
									[
										235867,
										235871
									],
									[
										236052,
										236056
									],
									[
										236081,
										236085
									],
									[
										236240,
										236244
									],
									[
										236395,
										236399
									],
									[
										236494,
										236498
									],
									[
										236744,
										236748
									],
									[
										236909,
										236913
									],
									[
										237050,
										237054
									],
									[
										237115,
										237119
									],
									[
										237181,
										237185
									],
									[
										237249,
										237253
									],
									[
										237312,
										237316
									],
									[
										237371,
										237375
									],
									[
										237434,
										237438
									],
									[
										237498,
										237502
									],
									[
										237565,
										237569
									],
									[
										237630,
										237634
									],
									[
										237688,
										237692
									],
									[
										237753,
										237757
									],
									[
										237817,
										237821
									],
									[
										237872,
										237876
									],
									[
										237931,
										237935
									],
									[
										237992,
										237996
									],
									[
										238054,
										238058
									],
									[
										238119,
										238123
									],
									[
										238187,
										238191
									],
									[
										238255,
										238259
									],
									[
										238319,
										238323
									],
									[
										238381,
										238385
									],
									[
										238453,
										238457
									],
									[
										238522,
										238526
									],
									[
										238583,
										238587
									],
									[
										238650,
										238654
									],
									[
										238712,
										238716
									],
									[
										238778,
										238782
									],
									[
										238843,
										238847
									],
									[
										238906,
										238910
									],
									[
										238974,
										238978
									],
									[
										239038,
										239042
									],
									[
										239105,
										239109
									],
									[
										239167,
										239171
									],
									[
										239226,
										239230
									],
									[
										239289,
										239293
									],
									[
										239351,
										239355
									],
									[
										239415,
										239419
									],
									[
										239480,
										239484
									],
									[
										239545,
										239549
									],
									[
										239608,
										239612
									],
									[
										239676,
										239680
									],
									[
										239739,
										239743
									],
									[
										239801,
										239805
									],
									[
										239863,
										239867
									],
									[
										239925,
										239929
									],
									[
										239982,
										239986
									],
									[
										240038,
										240042
									],
									[
										240101,
										240105
									],
									[
										240164,
										240168
									],
									[
										240234,
										240238
									],
									[
										240299,
										240303
									],
									[
										243551,
										243555
									],
									[
										243563,
										243567
									],
									[
										257691,
										257695
									],
									[
										257998,
										258002
									],
									[
										258010,
										258014
									],
									[
										258198,
										258202
									],
									[
										258218,
										258222
									],
									[
										258437,
										258441
									],
									[
										258523,
										258527
									],
									[
										258535,
										258539
									],
									[
										258629,
										258633
									],
									[
										258796,
										258800
									],
									[
										258888,
										258892
									],
									[
										259028,
										259032
									],
									[
										259185,
										259189
									],
									[
										259249,
										259253
									],
									[
										259295,
										259299
									],
									[
										259432,
										259436
									],
									[
										259484,
										259488
									],
									[
										259593,
										259597
									],
									[
										259632,
										259636
									],
									[
										259652,
										259656
									],
									[
										259723,
										259727
									],
									[
										259801,
										259805
									],
									[
										259846,
										259850
									],
									[
										260004,
										260008
									],
									[
										260054,
										260058
									],
									[
										260079,
										260083
									],
									[
										260230,
										260234
									],
									[
										260278,
										260282
									],
									[
										260346,
										260350
									],
									[
										260369,
										260373
									],
									[
										260494,
										260498
									],
									[
										260641,
										260645
									],
									[
										260818,
										260822
									],
									[
										260995,
										260999
									],
									[
										261228,
										261232
									],
									[
										261369,
										261373
									],
									[
										261408,
										261412
									],
									[
										261422,
										261426
									],
									[
										261527,
										261531
									],
									[
										261681,
										261685
									],
									[
										261916,
										261920
									],
									[
										261925,
										261929
									],
									[
										262299,
										262303
									],
									[
										262379,
										262383
									],
									[
										262411,
										262415
									],
									[
										262476,
										262480
									],
									[
										262572,
										262576
									],
									[
										262688,
										262692
									],
									[
										262825,
										262829
									],
									[
										263101,
										263105
									],
									[
										263121,
										263125
									],
									[
										263211,
										263215
									],
									[
										263302,
										263306
									],
									[
										263308,
										263312
									],
									[
										263406,
										263410
									],
									[
										263516,
										263520
									],
									[
										263529,
										263533
									],
									[
										263764,
										263768
									],
									[
										263873,
										263877
									],
									[
										263886,
										263890
									],
									[
										264112,
										264116
									],
									[
										264221,
										264225
									],
									[
										264234,
										264238
									],
									[
										264454,
										264458
									],
									[
										264561,
										264565
									],
									[
										264574,
										264578
									],
									[
										264757,
										264761
									],
									[
										264867,
										264871
									],
									[
										264881,
										264885
									],
									[
										265055,
										265059
									],
									[
										265163,
										265167
									],
									[
										265175,
										265179
									],
									[
										265402,
										265406
									],
									[
										265514,
										265518
									],
									[
										265530,
										265534
									],
									[
										265734,
										265738
									],
									[
										265845,
										265849
									],
									[
										265860,
										265864
									],
									[
										266080,
										266084
									],
									[
										266338,
										266342
									],
									[
										267035,
										267039
									],
									[
										267570,
										267574
									],
									[
										267673,
										267677
									],
									[
										267872,
										267876
									],
									[
										268069,
										268073
									],
									[
										268090,
										268094
									],
									[
										268107,
										268111
									],
									[
										268429,
										268433
									],
									[
										268628,
										268632
									],
									[
										268804,
										268808
									],
									[
										268878,
										268882
									],
									[
										269092,
										269096
									],
									[
										269261,
										269265
									],
									[
										269363,
										269367
									],
									[
										269438,
										269442
									],
									[
										269745,
										269749
									],
									[
										270188,
										270192
									],
									[
										270349,
										270353
									],
									[
										270489,
										270493
									],
									[
										270647,
										270651
									],
									[
										270873,
										270877
									],
									[
										271086,
										271090
									],
									[
										271189,
										271193
									],
									[
										271324,
										271328
									],
									[
										271360,
										271364
									],
									[
										271388,
										271392
									],
									[
										271429,
										271433
									],
									[
										271630,
										271634
									],
									[
										271659,
										271663
									],
									[
										271701,
										271705
									],
									[
										271766,
										271770
									],
									[
										271846,
										271850
									],
									[
										271950,
										271954
									],
									[
										272145,
										272149
									],
									[
										272239,
										272243
									],
									[
										272319,
										272323
									],
									[
										272369,
										272373
									],
									[
										272397,
										272401
									],
									[
										272423,
										272427
									],
									[
										272591,
										272595
									],
									[
										272685,
										272689
									],
									[
										272807,
										272811
									],
									[
										272987,
										272991
									],
									[
										273094,
										273098
									],
									[
										273235,
										273239
									],
									[
										273364,
										273368
									],
									[
										273475,
										273479
									],
									[
										273584,
										273588
									],
									[
										273800,
										273804
									],
									[
										273997,
										274001
									],
									[
										274160,
										274164
									],
									[
										274264,
										274268
									],
									[
										274366,
										274370
									],
									[
										274472,
										274476
									],
									[
										274581,
										274585
									],
									[
										274688,
										274692
									],
									[
										274794,
										274798
									],
									[
										274900,
										274904
									],
									[
										275006,
										275010
									],
									[
										275110,
										275114
									],
									[
										275215,
										275219
									],
									[
										275323,
										275327
									],
									[
										275461,
										275465
									],
									[
										275648,
										275652
									],
									[
										275709,
										275713
									],
									[
										275770,
										275774
									],
									[
										275791,
										275795
									],
									[
										275845,
										275849
									],
									[
										275870,
										275874
									],
									[
										275890,
										275894
									],
									[
										275937,
										275941
									],
									[
										275995,
										275999
									],
									[
										276014,
										276018
									],
									[
										276036,
										276040
									],
									[
										276154,
										276158
									],
									[
										276265,
										276269
									],
									[
										276367,
										276371
									],
									[
										276629,
										276633
									],
									[
										276742,
										276746
									],
									[
										276844,
										276848
									],
									[
										276948,
										276952
									],
									[
										277155,
										277159
									],
									[
										277190,
										277194
									],
									[
										277273,
										277277
									],
									[
										277436,
										277440
									],
									[
										277548,
										277552
									],
									[
										277727,
										277731
									],
									[
										277743,
										277747
									],
									[
										277762,
										277766
									],
									[
										277768,
										277772
									],
									[
										277824,
										277828
									],
									[
										277843,
										277847
									],
									[
										277850,
										277854
									],
									[
										277971,
										277975
									],
									[
										278039,
										278043
									],
									[
										278115,
										278119
									],
									[
										278268,
										278272
									],
									[
										278294,
										278298
									],
									[
										278361,
										278365
									],
									[
										278555,
										278559
									],
									[
										278566,
										278570
									],
									[
										278710,
										278714
									],
									[
										278908,
										278912
									],
									[
										278981,
										278985
									],
									[
										279211,
										279215
									],
									[
										279291,
										279295
									],
									[
										279423,
										279427
									],
									[
										279603,
										279607
									],
									[
										279696,
										279700
									],
									[
										279814,
										279818
									],
									[
										279955,
										279959
									],
									[
										279994,
										279998
									],
									[
										280008,
										280012
									],
									[
										280113,
										280117
									],
									[
										280267,
										280271
									],
									[
										280502,
										280506
									],
									[
										280511,
										280515
									],
									[
										280885,
										280889
									],
									[
										280965,
										280969
									],
									[
										280997,
										281001
									],
									[
										281062,
										281066
									],
									[
										281158,
										281162
									],
									[
										281274,
										281278
									],
									[
										281411,
										281415
									],
									[
										281687,
										281691
									],
									[
										281707,
										281711
									],
									[
										281797,
										281801
									],
									[
										281888,
										281892
									],
									[
										281894,
										281898
									],
									[
										281992,
										281996
									],
									[
										282102,
										282106
									],
									[
										282115,
										282119
									],
									[
										282350,
										282354
									],
									[
										282459,
										282463
									],
									[
										282472,
										282476
									],
									[
										282698,
										282702
									],
									[
										282807,
										282811
									],
									[
										282820,
										282824
									],
									[
										283040,
										283044
									],
									[
										283147,
										283151
									],
									[
										283160,
										283164
									],
									[
										283343,
										283347
									],
									[
										283453,
										283457
									],
									[
										283467,
										283471
									],
									[
										283641,
										283645
									],
									[
										283749,
										283753
									],
									[
										283761,
										283765
									],
									[
										283988,
										283992
									],
									[
										284100,
										284104
									],
									[
										284116,
										284120
									],
									[
										284320,
										284324
									],
									[
										284431,
										284435
									],
									[
										284446,
										284450
									],
									[
										284666,
										284670
									],
									[
										284924,
										284928
									],
									[
										285149,
										285153
									],
									[
										285456,
										285460
									],
									[
										285482,
										285486
									],
									[
										285619,
										285623
									],
									[
										285714,
										285718
									],
									[
										285945,
										285949
									],
									[
										286207,
										286211
									],
									[
										286373,
										286377
									],
									[
										286426,
										286430
									],
									[
										286676,
										286680
									],
									[
										286969,
										286973
									],
									[
										286974,
										286978
									],
									[
										287029,
										287033
									],
									[
										287053,
										287057
									],
									[
										287308,
										287312
									],
									[
										287368,
										287372
									],
									[
										287505,
										287509
									],
									[
										287661,
										287665
									],
									[
										287802,
										287806
									],
									[
										287999,
										288003
									],
									[
										288156,
										288160
									],
									[
										288357,
										288361
									],
									[
										288577,
										288581
									],
									[
										288627,
										288631
									],
									[
										288892,
										288896
									],
									[
										288917,
										288921
									],
									[
										289094,
										289098
									],
									[
										289271,
										289275
									],
									[
										289331,
										289335
									],
									[
										289435,
										289439
									],
									[
										289578,
										289582
									],
									[
										289704,
										289708
									],
									[
										289718,
										289722
									],
									[
										289787,
										289791
									],
									[
										289832,
										289836
									],
									[
										289982,
										289986
									],
									[
										290085,
										290089
									],
									[
										290128,
										290132
									],
									[
										290230,
										290234
									],
									[
										290256,
										290260
									],
									[
										290273,
										290277
									],
									[
										290350,
										290354
									],
									[
										290598,
										290602
									],
									[
										290713,
										290717
									],
									[
										290817,
										290821
									],
									[
										290856,
										290860
									],
									[
										290873,
										290877
									],
									[
										290918,
										290922
									],
									[
										291019,
										291023
									],
									[
										291071,
										291075
									],
									[
										291087,
										291091
									],
									[
										291143,
										291147
									],
									[
										291209,
										291213
									],
									[
										291286,
										291290
									],
									[
										291342,
										291346
									],
									[
										291352,
										291356
									],
									[
										291411,
										291415
									],
									[
										291542,
										291546
									],
									[
										291837,
										291841
									],
									[
										292033,
										292037
									],
									[
										292104,
										292108
									],
									[
										292167,
										292171
									],
									[
										292277,
										292281
									],
									[
										292410,
										292414
									],
									[
										292595,
										292599
									],
									[
										292767,
										292771
									],
									[
										292888,
										292892
									],
									[
										292973,
										292977
									],
									[
										293087,
										293091
									],
									[
										293177,
										293181
									],
									[
										293332,
										293336
									],
									[
										293438,
										293442
									],
									[
										293662,
										293666
									],
									[
										293699,
										293703
									],
									[
										293794,
										293798
									],
									[
										294147,
										294151
									],
									[
										294269,
										294273
									],
									[
										294399,
										294403
									],
									[
										294555,
										294559
									],
									[
										294564,
										294568
									],
									[
										294697,
										294701
									],
									[
										295035,
										295039
									],
									[
										295247,
										295251
									],
									[
										295497,
										295501
									],
									[
										295689,
										295693
									],
									[
										295824,
										295828
									],
									[
										296148,
										296152
									],
									[
										296377,
										296381
									],
									[
										296589,
										296593
									],
									[
										296792,
										296796
									],
									[
										296901,
										296905
									],
									[
										297023,
										297027
									],
									[
										297247,
										297251
									],
									[
										297539,
										297543
									],
									[
										297591,
										297595
									],
									[
										297691,
										297695
									],
									[
										297941,
										297945
									],
									[
										297950,
										297954
									],
									[
										298016,
										298020
									],
									[
										298170,
										298174
									],
									[
										298379,
										298383
									],
									[
										298388,
										298392
									],
									[
										298550,
										298554
									],
									[
										298694,
										298698
									],
									[
										298883,
										298887
									],
									[
										298892,
										298896
									],
									[
										299121,
										299125
									],
									[
										299329,
										299333
									],
									[
										299338,
										299342
									],
									[
										299507,
										299511
									],
									[
										299687,
										299691
									],
									[
										299696,
										299700
									],
									[
										299865,
										299869
									],
									[
										300022,
										300026
									],
									[
										300031,
										300035
									],
									[
										300421,
										300425
									],
									[
										300491,
										300495
									],
									[
										300665,
										300669
									],
									[
										300876,
										300880
									],
									[
										300966,
										300970
									],
									[
										301047,
										301051
									],
									[
										301082,
										301086
									],
									[
										301146,
										301150
									],
									[
										301193,
										301197
									],
									[
										301350,
										301354
									],
									[
										301380,
										301384
									],
									[
										301440,
										301444
									],
									[
										301480,
										301484
									],
									[
										301520,
										301524
									],
									[
										301589,
										301593
									],
									[
										301664,
										301668
									],
									[
										301852,
										301856
									],
									[
										301891,
										301895
									],
									[
										301948,
										301952
									],
									[
										302025,
										302029
									],
									[
										302066,
										302070
									],
									[
										302220,
										302224
									],
									[
										302307,
										302311
									],
									[
										302344,
										302348
									],
									[
										302404,
										302408
									],
									[
										302427,
										302431
									],
									[
										302546,
										302550
									],
									[
										302763,
										302767
									],
									[
										302978,
										302982
									],
									[
										303053,
										303057
									],
									[
										303253,
										303257
									],
									[
										303358,
										303362
									],
									[
										303471,
										303475
									],
									[
										303578,
										303582
									],
									[
										303748,
										303752
									],
									[
										303848,
										303852
									],
									[
										303860,
										303864
									],
									[
										304093,
										304097
									],
									[
										304113,
										304117
									],
									[
										304199,
										304203
									],
									[
										304221,
										304225
									],
									[
										304451,
										304455
									],
									[
										304549,
										304553
									],
									[
										304640,
										304644
									],
									[
										304836,
										304840
									],
									[
										304986,
										304990
									],
									[
										305219,
										305223
									],
									[
										305521,
										305525
									],
									[
										305707,
										305711
									],
									[
										305886,
										305890
									],
									[
										306020,
										306024
									],
									[
										306135,
										306139
									],
									[
										306333,
										306337
									],
									[
										306443,
										306447
									],
									[
										306563,
										306567
									],
									[
										306619,
										306623
									],
									[
										306732,
										306736
									],
									[
										307010,
										307014
									],
									[
										307161,
										307165
									],
									[
										307276,
										307280
									],
									[
										307478,
										307482
									],
									[
										307483,
										307487
									],
									[
										307875,
										307879
									],
									[
										307925,
										307929
									],
									[
										308036,
										308040
									],
									[
										308074,
										308078
									],
									[
										308118,
										308122
									],
									[
										308307,
										308311
									],
									[
										308578,
										308582
									],
									[
										308595,
										308599
									],
									[
										308603,
										308607
									],
									[
										308708,
										308712
									],
									[
										308907,
										308911
									],
									[
										308978,
										308982
									],
									[
										309242,
										309246
									],
									[
										309272,
										309276
									],
									[
										309367,
										309371
									],
									[
										309421,
										309425
									],
									[
										309614,
										309618
									],
									[
										309752,
										309756
									],
									[
										309799,
										309803
									],
									[
										309850,
										309854
									],
									[
										309900,
										309904
									],
									[
										309949,
										309953
									],
									[
										310173,
										310177
									],
									[
										310249,
										310253
									],
									[
										310361,
										310365
									],
									[
										310442,
										310446
									],
									[
										310525,
										310529
									],
									[
										310590,
										310594
									],
									[
										310742,
										310746
									],
									[
										310882,
										310886
									],
									[
										310998,
										311002
									],
									[
										311102,
										311106
									],
									[
										311237,
										311241
									],
									[
										311244,
										311248
									],
									[
										311460,
										311464
									],
									[
										311472,
										311476
									],
									[
										311500,
										311504
									],
									[
										311526,
										311530
									],
									[
										311578,
										311582
									],
									[
										311586,
										311590
									],
									[
										311620,
										311624
									],
									[
										311650,
										311654
									],
									[
										311728,
										311732
									],
									[
										311815,
										311819
									],
									[
										311827,
										311831
									],
									[
										311866,
										311870
									],
									[
										312001,
										312005
									],
									[
										312055,
										312059
									],
									[
										312193,
										312197
									],
									[
										312210,
										312214
									],
									[
										312251,
										312255
									],
									[
										312265,
										312269
									],
									[
										312347,
										312351
									],
									[
										312378,
										312382
									],
									[
										312466,
										312470
									],
									[
										312523,
										312527
									],
									[
										312596,
										312600
									],
									[
										312608,
										312612
									],
									[
										312826,
										312830
									],
									[
										312914,
										312918
									],
									[
										312971,
										312975
									],
									[
										313178,
										313182
									],
									[
										313305,
										313309
									],
									[
										313322,
										313326
									],
									[
										313514,
										313518
									],
									[
										313588,
										313592
									],
									[
										313668,
										313672
									],
									[
										313879,
										313883
									],
									[
										313916,
										313920
									],
									[
										314220,
										314224
									],
									[
										314323,
										314327
									],
									[
										314346,
										314350
									],
									[
										314529,
										314533
									],
									[
										314589,
										314593
									],
									[
										314676,
										314680
									],
									[
										314851,
										314855
									],
									[
										315070,
										315074
									],
									[
										315183,
										315187
									],
									[
										315263,
										315267
									],
									[
										315348,
										315352
									],
									[
										315577,
										315581
									],
									[
										315833,
										315837
									],
									[
										316052,
										316056
									],
									[
										316215,
										316219
									],
									[
										316257,
										316261
									],
									[
										316550,
										316554
									],
									[
										316774,
										316778
									],
									[
										316883,
										316887
									],
									[
										317076,
										317080
									],
									[
										317081,
										317085
									],
									[
										317307,
										317311
									],
									[
										317493,
										317497
									],
									[
										317602,
										317606
									],
									[
										317672,
										317676
									],
									[
										317974,
										317978
									],
									[
										318015,
										318019
									],
									[
										318204,
										318208
									],
									[
										318397,
										318401
									],
									[
										318670,
										318674
									],
									[
										318733,
										318737
									],
									[
										318782,
										318786
									],
									[
										318804,
										318808
									],
									[
										318888,
										318892
									],
									[
										319028,
										319032
									],
									[
										319227,
										319231
									],
									[
										319426,
										319430
									],
									[
										319431,
										319435
									],
									[
										319495,
										319499
									],
									[
										319529,
										319533
									],
									[
										319626,
										319630
									],
									[
										319751,
										319755
									],
									[
										319909,
										319913
									],
									[
										319933,
										319937
									],
									[
										320010,
										320014
									],
									[
										320030,
										320034
									],
									[
										320109,
										320113
									],
									[
										320277,
										320281
									],
									[
										320311,
										320315
									],
									[
										320347,
										320351
									],
									[
										320499,
										320503
									],
									[
										320631,
										320635
									],
									[
										320832,
										320836
									],
									[
										320942,
										320946
									],
									[
										320958,
										320962
									],
									[
										321165,
										321169
									],
									[
										321210,
										321214
									],
									[
										321252,
										321256
									],
									[
										321303,
										321307
									],
									[
										321415,
										321419
									],
									[
										321638,
										321642
									],
									[
										321969,
										321973
									],
									[
										322045,
										322049
									],
									[
										322084,
										322088
									],
									[
										322133,
										322137
									],
									[
										322164,
										322168
									],
									[
										322225,
										322229
									],
									[
										322313,
										322317
									],
									[
										322423,
										322427
									],
									[
										322536,
										322540
									],
									[
										322653,
										322657
									],
									[
										322823,
										322827
									],
									[
										322999,
										323003
									],
									[
										323184,
										323188
									],
									[
										323223,
										323227
									],
									[
										323366,
										323370
									],
									[
										323530,
										323534
									],
									[
										323686,
										323690
									],
									[
										323816,
										323820
									],
									[
										323943,
										323947
									],
									[
										324075,
										324079
									],
									[
										324203,
										324207
									],
									[
										324331,
										324335
									],
									[
										324459,
										324463
									],
									[
										324589,
										324593
									],
									[
										324717,
										324721
									],
									[
										324842,
										324846
									],
									[
										324951,
										324955
									],
									[
										325162,
										325166
									],
									[
										325327,
										325331
									],
									[
										325542,
										325546
									],
									[
										325802,
										325806
									],
									[
										325916,
										325920
									],
									[
										326077,
										326081
									],
									[
										326306,
										326310
									],
									[
										326443,
										326447
									],
									[
										326581,
										326585
									],
									[
										326719,
										326723
									],
									[
										326892,
										326896
									],
									[
										327056,
										327060
									],
									[
										327259,
										327263
									],
									[
										327419,
										327423
									],
									[
										327523,
										327527
									],
									[
										327638,
										327642
									],
									[
										327719,
										327723
									],
									[
										327769,
										327773
									],
									[
										327924,
										327928
									],
									[
										328083,
										328087
									],
									[
										328283,
										328287
									],
									[
										328519,
										328523
									],
									[
										328577,
										328581
									],
									[
										328667,
										328671
									],
									[
										328786,
										328790
									],
									[
										328907,
										328911
									],
									[
										329029,
										329033
									],
									[
										329149,
										329153
									],
									[
										329269,
										329273
									],
									[
										329380,
										329384
									],
									[
										329625,
										329629
									],
									[
										329958,
										329962
									],
									[
										330268,
										330272
									],
									[
										330417,
										330421
									],
									[
										330575,
										330579
									],
									[
										330885,
										330889
									],
									[
										330915,
										330919
									],
									[
										331062,
										331066
									],
									[
										331110,
										331114
									],
									[
										331222,
										331226
									],
									[
										331273,
										331277
									],
									[
										331434,
										331438
									],
									[
										331697,
										331701
									],
									[
										331876,
										331880
									],
									[
										332014,
										332018
									],
									[
										332235,
										332239
									],
									[
										332413,
										332417
									],
									[
										332593,
										332597
									],
									[
										332771,
										332775
									],
									[
										332963,
										332967
									],
									[
										333171,
										333175
									],
									[
										333207,
										333211
									],
									[
										333319,
										333323
									],
									[
										333499,
										333503
									],
									[
										333731,
										333735
									],
									[
										333845,
										333849
									],
									[
										333999,
										334003
									],
									[
										334117,
										334121
									],
									[
										334308,
										334312
									],
									[
										334433,
										334437
									],
									[
										334518,
										334522
									],
									[
										334669,
										334673
									],
									[
										334904,
										334908
									],
									[
										335053,
										335057
									],
									[
										335308,
										335312
									],
									[
										335571,
										335575
									],
									[
										335671,
										335675
									],
									[
										335844,
										335848
									],
									[
										336107,
										336111
									],
									[
										336252,
										336256
									],
									[
										336467,
										336471
									],
									[
										336641,
										336645
									],
									[
										336833,
										336837
									],
									[
										336978,
										336982
									],
									[
										337171,
										337175
									],
									[
										337471,
										337475
									],
									[
										337715,
										337719
									],
									[
										337928,
										337932
									],
									[
										338106,
										338110
									],
									[
										338281,
										338285
									],
									[
										338461,
										338465
									],
									[
										338637,
										338641
									],
									[
										338826,
										338830
									],
									[
										338837,
										338841
									],
									[
										339274,
										339278
									],
									[
										339294,
										339298
									],
									[
										339652,
										339656
									],
									[
										339689,
										339693
									],
									[
										339723,
										339727
									],
									[
										339750,
										339754
									],
									[
										339802,
										339806
									],
									[
										339810,
										339814
									],
									[
										339863,
										339867
									],
									[
										339954,
										339958
									],
									[
										339977,
										339981
									],
									[
										340118,
										340122
									],
									[
										340303,
										340307
									],
									[
										340608,
										340612
									],
									[
										340995,
										340999
									],
									[
										341006,
										341010
									],
									[
										341257,
										341261
									],
									[
										341321,
										341325
									],
									[
										341464,
										341468
									],
									[
										341470,
										341474
									],
									[
										341644,
										341648
									],
									[
										341679,
										341683
									],
									[
										341774,
										341778
									],
									[
										341921,
										341925
									],
									[
										341963,
										341967
									],
									[
										342122,
										342126
									],
									[
										342328,
										342332
									],
									[
										342518,
										342522
									],
									[
										342843,
										342847
									],
									[
										343218,
										343222
									],
									[
										343229,
										343233
									],
									[
										343485,
										343489
									],
									[
										343654,
										343658
									],
									[
										343660,
										343664
									],
									[
										343893,
										343897
									],
									[
										344116,
										344120
									],
									[
										344188,
										344192
									],
									[
										344319,
										344323
									],
									[
										344426,
										344430
									],
									[
										344581,
										344585
									],
									[
										344677,
										344681
									],
									[
										344726,
										344730
									],
									[
										344829,
										344833
									],
									[
										345148,
										345152
									],
									[
										345190,
										345194
									],
									[
										345531,
										345535
									],
									[
										345761,
										345765
									],
									[
										346155,
										346159
									],
									[
										346472,
										346476
									],
									[
										346670,
										346674
									],
									[
										346769,
										346773
									],
									[
										346990,
										346994
									],
									[
										347119,
										347123
									],
									[
										347251,
										347255
									],
									[
										347381,
										347385
									],
									[
										347512,
										347516
									],
									[
										347642,
										347646
									],
									[
										347785,
										347789
									],
									[
										347926,
										347930
									],
									[
										347976,
										347980
									],
									[
										348005,
										348009
									],
									[
										348117,
										348121
									],
									[
										348242,
										348246
									],
									[
										348291,
										348295
									],
									[
										348320,
										348324
									],
									[
										348438,
										348442
									],
									[
										348555,
										348559
									],
									[
										348685,
										348689
									],
									[
										348803,
										348807
									],
									[
										348938,
										348942
									],
									[
										349066,
										349070
									],
									[
										349314,
										349318
									],
									[
										349355,
										349359
									],
									[
										349510,
										349514
									],
									[
										349660,
										349664
									],
									[
										349835,
										349839
									],
									[
										349840,
										349844
									],
									[
										350005,
										350009
									],
									[
										350180,
										350184
									],
									[
										350226,
										350230
									],
									[
										350231,
										350235
									],
									[
										350404,
										350408
									],
									[
										350456,
										350460
									],
									[
										350619,
										350623
									],
									[
										350661,
										350665
									],
									[
										350755,
										350759
									],
									[
										350967,
										350971
									],
									[
										351064,
										351068
									],
									[
										351155,
										351159
									],
									[
										351458,
										351462
									],
									[
										351530,
										351534
									],
									[
										351606,
										351610
									],
									[
										351678,
										351682
									],
									[
										351750,
										351754
									],
									[
										351920,
										351924
									],
									[
										352050,
										352054
									],
									[
										352218,
										352222
									],
									[
										352252,
										352256
									],
									[
										352393,
										352397
									],
									[
										352519,
										352523
									],
									[
										352837,
										352841
									],
									[
										353049,
										353053
									],
									[
										353371,
										353375
									],
									[
										353504,
										353508
									],
									[
										353610,
										353614
									],
									[
										353711,
										353715
									],
									[
										353808,
										353812
									],
									[
										353946,
										353950
									],
									[
										354043,
										354047
									],
									[
										354106,
										354110
									],
									[
										354114,
										354118
									],
									[
										354220,
										354224
									],
									[
										354322,
										354326
									],
									[
										354451,
										354455
									],
									[
										354634,
										354638
									],
									[
										354668,
										354672
									],
									[
										354788,
										354792
									],
									[
										354908,
										354912
									],
									[
										355030,
										355034
									],
									[
										355140,
										355144
									],
									[
										355439,
										355443
									],
									[
										355491,
										355495
									],
									[
										355611,
										355615
									],
									[
										355620,
										355624
									],
									[
										355937,
										355941
									],
									[
										356002,
										356006
									],
									[
										356067,
										356071
									],
									[
										356132,
										356136
									],
									[
										356197,
										356201
									],
									[
										356433,
										356437
									],
									[
										356455,
										356459
									],
									[
										356522,
										356526
									],
									[
										356899,
										356903
									],
									[
										357248,
										357252
									],
									[
										357509,
										357513
									],
									[
										357612,
										357616
									],
									[
										358062,
										358066
									],
									[
										358220,
										358224
									],
									[
										358438,
										358442
									],
									[
										358609,
										358613
									],
									[
										358897,
										358901
									],
									[
										358997,
										359001
									],
									[
										359290,
										359294
									],
									[
										359539,
										359543
									],
									[
										359735,
										359739
									],
									[
										359852,
										359856
									],
									[
										359974,
										359978
									],
									[
										360095,
										360099
									],
									[
										360217,
										360221
									],
									[
										360339,
										360343
									],
									[
										360500,
										360504
									],
									[
										360510,
										360514
									],
									[
										360576,
										360580
									],
									[
										360857,
										360861
									],
									[
										361020,
										361024
									],
									[
										361086,
										361090
									],
									[
										361255,
										361259
									],
									[
										361607,
										361611
									],
									[
										361713,
										361717
									],
									[
										361946,
										361950
									],
									[
										362149,
										362153
									],
									[
										362162,
										362166
									],
									[
										362322,
										362326
									],
									[
										362360,
										362364
									],
									[
										362397,
										362401
									],
									[
										362527,
										362531
									],
									[
										362549,
										362553
									],
									[
										362605,
										362609
									],
									[
										362748,
										362752
									],
									[
										362919,
										362923
									],
									[
										362924,
										362928
									],
									[
										363058,
										363062
									],
									[
										363147,
										363151
									],
									[
										363305,
										363309
									],
									[
										363413,
										363417
									],
									[
										363633,
										363637
									],
									[
										363638,
										363642
									],
									[
										363772,
										363776
									],
									[
										363881,
										363885
									],
									[
										363951,
										363955
									],
									[
										364251,
										364255
									],
									[
										364471,
										364475
									],
									[
										364599,
										364603
									],
									[
										364801,
										364805
									],
									[
										364815,
										364819
									],
									[
										365160,
										365164
									],
									[
										365247,
										365251
									],
									[
										365487,
										365491
									],
									[
										365691,
										365695
									],
									[
										365705,
										365709
									],
									[
										366063,
										366067
									],
									[
										366147,
										366151
									],
									[
										366381,
										366385
									],
									[
										366582,
										366586
									],
									[
										366596,
										366600
									],
									[
										366941,
										366945
									],
									[
										367019,
										367023
									],
									[
										367240,
										367244
									],
									[
										367443,
										367447
									],
									[
										367457,
										367461
									],
									[
										367804,
										367808
									],
									[
										367888,
										367892
									],
									[
										368113,
										368117
									],
									[
										368401,
										368405
									],
									[
										368415,
										368419
									],
									[
										368704,
										368708
									],
									[
										368968,
										368972
									],
									[
										369174,
										369178
									],
									[
										369188,
										369192
									],
									[
										369536,
										369540
									],
									[
										369815,
										369819
									],
									[
										369874,
										369878
									],
									[
										369909,
										369913
									],
									[
										370008,
										370012
									],
									[
										370197,
										370201
									],
									[
										370211,
										370215
									],
									[
										370533,
										370537
									],
									[
										370719,
										370723
									],
									[
										370733,
										370737
									],
									[
										371078,
										371082
									],
									[
										371220,
										371224
									],
									[
										371259,
										371263
									],
									[
										371284,
										371288
									],
									[
										371294,
										371298
									],
									[
										371315,
										371319
									],
									[
										371390,
										371394
									],
									[
										371479,
										371483
									],
									[
										371504,
										371508
									],
									[
										371514,
										371518
									],
									[
										371657,
										371661
									],
									[
										371779,
										371783
									],
									[
										371971,
										371975
									],
									[
										371998,
										372002
									],
									[
										372053,
										372057
									],
									[
										372080,
										372084
									],
									[
										372135,
										372139
									],
									[
										372162,
										372166
									],
									[
										372217,
										372221
									],
									[
										372244,
										372248
									],
									[
										372566,
										372570
									],
									[
										372646,
										372650
									],
									[
										372881,
										372885
									],
									[
										373017,
										373021
									],
									[
										373330,
										373334
									],
									[
										373403,
										373407
									],
									[
										373719,
										373723
									],
									[
										373782,
										373786
									],
									[
										373860,
										373864
									],
									[
										374141,
										374145
									],
									[
										374223,
										374227
									],
									[
										374286,
										374290
									],
									[
										374364,
										374368
									],
									[
										374546,
										374550
									],
									[
										374755,
										374759
									],
									[
										374902,
										374906
									],
									[
										375094,
										375098
									],
									[
										375133,
										375137
									],
									[
										375204,
										375208
									],
									[
										375437,
										375441
									],
									[
										375759,
										375763
									],
									[
										375923,
										375927
									],
									[
										375936,
										375940
									],
									[
										376065,
										376069
									],
									[
										376256,
										376260
									],
									[
										376554,
										376558
									],
									[
										376852,
										376856
									],
									[
										377196,
										377200
									],
									[
										377388,
										377392
									],
									[
										377510,
										377514
									],
									[
										377630,
										377634
									],
									[
										377788,
										377792
									],
									[
										377889,
										377893
									],
									[
										377955,
										377959
									],
									[
										377961,
										377965
									],
									[
										377983,
										377987
									],
									[
										378141,
										378145
									],
									[
										378151,
										378155
									],
									[
										378197,
										378201
									],
									[
										378226,
										378230
									],
									[
										378284,
										378288
									],
									[
										378313,
										378317
									],
									[
										378625,
										378629
									],
									[
										378712,
										378716
									],
									[
										378866,
										378870
									],
									[
										378919,
										378923
									],
									[
										378984,
										378988
									],
									[
										379132,
										379136
									],
									[
										379249,
										379253
									],
									[
										379477,
										379481
									],
									[
										379604,
										379608
									],
									[
										379639,
										379643
									],
									[
										379688,
										379692
									],
									[
										379895,
										379899
									],
									[
										379971,
										379975
									],
									[
										380054,
										380058
									],
									[
										380184,
										380188
									],
									[
										380467,
										380471
									],
									[
										380637,
										380641
									],
									[
										380829,
										380833
									],
									[
										380864,
										380868
									],
									[
										380931,
										380935
									],
									[
										381172,
										381176
									],
									[
										381350,
										381354
									],
									[
										381545,
										381549
									],
									[
										381665,
										381669
									],
									[
										381795,
										381799
									],
									[
										381823,
										381827
									],
									[
										381842,
										381846
									],
									[
										381949,
										381953
									],
									[
										382090,
										382094
									],
									[
										382200,
										382204
									],
									[
										382459,
										382463
									],
									[
										382544,
										382548
									],
									[
										382650,
										382654
									],
									[
										382908,
										382912
									],
									[
										382943,
										382947
									],
									[
										383039,
										383043
									],
									[
										383307,
										383311
									],
									[
										383438,
										383442
									],
									[
										383583,
										383587
									],
									[
										383803,
										383807
									],
									[
										384016,
										384020
									],
									[
										384149,
										384153
									],
									[
										384424,
										384428
									],
									[
										384514,
										384518
									],
									[
										384562,
										384566
									],
									[
										384635,
										384639
									],
									[
										384643,
										384647
									],
									[
										384744,
										384748
									],
									[
										384864,
										384868
									],
									[
										384997,
										385001
									],
									[
										385173,
										385177
									],
									[
										385294,
										385298
									],
									[
										385417,
										385421
									],
									[
										385694,
										385698
									],
									[
										385784,
										385788
									],
									[
										385832,
										385836
									],
									[
										385905,
										385909
									],
									[
										385913,
										385917
									],
									[
										386014,
										386018
									],
									[
										386155,
										386159
									],
									[
										386288,
										386292
									],
									[
										386464,
										386468
									],
									[
										386585,
										386589
									],
									[
										386708,
										386712
									],
									[
										386828,
										386832
									],
									[
										386987,
										386991
									],
									[
										387282,
										387286
									],
									[
										387491,
										387495
									],
									[
										387643,
										387647
									],
									[
										387796,
										387800
									],
									[
										387831,
										387835
									],
									[
										388129,
										388133
									],
									[
										388256,
										388260
									],
									[
										388376,
										388380
									],
									[
										388588,
										388592
									],
									[
										388621,
										388625
									],
									[
										388655,
										388659
									],
									[
										388701,
										388705
									],
									[
										388839,
										388843
									],
									[
										388886,
										388890
									],
									[
										389061,
										389065
									],
									[
										389184,
										389188
									],
									[
										389308,
										389312
									],
									[
										389430,
										389434
									],
									[
										389554,
										389558
									],
									[
										389679,
										389683
									],
									[
										389804,
										389808
									],
									[
										389928,
										389932
									],
									[
										390153,
										390157
									],
									[
										390335,
										390339
									],
									[
										390464,
										390468
									],
									[
										390580,
										390584
									],
									[
										390746,
										390750
									],
									[
										390859,
										390863
									],
									[
										390928,
										390932
									],
									[
										391088,
										391092
									],
									[
										391189,
										391193
									],
									[
										391290,
										391294
									],
									[
										391498,
										391502
									],
									[
										391708,
										391712
									],
									[
										391827,
										391831
									],
									[
										391955,
										391959
									],
									[
										392100,
										392104
									],
									[
										392339,
										392343
									],
									[
										392541,
										392545
									],
									[
										392672,
										392676
									],
									[
										392834,
										392838
									],
									[
										392857,
										392861
									],
									[
										393070,
										393074
									],
									[
										393219,
										393223
									],
									[
										393338,
										393342
									],
									[
										393457,
										393461
									],
									[
										393690,
										393694
									],
									[
										393839,
										393843
									],
									[
										394109,
										394113
									],
									[
										394237,
										394241
									],
									[
										394466,
										394470
									],
									[
										394587,
										394591
									],
									[
										394712,
										394716
									],
									[
										394858,
										394862
									],
									[
										395163,
										395167
									],
									[
										395193,
										395197
									],
									[
										395341,
										395345
									],
									[
										395389,
										395393
									],
									[
										395502,
										395506
									],
									[
										395553,
										395557
									],
									[
										395715,
										395719
									],
									[
										395980,
										395984
									],
									[
										396160,
										396164
									],
									[
										396299,
										396303
									],
									[
										396512,
										396516
									],
									[
										396710,
										396714
									],
									[
										396829,
										396833
									],
									[
										396976,
										396980
									],
									[
										397448,
										397452
									],
									[
										397679,
										397683
									],
									[
										397989,
										397993
									],
									[
										398039,
										398043
									],
									[
										398090,
										398094
									],
									[
										398138,
										398142
									],
									[
										398187,
										398191
									],
									[
										398401,
										398405
									],
									[
										398430,
										398434
									],
									[
										398669,
										398673
									],
									[
										398856,
										398860
									],
									[
										399090,
										399094
									],
									[
										399231,
										399235
									],
									[
										399485,
										399489
									],
									[
										399644,
										399648
									],
									[
										399696,
										399700
									],
									[
										399833,
										399837
									],
									[
										400193,
										400197
									],
									[
										400209,
										400213
									],
									[
										400262,
										400266
									],
									[
										400491,
										400495
									],
									[
										400547,
										400551
									],
									[
										400563,
										400567
									],
									[
										400844,
										400848
									],
									[
										400891,
										400895
									],
									[
										401108,
										401112
									],
									[
										401435,
										401439
									],
									[
										401453,
										401457
									],
									[
										401470,
										401474
									],
									[
										401530,
										401534
									],
									[
										401633,
										401637
									],
									[
										401703,
										401707
									],
									[
										401748,
										401752
									],
									[
										401770,
										401774
									],
									[
										402035,
										402039
									],
									[
										402437,
										402441
									],
									[
										402583,
										402587
									],
									[
										402637,
										402641
									],
									[
										402655,
										402659
									],
									[
										402824,
										402828
									],
									[
										403088,
										403092
									],
									[
										403314,
										403318
									],
									[
										403417,
										403421
									],
									[
										403571,
										403575
									],
									[
										403701,
										403705
									],
									[
										403763,
										403767
									],
									[
										404094,
										404098
									],
									[
										405555,
										405559
									],
									[
										408197,
										408201
									],
									[
										408286,
										408290
									],
									[
										408904,
										408908
									],
									[
										409336,
										409340
									],
									[
										411137,
										411141
									],
									[
										411246,
										411250
									],
									[
										411273,
										411277
									],
									[
										411401,
										411405
									],
									[
										411415,
										411419
									],
									[
										411471,
										411475
									],
									[
										411788,
										411792
									],
									[
										413798,
										413802
									],
									[
										415567,
										415571
									],
									[
										415692,
										415696
									],
									[
										418289,
										418293
									],
									[
										418296,
										418300
									],
									[
										418341,
										418345
									],
									[
										419687,
										419691
									],
									[
										419845,
										419849
									],
									[
										420864,
										420868
									],
									[
										421110,
										421114
									],
									[
										421227,
										421231
									],
									[
										421247,
										421251
									],
									[
										421755,
										421759
									],
									[
										423997,
										424001
									],
									[
										424009,
										424013
									],
									[
										426692,
										426696
									],
									[
										429429,
										429433
									],
									[
										430649,
										430653
									],
									[
										431052,
										431056
									],
									[
										433873,
										433877
									],
									[
										433880,
										433884
									],
									[
										434005,
										434009
									],
									[
										434032,
										434036
									],
									[
										434045,
										434049
									],
									[
										434087,
										434091
									],
									[
										434106,
										434110
									],
									[
										434129,
										434133
									],
									[
										436599,
										436603
									],
									[
										436625,
										436629
									],
									[
										436638,
										436642
									],
									[
										436661,
										436665
									],
									[
										436676,
										436680
									],
									[
										436688,
										436692
									],
									[
										436719,
										436723
									],
									[
										436738,
										436742
									],
									[
										436752,
										436756
									],
									[
										436817,
										436821
									],
									[
										438216,
										438220
									],
									[
										439729,
										439733
									],
									[
										440535,
										440539
									],
									[
										443328,
										443332
									],
									[
										443640,
										443644
									],
									[
										445117,
										445121
									],
									[
										445132,
										445136
									],
									[
										446238,
										446242
									],
									[
										446245,
										446249
									],
									[
										447746,
										447750
									],
									[
										447805,
										447809
									],
									[
										447965,
										447969
									],
									[
										447983,
										447987
									],
									[
										448023,
										448027
									],
									[
										448149,
										448153
									],
									[
										448295,
										448299
									],
									[
										448529,
										448533
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								491,
								491
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 15.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 118.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 320.0,
	"status_bar_visible": true
}
